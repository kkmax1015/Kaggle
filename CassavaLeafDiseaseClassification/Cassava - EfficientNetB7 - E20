{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.6"},"papermill":{"duration":2705.650201,"end_time":"2021-01-20T23:42:08.938285","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2021-01-20T22:57:03.288084","version":"2.1.0"},"colab":{"name":"Cassava - EfficientNetB7 - E20","provenance":[{"file_id":"1j4QMTHpdq7W4WUXpJY4NKWmiSrBI_w4m","timestamp":1613450613377},{"file_id":"1k3GJEDIw5B9smNhmCO9z5wJn0_fz7V6e","timestamp":1611698724662},{"file_id":"1luIn2wZfy_fopw5CZhO7tSwz3QfPBeu0","timestamp":1611649047226},{"file_id":"14lxnkhkxhL-leLaM7_ewQrCSbDr617ZZ","timestamp":1611576808109}],"collapsed_sections":[]},"accelerator":"TPU"},"cells":[{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:08.648534Z","iopub.status.busy":"2021-01-20T22:57:08.647654Z","iopub.status.idle":"2021-01-20T22:57:08.650554Z","shell.execute_reply":"2021-01-20T22:57:08.651069Z"},"papermill":{"duration":0.038327,"end_time":"2021-01-20T22:57:08.651252","exception":false,"start_time":"2021-01-20T22:57:08.612925","status":"completed"},"tags":[],"id":"BkVGwREBxGQy","executionInfo":{"status":"ok","timestamp":1613451123301,"user_tz":-540,"elapsed":472,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["EPOCHS = 20 \n","HEIGHT = 512\n","WIDTH = 512\n","HEIGHT_RS = 512\n","WIDTH_RS = 512\n","CHANNELS = 3\n","N_CLASSES = 5\n","N_FOLDS = 5\n","FOLDS_USED = 5\n","ES_PATIENCE = 5"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:08.738880Z","iopub.status.busy":"2021-01-20T22:57:08.723182Z","iopub.status.idle":"2021-01-20T22:57:11.217685Z","shell.execute_reply":"2021-01-20T22:57:11.216355Z"},"id":"YZBauHrJCkn7","papermill":{"duration":2.537229,"end_time":"2021-01-20T22:57:11.217823","exception":false,"start_time":"2021-01-20T22:57:08.680594","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613451130064,"user_tz":-540,"elapsed":7221,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"9b36ba69-d611-40cc-d0f1-f3471214151a"},"source":["\n","import os\n","\n","models_path=''\n","\n","COLAB=True\n","import gc\n","!pip install fsspec\n","!pip install gcsfs \n","!pip install --upgrade --force-reinstall --no-deps kaggle\n","\n","from google.colab import drive\n","drive.mount('/content/drive')\n","%cd '/content/drive/MyDrive/Colab Notebooks/Cassava/'\n","\n","#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n","\n","database_base_path = 'gs://kds-9254a9aba4b37289f07bbbbe4e2af5c952dd2d811a2c823340ca8091'\n","GCS_PATH = 'gs://kds-73ad24bb2e88a88d616d183727bf88d16deab7892840afc75a21cc90'\n","GCS_PATH_EXT = 'gs://kds-45c6060e9b2c39c0152e5fb66610110218c984e18c09a40d3f7b23d0'\n","GCS_PATH_CLASSES = 'gs://kds-214b31c2a1f93777a325b30beb67b72cda39e60b413aeaa16bff7396'\n","GCS_PATH_EXT_CLASSES = 'gs://kds-46c36b9b602c0da9228d8da71233604d6a4d98c9b36e7e9598d3dceb'\n","\n","\n","# \n","#This is a path to a dataset that changes over time, so you need to constantly update it. To update the path just run the code: \n","#GCS_DS_PATH = KaggleDatasets (). Get_gcs_path ()\n","#print (GCS_PATH)......\n","models_path='/content/drive/MyDrive/Colab Notebooks/Cassava/model/'# I created a folder called Models/Cassava on my Google Drive"],"execution_count":12,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: fsspec in /usr/local/lib/python3.6/dist-packages (0.8.5)\n","Requirement already satisfied: gcsfs in /usr/local/lib/python3.6/dist-packages (0.7.2)\n","Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from gcsfs) (2.23.0)\n","Requirement already satisfied: aiohttp in /usr/local/lib/python3.6/dist-packages (from gcsfs) (3.7.3)\n","Requirement already satisfied: google-auth>=1.2 in /usr/local/lib/python3.6/dist-packages (from gcsfs) (1.25.0)\n","Requirement already satisfied: fsspec>=0.8.0 in /usr/local/lib/python3.6/dist-packages (from gcsfs) (0.8.5)\n","Requirement already satisfied: google-auth-oauthlib in /usr/local/lib/python3.6/dist-packages (from gcsfs) (0.4.2)\n","Requirement already satisfied: decorator in /usr/local/lib/python3.6/dist-packages (from gcsfs) (4.4.2)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests->gcsfs) (1.24.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->gcsfs) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests->gcsfs) (2020.12.5)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->gcsfs) (3.0.4)\n","Requirement already satisfied: async-timeout<4.0,>=3.0 in /usr/local/lib/python3.6/dist-packages (from aiohttp->gcsfs) (3.0.1)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.6/dist-packages (from aiohttp->gcsfs) (20.3.0)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.6/dist-packages (from aiohttp->gcsfs) (5.1.0)\n","Requirement already satisfied: typing-extensions>=3.6.5 in /usr/local/lib/python3.6/dist-packages (from aiohttp->gcsfs) (3.7.4.3)\n","Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.6/dist-packages (from aiohttp->gcsfs) (1.6.3)\n","Requirement already satisfied: idna-ssl>=1.0; python_version < \"3.7\" in /usr/local/lib/python3.6/dist-packages (from aiohttp->gcsfs) (1.1.0)\n","Requirement already satisfied: rsa<5,>=3.1.4; python_version >= \"3.6\" in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.2->gcsfs) (4.7)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.2->gcsfs) (0.2.8)\n","Requirement already satisfied: setuptools>=40.3.0 in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.2->gcsfs) (53.0.0)\n","Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.2->gcsfs) (1.15.0)\n","Requirement already satisfied: cachetools<5.0,>=2.0.0 in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.2->gcsfs) (4.2.1)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.6/dist-packages (from google-auth-oauthlib->gcsfs) (1.3.0)\n","Requirement already satisfied: pyasn1>=0.1.3 in /usr/local/lib/python3.6/dist-packages (from rsa<5,>=3.1.4; python_version >= \"3.6\"->google-auth>=1.2->gcsfs) (0.4.8)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.6/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib->gcsfs) (3.1.0)\n","Processing /root/.cache/pip/wheels/3a/d1/7e/6ce09b72b770149802c653a02783821629146983ee5a360f10/kaggle-1.5.10-cp36-none-any.whl\n","Installing collected packages: kaggle\n","  Found existing installation: kaggle 1.5.10\n","    Uninstalling kaggle-1.5.10:\n","      Successfully uninstalled kaggle-1.5.10\n","Successfully installed kaggle-1.5.10\n","Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","/content/drive/MyDrive/Colab Notebooks/Cassava\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:11.294556Z","iopub.status.busy":"2021-01-20T22:57:11.290187Z","iopub.status.idle":"2021-01-20T22:57:11.298693Z","shell.execute_reply":"2021-01-20T22:57:11.298011Z"},"id":"5V15UaoACh-M","papermill":{"duration":0.051661,"end_time":"2021-01-20T22:57:11.298873","exception":false,"start_time":"2021-01-20T22:57:11.247212","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1613451130065,"user_tz":-540,"elapsed":7215,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["if COLAB:# Prepare the kaggle.json file for use \n","    from google.colab import files\n","    if not os.path.exists('/content/drive/MyDrive/Colab Notebooks/.kaggle/kaggle.json'):\n","        !mkdir ~/content/drive/MyDrive/Colab Notebooks/.kaggle/\n","        if not os.path.exists('/content/drive/MyDrive/Colab Notebooks/.kaggle/kaggle.json'):\n","            files.upload()\n","            !cp kaggle.json ~/content/drive/MyDrive/Colab Notebooks/.kaggle/\n","        else:\n","            !cp '/content/drive/MyDrive/Colab Notebooks/' ~/.kaggle/  \n","        !chmod 600 ~/content/drive/MyDrive/Colab Notebooks/.kaggle/kaggle.json\n"],"execution_count":13,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:11.368941Z","iopub.status.busy":"2021-01-20T22:57:11.367797Z","iopub.status.idle":"2021-01-20T22:57:11.371432Z","shell.execute_reply":"2021-01-20T22:57:11.370752Z"},"id":"urYjsB4IV-t5","papermill":{"duration":0.04238,"end_time":"2021-01-20T22:57:11.371550","exception":false,"start_time":"2021-01-20T22:57:11.329170","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1613451145996,"user_tz":-540,"elapsed":23140,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["if COLAB:# force TF to 2.2\n","    !pip install -q tensorflow~=2.2.0 tensorflow_gcs_config~=2.2.0\n","    \n","    import requests\n","    import os\n","    import tensorflow as tf\n","    resp = requests.post(\"http://{}:8475/requestversion/{}\".format(os.environ[\"COLAB_TPU_ADDR\"].split(\":\")[0], tf.__version__))\n","    if resp.status_code != 200:\n","      print(\"Failed to switch the TPU to TF {}\".format(version))"],"execution_count":14,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DJLH967uCaOv","papermill":{"duration":0.029839,"end_time":"2021-01-20T22:57:11.431128","exception":false,"start_time":"2021-01-20T22:57:11.401289","status":"completed"},"tags":[]},"source":["## Dependencies"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:11.498391Z","iopub.status.busy":"2021-01-20T22:57:11.497630Z","iopub.status.idle":"2021-01-20T22:57:21.909368Z","shell.execute_reply":"2021-01-20T22:57:21.908714Z"},"id":"u8lneueOCaOv","papermill":{"duration":10.446497,"end_time":"2021-01-20T22:57:21.909508","exception":false,"start_time":"2021-01-20T22:57:11.463011","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1613451148715,"user_tz":-540,"elapsed":25851,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["!pip install --quiet efficientnet"],"execution_count":15,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:21.982695Z","iopub.status.busy":"2021-01-20T22:57:21.981961Z","iopub.status.idle":"2021-01-20T22:57:29.891530Z","shell.execute_reply":"2021-01-20T22:57:29.890624Z"},"id":"-iMoIRz7CaOw","papermill":{"duration":7.952124,"end_time":"2021-01-20T22:57:29.891659","exception":false,"start_time":"2021-01-20T22:57:21.939535","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1613451148716,"user_tz":-540,"elapsed":25844,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["import math, os, re, warnings, random, time\n","import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","from matplotlib import pyplot as plt\n","\n","from sklearn.model_selection import KFold\n","from sklearn.metrics import classification_report, confusion_matrix\n","import tensorflow as tf\n","import tensorflow.keras.layers as L\n","import tensorflow.keras.backend as K\n","from tensorflow.keras import optimizers, Sequential, losses, metrics, Model\n","from tensorflow.keras.callbacks import EarlyStopping\n","import efficientnet.tfkeras as efn\n","\n","def seed_everything(seed=18):\n","    random.seed(seed)\n","    np.random.seed(seed)\n","    tf.random.set_seed(seed)\n","    os.environ['PYTHONHASHSEED'] = str(seed)\n","    os.environ['TF_DETERMINISTIC_OPS'] = '1'\n","\n","seed = 18\n","seed_everything(seed)\n","warnings.filterwarnings('ignore')"],"execution_count":16,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Z-146lSGCaOx","papermill":{"duration":0.030316,"end_time":"2021-01-20T22:57:29.954488","exception":false,"start_time":"2021-01-20T22:57:29.924172","status":"completed"},"tags":[]},"source":["### Hardware configuration\n","\n","Note that we have `32` cores, this is because the `TPU v2 Pod` have more cores than a single `TPU v3` which has `8` cores."]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:30.071569Z","iopub.status.busy":"2021-01-20T22:57:30.035804Z","iopub.status.idle":"2021-01-20T22:57:34.008561Z","shell.execute_reply":"2021-01-20T22:57:34.010162Z"},"id":"cCFwEwkVCaOy","papermill":{"duration":4.024986,"end_time":"2021-01-20T22:57:34.010410","exception":false,"start_time":"2021-01-20T22:57:29.985424","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613451165298,"user_tz":-540,"elapsed":42418,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"020eb7a1-0a0c-4663-b609-055169f51368"},"source":["# TPU or GPU detection\n","# Detect hardware, return appropriate distribution strategy\n","try:\n","    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n","    print(f'Running on TPU {tpu.master()}')\n","except ValueError:\n","    tpu = None\n","    print ('tpu',tpu)\n","\n","if tpu:\n","    tf.config.experimental_connect_to_cluster(tpu)\n","    tf.tpu.experimental.initialize_tpu_system(tpu)\n","    strategy = tf.distribute.experimental.TPUStrategy(tpu)\n","else:\n","    strategy = tf.distribute.get_strategy()\n","\n","AUTO = tf.data.experimental.AUTOTUNE\n","REPLICAS = strategy.num_replicas_in_sync\n","print(f'REPLICAS: {REPLICAS}')"],"execution_count":17,"outputs":[{"output_type":"stream","text":["Running on TPU grpc://10.53.42.130:8470\n","WARNING:tensorflow:TPU system grpc://10.53.42.130:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.53.42.130:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.53.42.130:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.53.42.130:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Found TPU system:\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Found TPU system:\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Cores: 8\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Cores: 8\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Workers: 1\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Workers: 1\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Cores Per Worker: 8\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Cores Per Worker: 8\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:CPU:0, CPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:CPU:0, CPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:XLA_CPU:0, XLA_CPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:XLA_CPU:0, XLA_CPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:CPU:0, CPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:CPU:0, CPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:0, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:0, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:1, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:1, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:2, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:2, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:3, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:3, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:4, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:4, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:5, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:5, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:6, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:6, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:7, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:7, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU_SYSTEM:0, TPU_SYSTEM, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU_SYSTEM:0, TPU_SYSTEM, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:XLA_CPU:0, XLA_CPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:XLA_CPU:0, XLA_CPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["REPLICAS: 8\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"NK8TAx9JCaOz","papermill":{"duration":0.035404,"end_time":"2021-01-20T22:57:34.088585","exception":false,"start_time":"2021-01-20T22:57:34.053181","status":"completed"},"tags":[]},"source":["# Model parameters"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:34.155750Z","iopub.status.busy":"2021-01-20T22:57:34.154661Z","iopub.status.idle":"2021-01-20T22:57:34.160980Z","shell.execute_reply":"2021-01-20T22:57:34.160280Z"},"papermill":{"duration":0.040682,"end_time":"2021-01-20T22:57:34.161109","exception":false,"start_time":"2021-01-20T22:57:34.120427","status":"completed"},"tags":[],"id":"hyxJUKF-xGQ2","executionInfo":{"status":"ok","timestamp":1613451165299,"user_tz":-540,"elapsed":42413,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["BATCH_SIZE = 8 * REPLICAS\n","LEARNING_RATE = 1e-5 * REPLICAS"],"execution_count":18,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UmwrOwlYCaOz","papermill":{"duration":0.031304,"end_time":"2021-01-20T22:57:34.223728","exception":false,"start_time":"2021-01-20T22:57:34.192424","status":"completed"},"tags":[]},"source":["# Load data"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:34.290296Z","iopub.status.busy":"2021-01-20T22:57:34.289242Z","iopub.status.idle":"2021-01-20T22:57:35.971447Z","shell.execute_reply":"2021-01-20T22:57:35.971977Z"},"id":"UxM4MGNGCaO0","papermill":{"duration":1.717316,"end_time":"2021-01-20T22:57:35.972129","exception":false,"start_time":"2021-01-20T22:57:34.254813","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":238},"executionInfo":{"status":"ok","timestamp":1613451165993,"user_tz":-540,"elapsed":43100,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"0d5afb3e-505f-4b68-ada5-32d420ff58b0"},"source":["def count_data_items(filenames):\n","    n = [int(re.compile(r'-([0-9]*)\\.').search(filename).group(1)) for filename in filenames]\n","    return np.sum(n)\n","\n","\n","train = pd.read_csv(f'{database_base_path}/train.csv')\n","print(f'Train samples: {len(train)}')\n","\n","FILENAMES_COMP = tf.io.gfile.glob(GCS_PATH + '/*.tfrec')\n","FILENAMES_2019 = tf.io.gfile.glob(GCS_PATH_EXT + '/*.tfrec')\n","\n","FILENAMES_COMP_CBB = tf.io.gfile.glob(GCS_PATH_CLASSES + '/CBB*.tfrec')\n","FILENAMES_COMP_CBSD = tf.io.gfile.glob(GCS_PATH_CLASSES + '/CBSD*.tfrec')\n","FILENAMES_COMP_CGM = tf.io.gfile.glob(GCS_PATH_CLASSES + '/CGM*.tfrec')\n","FILENAMES_COMP_CMD = tf.io.gfile.glob(GCS_PATH_CLASSES + '/CMD*.tfrec')\n","FILENAMES_COMP_Healthy = tf.io.gfile.glob(GCS_PATH_CLASSES + '/Healthy*.tfrec')\n","\n","FILENAMES_2019_CBB = tf.io.gfile.glob(GCS_PATH_EXT_CLASSES + '/CBB*.tfrec')\n","FILENAMES_2019_CBSD = tf.io.gfile.glob(GCS_PATH_EXT_CLASSES + '/CBSD*.tfrec')\n","FILENAMES_2019_CGM = tf.io.gfile.glob(GCS_PATH_EXT_CLASSES + '/CGM*.tfrec')\n","FILENAMES_2019_CMD = tf.io.gfile.glob(GCS_PATH_EXT_CLASSES + '/CMD*.tfrec')\n","FILENAMES_2019_Healthy = tf.io.gfile.glob(GCS_PATH_EXT_CLASSES + '/Healthy*.tfrec')\n","\n","\n","TRAINING_FILENAMES = (FILENAMES_COMP + \n","                      FILENAMES_2019 + \n","                      (2 * FILENAMES_COMP_CBB) + \n","                      (2 * FILENAMES_2019_CBB) + \n","                      (2 * FILENAMES_COMP_CBSD) + \n","                      (2 * FILENAMES_2019_CBSD) + \n","                      (2 * FILENAMES_COMP_CGM) + \n","                      (2 * FILENAMES_2019_CGM) + \n","                      (2 * FILENAMES_COMP_Healthy) + \n","                      (2 * FILENAMES_2019_Healthy))\n","\n","NUM_TRAINING_IMAGES = count_data_items(TRAINING_FILENAMES)\n","\n","print(f'GCS: train images: {NUM_TRAINING_IMAGES}')\n","display(train.head())\n","\n","CLASSES = ['Cassava Bacterial Blight', \n","           'Cassava Brown Streak Disease', \n","           'Cassava Green Mottle', \n","           'Cassava Mosaic Disease', \n","           'Healthy']"],"execution_count":19,"outputs":[{"output_type":"stream","text":["Train samples: 21397\n","GCS: train images: 48081\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>image_id</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1000015157.jpg</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1000201771.jpg</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>100042118.jpg</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1000723321.jpg</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1000812911.jpg</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         image_id  label\n","0  1000015157.jpg      0\n","1  1000201771.jpg      3\n","2   100042118.jpg      1\n","3  1000723321.jpg      1\n","4  1000812911.jpg      3"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"BZIhYsg_CaO1","papermill":{"duration":0.032803,"end_time":"2021-01-20T22:57:36.037731","exception":false,"start_time":"2021-01-20T22:57:36.004928","status":"completed"},"tags":[]},"source":["# Augmentation"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:36.106682Z","iopub.status.busy":"2021-01-20T22:57:36.105973Z","iopub.status.idle":"2021-01-20T22:57:36.133193Z","shell.execute_reply":"2021-01-20T22:57:36.133788Z"},"id":"Wwh329L6CaO1","papermill":{"duration":0.063522,"end_time":"2021-01-20T22:57:36.133965","exception":false,"start_time":"2021-01-20T22:57:36.070443","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1613451165993,"user_tz":-540,"elapsed":43093,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["def data_augment(image, label):\n","    p_rotation = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_spatial = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_rotate = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_pixel_1 = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_pixel_2 = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_pixel_3 = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_shear = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_crop = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_cutout = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    \n","    # Shear\n","    if p_shear > .2:\n","        if p_shear > .6:\n","            image = transform_shear(image, HEIGHT, shear=20.)\n","        else:\n","            image = transform_shear(image, HEIGHT, shear=-20.)\n","            \n","    # Rotation\n","    if p_rotation > .2:\n","        if p_rotation > .6:\n","            image = transform_rotation(image, HEIGHT, rotation=45.)\n","        else:\n","            image = transform_rotation(image, HEIGHT, rotation=-45.)\n","            \n","    # Flips\n","    image = tf.image.random_flip_left_right(image)\n","    image = tf.image.random_flip_up_down(image)\n","    if p_spatial > .75:\n","        image = tf.image.transpose(image)\n","        \n","    # Rotates\n","    if p_rotate > .75:\n","        image = tf.image.rot90(image, k=3) # rotate 270º\n","    elif p_rotate > .5:\n","        image = tf.image.rot90(image, k=2) # rotate 180º\n","    elif p_rotate > .25:\n","        image = tf.image.rot90(image, k=1) # rotate 90º\n","        \n","    # Pixel-level transforms\n","    if p_pixel_1 >= .4:\n","        image = tf.image.random_saturation(image, lower=.7, upper=1.3)\n","    if p_pixel_2 >= .4:\n","        image = tf.image.random_contrast(image, lower=.8, upper=1.2)\n","    if p_pixel_3 >= .4:\n","        image = tf.image.random_brightness(image, max_delta=.1)\n","        \n","    # Crops\n","    if p_crop > .6:\n","        if p_crop > .9:\n","            image = tf.image.central_crop(image, central_fraction=.5)\n","        elif p_crop > .8:\n","            image = tf.image.central_crop(image, central_fraction=.6)\n","        elif p_crop > .7:\n","            image = tf.image.central_crop(image, central_fraction=.7)\n","        else:\n","            image = tf.image.central_crop(image, central_fraction=.8)\n","    elif p_crop > .3:\n","        crop_size = tf.random.uniform([], int(HEIGHT*.6), HEIGHT, dtype=tf.int32)\n","        image = tf.image.random_crop(image, size=[crop_size, crop_size, CHANNELS])\n","            \n","    image = tf.image.resize(image, size=[HEIGHT, WIDTH])\n","\n","    if p_cutout > .5:\n","        image = data_augment_cutout(image)\n","        \n","    return image, label"],"execution_count":20,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"r4Hg1nKgCaO1","papermill":{"duration":0.033215,"end_time":"2021-01-20T22:57:36.199741","exception":false,"start_time":"2021-01-20T22:57:36.166526","status":"completed"},"tags":[]},"source":["## Auxiliary functions"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:36.295009Z","iopub.status.busy":"2021-01-20T22:57:36.289488Z","iopub.status.idle":"2021-01-20T22:57:36.318353Z","shell.execute_reply":"2021-01-20T22:57:36.317633Z"},"id":"-DueNRgfCaO1","papermill":{"duration":0.08607,"end_time":"2021-01-20T22:57:36.318490","exception":false,"start_time":"2021-01-20T22:57:36.232420","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1613451166185,"user_tz":-540,"elapsed":43280,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["# data augmentation @cdeotte kernel: https://www.kaggle.com/cdeotte/rotation-augmentation-gpu-tpu-0-96\n","def transform_rotation(image, height, rotation):\n","    # input image - is one image of size [dim,dim,3] not a batch of [b,dim,dim,3]\n","    # output - image randomly rotated\n","    DIM = height\n","    XDIM = DIM%2 #fix for size 331\n","    \n","    rotation = rotation * tf.random.uniform([1],dtype='float32')\n","    # CONVERT DEGREES TO RADIANS\n","    rotation = math.pi * rotation / 180.\n","    \n","    # ROTATION MATRIX\n","    c1 = tf.math.cos(rotation)\n","    s1 = tf.math.sin(rotation)\n","    one = tf.constant([1],dtype='float32')\n","    zero = tf.constant([0],dtype='float32')\n","    rotation_matrix = tf.reshape(tf.concat([c1,s1,zero, -s1,c1,zero, zero,zero,one],axis=0),[3,3])\n","\n","    # LIST DESTINATION PIXEL INDICES\n","    x = tf.repeat( tf.range(DIM//2,-DIM//2,-1), DIM )\n","    y = tf.tile( tf.range(-DIM//2,DIM//2),[DIM] )\n","    z = tf.ones([DIM*DIM],dtype='int32')\n","    idx = tf.stack( [x,y,z] )\n","    \n","    # ROTATE DESTINATION PIXELS ONTO ORIGIN PIXELS\n","    idx2 = K.dot(rotation_matrix,tf.cast(idx,dtype='float32'))\n","    idx2 = K.cast(idx2,dtype='int32')\n","    idx2 = K.clip(idx2,-DIM//2+XDIM+1,DIM//2)\n","    \n","    # FIND ORIGIN PIXEL VALUES \n","    idx3 = tf.stack( [DIM//2-idx2[0,], DIM//2-1+idx2[1,]] )\n","    d = tf.gather_nd(image, tf.transpose(idx3))\n","        \n","    return tf.reshape(d,[DIM,DIM,3])\n","\n","def transform_shear(image, height, shear):\n","    # input image - is one image of size [dim,dim,3] not a batch of [b,dim,dim,3]\n","    # output - image randomly sheared\n","    DIM = height\n","    XDIM = DIM%2 #fix for size 331\n","    \n","    shear = shear * tf.random.uniform([1],dtype='float32')\n","    shear = math.pi * shear / 180.\n","        \n","    # SHEAR MATRIX\n","    one = tf.constant([1],dtype='float32')\n","    zero = tf.constant([0],dtype='float32')\n","    c2 = tf.math.cos(shear)\n","    s2 = tf.math.sin(shear)\n","    shear_matrix = tf.reshape(tf.concat([one,s2,zero, zero,c2,zero, zero,zero,one],axis=0),[3,3])    \n","\n","    # LIST DESTINATION PIXEL INDICES\n","    x = tf.repeat( tf.range(DIM//2,-DIM//2,-1), DIM )\n","    y = tf.tile( tf.range(-DIM//2,DIM//2),[DIM] )\n","    z = tf.ones([DIM*DIM],dtype='int32')\n","    idx = tf.stack( [x,y,z] )\n","    \n","    # ROTATE DESTINATION PIXELS ONTO ORIGIN PIXELS\n","    idx2 = K.dot(shear_matrix,tf.cast(idx,dtype='float32'))\n","    idx2 = K.cast(idx2,dtype='int32')\n","    idx2 = K.clip(idx2,-DIM//2+XDIM+1,DIM//2)\n","    \n","    # FIND ORIGIN PIXEL VALUES \n","    idx3 = tf.stack( [DIM//2-idx2[0,], DIM//2-1+idx2[1,]] )\n","    d = tf.gather_nd(image, tf.transpose(idx3))\n","        \n","    return tf.reshape(d,[DIM,DIM,3])\n","\n","# CutOut\n","def data_augment_cutout(image, min_mask_size=(int(HEIGHT * .1), int(HEIGHT * .1)), \n","                        max_mask_size=(int(HEIGHT * .125), int(HEIGHT * .125))):\n","    p_cutout = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    \n","    if p_cutout > .85: # 10~15 cut outs\n","        n_cutout = tf.random.uniform([], 10, 15, dtype=tf.int32)\n","        image = random_cutout(image, HEIGHT, WIDTH, \n","                              min_mask_size=min_mask_size, max_mask_size=max_mask_size, k=n_cutout)\n","    elif p_cutout > .6: # 5~10 cut outs\n","        n_cutout = tf.random.uniform([], 5, 10, dtype=tf.int32)\n","        image = random_cutout(image, HEIGHT, WIDTH, \n","                              min_mask_size=min_mask_size, max_mask_size=max_mask_size, k=n_cutout)\n","    elif p_cutout > .25: # 2~5 cut outs\n","        n_cutout = tf.random.uniform([], 2, 5, dtype=tf.int32)\n","        image = random_cutout(image, HEIGHT, WIDTH, \n","                              min_mask_size=min_mask_size, max_mask_size=max_mask_size, k=n_cutout)\n","    else: # 1 cut out\n","        image = random_cutout(image, HEIGHT, WIDTH, \n","                              min_mask_size=min_mask_size, max_mask_size=max_mask_size, k=1)\n","\n","    return image\n","\n","def random_cutout(image, height, width, channels=3, min_mask_size=(10, 10), max_mask_size=(80, 80), k=1):\n","    assert height > min_mask_size[0]\n","    assert width > min_mask_size[1]\n","    assert height > max_mask_size[0]\n","    assert width > max_mask_size[1]\n","\n","    for i in range(k):\n","      mask_height = tf.random.uniform(shape=[], minval=min_mask_size[0], maxval=max_mask_size[0], dtype=tf.int32)\n","      mask_width = tf.random.uniform(shape=[], minval=min_mask_size[1], maxval=max_mask_size[1], dtype=tf.int32)\n","\n","      pad_h = height - mask_height\n","      pad_top = tf.random.uniform(shape=[], minval=0, maxval=pad_h, dtype=tf.int32)\n","      pad_bottom = pad_h - pad_top\n","\n","      pad_w = width - mask_width\n","      pad_left = tf.random.uniform(shape=[], minval=0, maxval=pad_w, dtype=tf.int32)\n","      pad_right = pad_w - pad_left\n","\n","      cutout_area = tf.zeros(shape=[mask_height, mask_width, channels], dtype=tf.uint8)\n","\n","      cutout_mask = tf.pad([cutout_area], [[0,0],[pad_top, pad_bottom], [pad_left, pad_right], [0,0]], constant_values=1)\n","      cutout_mask = tf.squeeze(cutout_mask, axis=0)\n","      image = tf.multiply(tf.cast(image, tf.float32), tf.cast(cutout_mask, tf.float32))\n","\n","    return image"],"execution_count":21,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:36.388974Z","iopub.status.busy":"2021-01-20T22:57:36.388107Z","iopub.status.idle":"2021-01-20T22:57:36.415254Z","shell.execute_reply":"2021-01-20T22:57:36.415771Z"},"id":"CPcg0bWECaO1","papermill":{"duration":0.064439,"end_time":"2021-01-20T22:57:36.415960","exception":false,"start_time":"2021-01-20T22:57:36.351521","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1613451166186,"user_tz":-540,"elapsed":43276,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["# Datasets utility functions\n","def decode_image(image_data):\n","    \"\"\"\n","        Decode a JPEG-encoded image to a uint8 tensor.\n","    \"\"\"\n","    image = tf.image.decode_jpeg(image_data, channels=3)\n","    return image\n","\n","def scale_image(image, label):\n","    \"\"\"\n","        Cast tensor to float and normalizes (range between 0 and 1).\n","    \"\"\"\n","    image = tf.cast(image, tf.float32)\n","    image /= 255.0\n","    return image, label\n","\n","def prepare_image(image, label):\n","    \"\"\"\n","        Resize and reshape images to the expected size.\n","    \"\"\"\n","    image = tf.image.resize(image, [HEIGHT_RS, WIDTH_RS])\n","    image = tf.reshape(image, [HEIGHT_RS, WIDTH_RS, 3])\n","    return image, label\n","\n","def read_tfrecord(example, labeled=True):\n","    \"\"\"\n","        1. Parse data based on the 'TFREC_FORMAT' map.\n","        2. Decode image.\n","        3. If 'labeled' returns (image, label) if not (image, name).\n","    \"\"\"\n","    if labeled:\n","        TFREC_FORMAT = {\n","            'image': tf.io.FixedLenFeature([], tf.string), \n","            'target': tf.io.FixedLenFeature([], tf.int64), \n","        }\n","    else:\n","        TFREC_FORMAT = {\n","            'image': tf.io.FixedLenFeature([], tf.string), \n","            'image_name': tf.io.FixedLenFeature([], tf.string), \n","        }\n","    example = tf.io.parse_single_example(example, TFREC_FORMAT)\n","    image = decode_image(example['image'])\n","    if labeled:\n","        label_or_name = tf.cast(example['target'], tf.int32)\n","        # One-Hot Encoding needed to use \"categorical_crossentropy\" loss\n","        label_or_name = tf.one_hot(tf.cast(label_or_name, tf.int32), N_CLASSES)\n","    else:\n","        label_or_name = example['image_name']\n","    return image, label_or_name\n","\n","def get_dataset(FILENAMES, labeled=True, ordered=False, repeated=False, \n","                cached=False, augment=False):\n","    \"\"\"\n","        Return a Tensorflow dataset ready for training or inference.\n","    \"\"\"\n","    ignore_order = tf.data.Options()\n","    if not ordered:\n","        ignore_order.experimental_deterministic = False\n","        dataset = tf.data.Dataset.list_files(FILENAMES)\n","        dataset = dataset.interleave(tf.data.TFRecordDataset, num_parallel_calls=AUTO)\n","    else:\n","        dataset = tf.data.TFRecordDataset(FILENAMES, num_parallel_reads=AUTO)\n","        \n","    dataset = dataset.with_options(ignore_order)\n","    \n","    dataset = dataset.map(lambda x: read_tfrecord(x, labeled=labeled), num_parallel_calls=AUTO)\n","    \n","    if augment:\n","        dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n","        \n","    dataset = dataset.map(scale_image, num_parallel_calls=AUTO)\n","    dataset = dataset.map(prepare_image, num_parallel_calls=AUTO)\n","    \n","    if not ordered:\n","        dataset = dataset.shuffle(2048)\n","    if repeated:\n","        dataset = dataset.repeat()\n","        \n","    dataset = dataset.batch(BATCH_SIZE)\n","    \n","    if cached:\n","        dataset = dataset.cache()\n","    dataset = dataset.prefetch(AUTO)\n","    return dataset\n","\n","def unfreeze_model(model):\n","    # Unfreeze layers while leaving BatchNorm layers frozen\n","    for layer in model.layers:\n","        if not isinstance(layer, L.BatchNormalization):\n","            layer.trainable = True\n","        else:\n","            layer.trainable = False\n","                \n","def unfreeze_block(model, block_name=None, n_top=3):\n","    # Unfreeze layers while leaving BatchNorm layers frozen\n","    for layer in model.layers[:-n_top]:\n","        if isinstance(layer, L.BatchNormalization):\n","            layer.trainable = False\n","        else:\n","            if block_name and (block_name in layer.name):\n","                layer.trainable = True"],"execution_count":22,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:36.487403Z","iopub.status.busy":"2021-01-20T22:57:36.486600Z","iopub.status.idle":"2021-01-20T22:57:36.530480Z","shell.execute_reply":"2021-01-20T22:57:36.531039Z"},"id":"gHAxNOInCaO2","papermill":{"duration":0.081913,"end_time":"2021-01-20T22:57:36.531213","exception":false,"start_time":"2021-01-20T22:57:36.449300","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1613451166374,"user_tz":-540,"elapsed":43460,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["# Visualization utility functions\n","np.set_printoptions(threshold=15, linewidth=80)\n","\n","def batch_to_numpy_images_and_labels(data):\n","    images, labels = data\n","    numpy_images = images.numpy()\n","    numpy_labels = labels.numpy()\n","    if numpy_labels.dtype == object: # binary string in this case, these are image ID strings\n","        numpy_labels = [None for _ in enumerate(numpy_images)]\n","    # If no labels, only image IDs, return None for labels (this is the case for test data)\n","    return numpy_images, numpy_labels\n","\n","def title_from_label_and_target(label, correct_label):\n","    if correct_label is None:\n","        return CLASSES[label], True\n","    correct = (label == correct_label)\n","    return \"{} [{}{}{}]\".format(CLASSES[label], 'OK' if correct else 'NO', u\"\\u2192\" if not correct else '',\n","                                CLASSES[correct_label] if not correct else ''), correct\n","\n","def display_one_flower(image, title, subplot, red=False, titlesize=16):\n","    plt.subplot(*subplot)\n","    plt.axis('off')\n","    plt.imshow(image)\n","    if len(title) > 0:\n","        plt.title(title, fontsize=int(titlesize) if not red else int(titlesize/1.2), color='red' if red else 'black', \n","                  fontdict={'verticalalignment':'center'}, pad=int(titlesize/1.5))\n","    return (subplot[0], subplot[1], subplot[2]+1)\n","\n","def display_batch_of_images(databatch, predictions=None):\n","    \"\"\"This will work with:\n","    display_batch_of_images(images)\n","    display_batch_of_images(images, predictions)\n","    display_batch_of_images((images, labels))\n","    display_batch_of_images((images, labels), predictions)\n","    \"\"\"\n","    # data\n","    images, labels = batch_to_numpy_images_and_labels(databatch)\n","    labels = np.argmax(labels, axis=-1)\n","    if labels is None:\n","        labels = [None for _ in enumerate(images)]\n","        \n","    # auto-squaring: this will drop data that does not fit into square or square-ish rectangle\n","    rows = int(math.sqrt(len(images)))\n","    cols = len(images)//rows\n","        \n","    # size and spacing\n","    FIGSIZE = 13.0\n","    SPACING = 0.1\n","    subplot=(rows,cols,1)\n","    if rows < cols:\n","        plt.figure(figsize=(FIGSIZE,FIGSIZE/cols*rows))\n","    else:\n","        plt.figure(figsize=(FIGSIZE/rows*cols,FIGSIZE))\n","    \n","    # display\n","    for i, (image, label) in enumerate(zip(images[:rows*cols], labels[:rows*cols])):\n","        title = '' if label is None else CLASSES[label]\n","        correct = True\n","        if predictions is not None:\n","            title, correct = title_from_label_and_target(predictions[i], label)\n","        dynamic_titlesize = FIGSIZE*SPACING/max(rows,cols)*40+3 # magic formula tested to work from 1x1 to 10x10 images\n","        subplot = display_one_flower(image, title, subplot, not correct, titlesize=dynamic_titlesize)\n","    \n","    #layout\n","    plt.tight_layout()\n","    if label is None and predictions is None:\n","        plt.subplots_adjust(wspace=0, hspace=0)\n","    else:\n","        plt.subplots_adjust(wspace=SPACING, hspace=SPACING)\n","    plt.show()\n","    \n","# Visualize model predictions\n","def dataset_to_numpy_util(dataset, N):\n","    dataset = dataset.unbatch().batch(N)\n","    for images, labels in dataset:\n","        numpy_images = images.numpy()\n","        numpy_labels = labels.numpy()\n","        break;  \n","    return numpy_images, numpy_labels\n","\n","def title_from_label_and_target(label, correct_label):\n","    label = np.argmax(label, axis=-1)\n","    correct = (label == correct_label)\n","    return \"{} [{}{}{}]\".format(label, str(correct), ', shoud be ' if not correct else '',\n","                                correct_label if not correct else ''), correct\n","\n","def display_one_flower_eval(image, title, subplot, red=False):\n","    plt.subplot(subplot)\n","    plt.axis('off')\n","    plt.imshow(image)\n","    plt.title(title, fontsize=14, color='red' if red else 'black')\n","    return subplot+1\n","\n","def display_9_images_with_predictions(images, predictions, labels):\n","    subplot=331\n","    plt.figure(figsize=(13,13))\n","    for i, image in enumerate(images):\n","        title, correct = title_from_label_and_target(predictions[i], labels[i])\n","        subplot = display_one_flower_eval(image, title, subplot, not correct)\n","        if i >= 8:\n","            break;\n","              \n","    plt.tight_layout()\n","    plt.subplots_adjust(wspace=0.1, hspace=0.1)\n","    plt.show()\n","\n","\n","# Model evaluation\n","def plot_metrics(history):\n","    fig, axes = plt.subplots(2, 1, sharex='col', figsize=(20, 8))\n","    axes = axes.flatten()\n","    \n","    axes[0].plot(history['loss'], label='Train loss')\n","    axes[0].plot(history['val_loss'], label='Validation loss')\n","    axes[0].legend(loc='best', fontsize=16)\n","    axes[0].set_title('Loss')\n","    axes[0].axvline(np.argmin(history['loss']), linestyle='dashed')\n","    axes[0].axvline(np.argmin(history['val_loss']), linestyle='dashed', color='orange')\n","    \n","    axes[1].plot(history['accuracy'], label='Train accuracy')\n","    axes[1].plot(history['val_accuracy'], label='Validation accuracy')\n","    axes[1].legend(loc='best', fontsize=16)\n","    axes[1].set_title('Accuracy')\n","    axes[1].axvline(np.argmax(history['accuracy']), linestyle='dashed')\n","    axes[1].axvline(np.argmax(history['val_accuracy']), linestyle='dashed', color='orange')\n","\n","    plt.xlabel('Epochs', fontsize=16)\n","    sns.despine()\n","    plt.show()"],"execution_count":23,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oCtCB3WdCaO2","papermill":{"duration":0.033127,"end_time":"2021-01-20T22:57:36.597612","exception":false,"start_time":"2021-01-20T22:57:36.564485","status":"completed"},"tags":[]},"source":["# Training data samples (with augmentation)"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:36.667226Z","iopub.status.busy":"2021-01-20T22:57:36.666549Z","iopub.status.idle":"2021-01-20T22:57:52.204000Z","shell.execute_reply":"2021-01-20T22:57:52.204539Z"},"id":"p8IMzXLRCaO2","papermill":{"duration":15.574028,"end_time":"2021-01-20T22:57:52.204708","exception":false,"start_time":"2021-01-20T22:57:36.630680","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1flA4R9G3EkWvq7-mt_GzUA8esOEr1aoR"},"executionInfo":{"status":"ok","timestamp":1613451192419,"user_tz":-540,"elapsed":69501,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"dd1dd8d4-27c8-4a43-d9fd-b63f70052c96"},"source":["train_dataset = get_dataset(FILENAMES_COMP, ordered=True, augment=True)\n","train_iter = iter(train_dataset.unbatch().batch(20))\n","\n","display_batch_of_images(next(train_iter))\n","display_batch_of_images(next(train_iter))"],"execution_count":24,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"gfrU-uCiCaO3","papermill":{"duration":0.115332,"end_time":"2021-01-20T22:57:52.436099","exception":false,"start_time":"2021-01-20T22:57:52.320767","status":"completed"},"tags":[]},"source":["## Datasets distribution\n","\n","### Competition data"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:52.660179Z","iopub.status.busy":"2021-01-20T22:57:52.659360Z","iopub.status.idle":"2021-01-20T22:59:14.164307Z","shell.execute_reply":"2021-01-20T22:59:14.165290Z"},"id":"WJywiXKHCaO4","papermill":{"duration":81.617644,"end_time":"2021-01-20T22:59:14.165495","exception":false,"start_time":"2021-01-20T22:57:52.547851","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":502},"executionInfo":{"status":"ok","timestamp":1613451277536,"user_tz":-540,"elapsed":154613,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"d1a46ce4-c9ff-4bb6-8989-a21445e6f11b"},"source":["ds_comp = get_dataset(FILENAMES_COMP)\n","labels_comp = [target.numpy() for img, target in iter(ds_comp.unbatch())]\n","labels_comp = np.argmax(labels_comp, axis=-1)\n","\n","fig, ax = plt.subplots(1, 1, figsize=(18, 8))\n","ax = sns.countplot(y=labels_comp, palette='viridis')\n","ax.tick_params(labelsize=16)\n","\n","plt.show()"],"execution_count":25,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1296x576 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"H03votk7CaO4","papermill":{"duration":0.11035,"end_time":"2021-01-20T22:59:14.384953","exception":false,"start_time":"2021-01-20T22:59:14.274603","status":"completed"},"tags":[]},"source":["### 2019 competition data"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:59:14.619739Z","iopub.status.busy":"2021-01-20T22:59:14.618979Z","iopub.status.idle":"2021-01-20T22:59:36.253576Z","shell.execute_reply":"2021-01-20T22:59:36.252814Z"},"id":"SfD2fI73CaO4","papermill":{"duration":21.757163,"end_time":"2021-01-20T22:59:36.253707","exception":false,"start_time":"2021-01-20T22:59:14.496544","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":502},"executionInfo":{"status":"ok","timestamp":1613451299811,"user_tz":-540,"elapsed":176884,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"9b870f3c-8d4d-48b7-9759-cdc6d061be49"},"source":["ds_2019 = get_dataset(FILENAMES_2019)\n","labels_2019 = [target.numpy() for img, target in iter(ds_2019.unbatch())]\n","labels_2019 = np.argmax(labels_2019, axis=-1)\n","\n","fig, ax = plt.subplots(1, 1, figsize=(18, 8))\n","ax = sns.countplot(y=labels_2019, palette='viridis')\n","ax.tick_params(labelsize=16)\n","\n","plt.show()"],"execution_count":26,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1296x576 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"ZXY3rsY4CaO4","papermill":{"duration":0.112402,"end_time":"2021-01-20T22:59:36.476696","exception":false,"start_time":"2021-01-20T22:59:36.364294","status":"completed"},"tags":[]},"source":["### Dataset oversampled"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:59:36.715120Z","iopub.status.busy":"2021-01-20T22:59:36.714385Z","iopub.status.idle":"2021-01-20T23:02:43.355083Z","shell.execute_reply":"2021-01-20T23:02:43.355614Z"},"id":"PRXTNO7RCaO5","papermill":{"duration":186.766033,"end_time":"2021-01-20T23:02:43.355778","exception":false,"start_time":"2021-01-20T22:59:36.589745","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":502},"executionInfo":{"status":"ok","timestamp":1613451512888,"user_tz":-540,"elapsed":389955,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"49c35921-9448-49d8-bed1-0367f6acecb4"},"source":["FILENAMES_COMP_OVER = (FILENAMES_COMP + \n","                       FILENAMES_2019 + \n","                       (2 * FILENAMES_COMP_CBB) + \n","                       (2 * FILENAMES_2019_CBB) + \n","                       (2 * FILENAMES_COMP_CBSD) + \n","                       (2 * FILENAMES_2019_CBSD) + \n","                       (2 * FILENAMES_COMP_CGM) + \n","                       (2 * FILENAMES_2019_CGM) + \n","                       (2 * FILENAMES_COMP_Healthy) + \n","                       (2 * FILENAMES_2019_Healthy))\n","\n","ds_comp = get_dataset(FILENAMES_COMP_OVER)\n","labels_comp = [target.numpy() for img, target in iter(ds_comp.unbatch())]\n","labels_comp = np.argmax(labels_comp, axis=-1)\n","\n","fig, ax = plt.subplots(1, 1, figsize=(18, 8))\n","ax = sns.countplot(y=labels_comp, palette='viridis')\n","ax.tick_params(labelsize=16)\n","\n","plt.show()"],"execution_count":27,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1296x576 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"HvXRzhofCaO5","papermill":{"duration":0.112509,"end_time":"2021-01-20T23:02:43.580615","exception":false,"start_time":"2021-01-20T23:02:43.468106","status":"completed"},"tags":[]},"source":["### Learning rate schedule\n","\n","We are going to use a `cosine learning rate schedule with a warm-up phase`, this may be a good idea since we are using a pre-trained model, the warm-up phase will be useful to avoid the pre-trained weights degradation resulting in catastrophic forgetting, during the schedule the learning rate will slowly decrease to very low values, this helps the model to land on more stable weights."]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:02:43.808753Z","iopub.status.busy":"2021-01-20T23:02:43.807680Z","iopub.status.idle":"2021-01-20T23:02:47.940826Z","shell.execute_reply":"2021-01-20T23:02:47.939748Z"},"id":"I9cuJCl1CaO5","papermill":{"duration":4.248898,"end_time":"2021-01-20T23:02:47.940988","exception":false,"start_time":"2021-01-20T23:02:43.692090","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":422},"executionInfo":{"status":"ok","timestamp":1613451595676,"user_tz":-540,"elapsed":472738,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"1a6e5d1d-efa4-4d0b-8260-6d2bf86e7b55"},"source":["lr_start = 1e-8\n","lr_min = 1e-8\n","lr_max = LEARNING_RATE\n","num_cycles = 1.\n","warmup_epochs = 1\n","hold_max_epochs = 0\n","total_epochs = EPOCHS\n","warmup_steps = warmup_epochs * (NUM_TRAINING_IMAGES//BATCH_SIZE)\n","total_steps = total_epochs * (NUM_TRAINING_IMAGES//BATCH_SIZE)\n","\n","@tf.function\n","def lrfn(step):\n","    if step < warmup_steps:\n","        lr = (lr_max - lr_start) / warmup_steps * step + lr_start\n","    else:\n","        progress = (step - warmup_steps) / (total_steps - warmup_steps)\n","        lr = lr_max * (0.5 * (1.0 + tf.math.cos(np.pi * ((num_cycles * progress) % 1.0))))\n","        if lr_min is not None:\n","            lr = tf.math.maximum(lr_min, float(lr))\n","\n","    return lr\n","\n","\n","# rng = [i for i in range(total_epochs)]\n","rng = [i for i in range(total_steps)]\n","y = [lrfn(tf.cast(x, tf.float32)) for x in rng]\n","\n","sns.set(style='whitegrid')\n","fig, ax = plt.subplots(figsize=(20, 6))\n","plt.plot(rng, y)\n","\n","print(f'{total_steps} total steps and {NUM_TRAINING_IMAGES//BATCH_SIZE} steps per epoch')\n","print(f'Learning rate schedule: {y[0]:.3g} to {max(y):.3g} to {y[-1]:.3g}')"],"execution_count":28,"outputs":[{"output_type":"stream","text":["15020 total steps and 751 steps per epoch\n","Learning rate schedule: 1e-08 to 8e-05 to 1e-08\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 1440x432 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"OMIrA5jxCaO5","papermill":{"duration":0.112158,"end_time":"2021-01-20T23:02:48.166235","exception":false,"start_time":"2021-01-20T23:02:48.054077","status":"completed"},"tags":[]},"source":["# Model"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:02:48.402810Z","iopub.status.busy":"2021-01-20T23:02:48.402111Z","iopub.status.idle":"2021-01-20T23:02:48.406439Z","shell.execute_reply":"2021-01-20T23:02:48.405740Z"},"id":"pRksD6K6CaO5","papermill":{"duration":0.126526,"end_time":"2021-01-20T23:02:48.406566","exception":false,"start_time":"2021-01-20T23:02:48.280040","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1613451595861,"user_tz":-540,"elapsed":472917,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["def model_fn(input_shape, N_CLASSES):\n","    inputs = L.Input(shape=input_shape, name='input_image')\n","    base_model = efn.EfficientNetB7(input_tensor=inputs, \n","                                    include_top=False, \n","                                    weights='imagenet', \n","                                    pooling='avg')\n","    base_model.trainable = False\n","    x = L.Dropout(.5)(base_model.output)\n","    output = L.Dense(N_CLASSES, activation='softmax', name='output')(x)\n","    model = Model(inputs=inputs, outputs=output)\n","\n","    return model"],"execution_count":29,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:02:48.640007Z","iopub.status.busy":"2021-01-20T23:02:48.638735Z","iopub.status.idle":"2021-01-20T23:02:48.642985Z","shell.execute_reply":"2021-01-20T23:02:48.643690Z"},"id":"4zl0qy-pcR-A","papermill":{"duration":0.122772,"end_time":"2021-01-20T23:02:48.643846","exception":false,"start_time":"2021-01-20T23:02:48.521074","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1613451595862,"user_tz":-540,"elapsed":472913,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["#help(strategy)"],"execution_count":30,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hMc0tk0VCaO5","papermill":{"duration":0.114465,"end_time":"2021-01-20T23:02:48.871581","exception":false,"start_time":"2021-01-20T23:02:48.757116","status":"completed"},"tags":[]},"source":["# Training"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:02:49.104256Z","iopub.status.busy":"2021-01-20T23:02:49.103030Z","iopub.status.idle":"2021-01-20T23:41:32.330134Z","shell.execute_reply":"2021-01-20T23:41:32.329366Z"},"id":"8HrFGFRNCaO5","papermill":{"duration":2323.344808,"end_time":"2021-01-20T23:41:32.330270","exception":false,"start_time":"2021-01-20T23:02:48.985462","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613480864312,"user_tz":-540,"elapsed":27718470,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"9d5d2991-3a22-4528-cd86-4ea97d1f15e9"},"source":["skf = KFold(n_splits=N_FOLDS, shuffle=True, random_state=seed)\n","oof_pred = []; oof_labels = []; history_list = []\n","\n","for fold,(idxT, idxV) in enumerate(skf.split(np.arange(50))):\n","    if fold >= FOLDS_USED:\n","        break\n","    if tpu: tf.tpu.experimental.initialize_tpu_system(tpu)\n","    K.clear_session()\n","    print(f'\\nFOLD: {fold+1}')\n","    print(f'TRAIN: {idxT} VALID: {idxV}')\n","\n","    # Create train and validation sets\n","    FILENAMES_COMP = tf.io.gfile.glob([GCS_PATH + '/Id_train%.2i*.tfrec' % x for x in idxT])\n","    FILENAMES_2019 = tf.io.gfile.glob([GCS_PATH_EXT + '/Id_train%.2i*.tfrec' % x for x in idxT])\n","\n","    FILENAMES_COMP_CBB = tf.io.gfile.glob([GCS_PATH_CLASSES + '/CBB%.2i*.tfrec' % x for x in idxT])\n","    FILENAMES_COMP_CBSD = tf.io.gfile.glob([GCS_PATH_CLASSES + '/CBSD%.2i*.tfrec' % x for x in idxT])\n","    FILENAMES_COMP_CGM = tf.io.gfile.glob([GCS_PATH_CLASSES + '/CGM%.2i*.tfrec' % x for x in idxT])\n","    FILENAMES_COMP_Healthy = tf.io.gfile.glob([GCS_PATH_CLASSES + '/Healthy%.2i*.tfrec' % x for x in idxT])\n","    \n","    FILENAMES_2019_CBB = tf.io.gfile.glob([GCS_PATH_EXT_CLASSES + '/CBB%.2i*.tfrec' % x for x in idxT])\n","    FILENAMES_2019_CBSD = tf.io.gfile.glob([GCS_PATH_EXT_CLASSES + '/CBSD%.2i*.tfrec' % x for x in idxT])\n","    FILENAMES_2019_CGM = tf.io.gfile.glob([GCS_PATH_EXT_CLASSES + '/CGM%.2i*.tfrec' % x for x in idxT])\n","    FILENAMES_2019_Healthy = tf.io.gfile.glob([GCS_PATH_EXT_CLASSES + '/Healthy%.2i*.tfrec' % x for x in idxT])\n","\n","    TRAIN_FILENAMES = (FILENAMES_COMP + \n","                       FILENAMES_2019 + \n","                       (2 * FILENAMES_COMP_CBB) + \n","                       (2 * FILENAMES_2019_CBB) + \n","                       (2 * FILENAMES_COMP_CBSD) + \n","                       (2 * FILENAMES_2019_CBSD) + \n","                       (2 * FILENAMES_COMP_CGM) + \n","                       (2 * FILENAMES_2019_CGM) + \n","                       (2 * FILENAMES_COMP_Healthy) + \n","                       (2 * FILENAMES_2019_Healthy))\n","    \n","    VALID_FILENAMES = tf.io.gfile.glob([GCS_PATH + '/Id_train%.2i*.tfrec' % x for x in idxV])\n","    np.random.shuffle(TRAIN_FILENAMES)\n","    \n","    ct_train = count_data_items(TRAIN_FILENAMES)\n","    ct_valid = count_data_items(VALID_FILENAMES)\n","    \n","    step_size = (ct_train // BATCH_SIZE)\n","    valid_step_size = (ct_valid // BATCH_SIZE)\n","    total_steps=(total_epochs * step_size)\n","    warmup_steps=(warmup_epochs * step_size)\n","    \n","    \n","    # Build TF datasets\n","    train_ds = strategy.experimental_distribute_dataset(get_dataset(TRAIN_FILENAMES, repeated=True, augment=True))\n","    valid_ds = strategy.experimental_distribute_dataset(get_dataset(VALID_FILENAMES, ordered=True, repeated=True, cached=True))\n","    train_data_iter = iter(train_ds)\n","    valid_data_iter = iter(valid_ds)\n","    \n","    \n","    # Step functions\n","    @tf.function\n","    def train_step(data_iter):\n","        def train_step_fn(x, y):\n","            with tf.GradientTape() as tape:\n","                probabilities = model(x, training=True)\n","                loss = loss_fn(y, probabilities, label_smoothing=.3)\n","            gradients = tape.gradient(loss, model.trainable_variables)\n","            optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n","            # update metrics\n","            train_accuracy.update_state(y, probabilities)\n","            train_loss.update_state(loss)\n","        for _ in tf.range(step_size):\n","            if COLAB:\n","                #print(COLAB)\n","                strategy.experimental_run_v2(train_step_fn, next(data_iter))\n","            else:\n","                strategy.experimental_run_v2(train_step_fn, next(data_iter))\n","\n","    @tf.function\n","    def valid_step(data_iter):\n","        def valid_step_fn(x, y):\n","            probabilities = model(x, training=False)\n","            loss = loss_fn(y, probabilities)\n","            # update metrics\n","            valid_accuracy.update_state(y, probabilities)\n","            valid_loss.update_state(loss)\n","        for _ in tf.range(valid_step_size):\n","            if COLAB:\n","                strategy.experimental_run_v2(valid_step_fn, next(data_iter))\n","            else:\n","                strategy.experimental_run_v2(valid_step_fn, next(data_iter))\n","    \n","    \n","    # Model\n","    model_path = models_path+f'model_{fold}.h5'\n","    with strategy.scope():\n","        model = model_fn((None, None, CHANNELS), N_CLASSES)\n","        unfreeze_model(model) # unfreeze all layers except \"batch normalization\"\n","        \n","        optimizer = optimizers.Adam(learning_rate=lambda: lrfn(tf.cast(optimizer.iterations, tf.float32)))\n","        loss_fn = losses.categorical_crossentropy\n","\n","        train_accuracy = metrics.CategoricalAccuracy()\n","        valid_accuracy = metrics.CategoricalAccuracy()\n","        train_loss = metrics.Sum()\n","        valid_loss = metrics.Sum()\n","    \n","    \n","    # Setup training loop\n","    step = 0\n","    epoch_steps = 0\n","    patience_cnt = 0\n","    best_val = 0\n","    history = {'loss': [], 'val_loss': [], 'accuracy': [], 'val_accuracy': []}\n","\n","    ### Train model\n","    for epoch in range(EPOCHS):\n","        epoch_start_time = time.time()\n","\n","        # Run training step\n","        train_step(train_data_iter)\n","        epoch_steps += step_size\n","        step += step_size\n","            \n","\n","        # Validation run at the end of each epoch\n","        if (step // step_size) > epoch:\n","            # Validation run\n","            valid_epoch_steps = 0\n","            valid_step(valid_data_iter)\n","            valid_epoch_steps += valid_step_size\n","\n","            # Compute metrics\n","            history['accuracy'].append(train_accuracy.result().numpy())\n","            history['loss'].append(train_loss.result().numpy() / (BATCH_SIZE * epoch_steps))\n","            history['val_accuracy'].append(valid_accuracy.result().numpy())\n","            history['val_loss'].append(valid_loss.result().numpy() / (BATCH_SIZE * valid_epoch_steps))\n","\n","            # Report metrics\n","            epoch_time = time.time() - epoch_start_time\n","            print(f'\\nEPOCH {epoch+1}/{EPOCHS}')\n","            print(f'time: {epoch_time:0.1f}s',\n","                  f\"loss: {history['loss'][-1]:0.4f}\",\n","                  f\"accuracy: {history['accuracy'][-1]:0.4f}\",\n","                  f\"val_loss: {history['val_loss'][-1]:0.4f}\",\n","                  f\"val_accuracy: {history['val_accuracy'][-1]:0.4f}\",\n","                  f'lr: {lrfn(tf.cast(optimizer.iterations, tf.int32).numpy()):0.4g}')\n","\n","            # Early stopping monitor\n","            if history['val_accuracy'][-1] >= best_val:\n","                best_val = history['val_accuracy'][-1]\n","                model.save_weights(model_path)\n","                print(f'Saved model weights at \"{model_path}\"')\n","                patience_cnt = 1\n","            else:\n","                patience_cnt += 1\n","            # if patience_cnt > ES_PATIENCE:\n","            #     print(f'Epoch {epoch:05d}: early stopping')\n","            #     break\n","\n","                \n","            # Set up next epoch\n","            epoch = step // step_size\n","            epoch_steps = 0\n","            train_accuracy.reset_states()\n","            train_loss.reset_states()\n","            valid_accuracy.reset_states()\n","            valid_loss.reset_states()\n","    \n","    \n","    ### RESULTS\n","    print(f\"#### FOLD {fold+1} OOF Accuracy = {np.max(history['val_accuracy']):.3f}\")\n","    \n","    history_list.append(history)\n","    # Load best model weights\n","    model.load_weights(model_path)\n","\n","    # OOF predictions\n","    ds_valid = get_dataset(VALID_FILENAMES, ordered=True)\n","    oof_labels.append([target.numpy() for img, target in iter(ds_valid.unbatch())])\n","    x_oof = ds_valid.map(lambda image, target: image)\n","    oof_pred.append(np.argmax(model.predict(x_oof), axis=-1))"],"execution_count":32,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.53.42.130:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.53.42.130:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.53.42.130:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.53.42.130:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","FOLD: 1\n","TRAIN: [ 0  1  2 ... 45 46 47] VALID: [16 20 26 30 31 35 41 43 48 49]\n","Downloading data from https://github.com/Callidior/keras-applications/releases/download/efficientnet/efficientnet-b7_weights_tf_dim_ordering_tf_kernels_autoaugment_notop.h5\n","258441216/258434480 [==============================] - 4s 0us/step\n","WARNING:tensorflow:From <ipython-input-32-d506d5d257e7>:71: StrategyBase.experimental_run_v2 (from tensorflow.python.distribute.distribute_lib) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","renamed to `run`\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:From <ipython-input-32-d506d5d257e7>:71: StrategyBase.experimental_run_v2 (from tensorflow.python.distribute.distribute_lib) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","renamed to `run`\n"],"name":"stderr"},{"output_type":"stream","text":["\n","EPOCH 1/20\n","time: 467.5s loss: 1.3310 accuracy: 0.6030 val_loss: 0.5713 val_accuracy: 0.8724 lr: 8e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 2/20\n","time: 242.5s loss: 1.1145 accuracy: 0.8167 val_loss: 0.5925 val_accuracy: 0.8833 lr: 7.945e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 3/20\n","time: 242.6s loss: 1.0876 accuracy: 0.8385 val_loss: 0.5413 val_accuracy: 0.8885 lr: 7.783e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 4/20\n","WARNING:tensorflow:5 out of the last 389 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:5 out of the last 389 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 242.3s loss: 1.0700 accuracy: 0.8519 val_loss: 0.5480 val_accuracy: 0.8932 lr: 7.518e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 5/20\n","WARNING:tensorflow:6 out of the last 390 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:6 out of the last 390 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 242.4s loss: 1.0562 accuracy: 0.8635 val_loss: 0.5550 val_accuracy: 0.8925 lr: 7.157e-05\n","\n","EPOCH 6/20\n","WARNING:tensorflow:7 out of the last 391 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:7 out of the last 391 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 242.6s loss: 1.0434 accuracy: 0.8747 val_loss: 0.5631 val_accuracy: 0.8906 lr: 6.709e-05\n","\n","EPOCH 7/20\n","WARNING:tensorflow:8 out of the last 392 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:8 out of the last 392 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 242.5s loss: 1.0349 accuracy: 0.8809 val_loss: 0.5398 val_accuracy: 0.8913 lr: 6.188e-05\n","\n","EPOCH 8/20\n","WARNING:tensorflow:9 out of the last 393 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:9 out of the last 393 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 242.4s loss: 1.0210 accuracy: 0.8939 val_loss: 0.5568 val_accuracy: 0.8939 lr: 5.607e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 9/20\n","WARNING:tensorflow:10 out of the last 394 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:10 out of the last 394 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 242.8s loss: 1.0097 accuracy: 0.9030 val_loss: 0.5297 val_accuracy: 0.8928 lr: 4.982e-05\n","\n","EPOCH 10/20\n","WARNING:tensorflow:11 out of the last 395 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 395 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 242.6s loss: 1.0003 accuracy: 0.9112 val_loss: 0.5522 val_accuracy: 0.8916 lr: 4.33e-05\n","\n","EPOCH 11/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 242.9s loss: 0.9913 accuracy: 0.9192 val_loss: 0.5571 val_accuracy: 0.8904 lr: 3.67e-05\n","\n","EPOCH 12/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 242.8s loss: 0.9809 accuracy: 0.9299 val_loss: 0.5356 val_accuracy: 0.8902 lr: 3.018e-05\n","\n","EPOCH 13/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 242.8s loss: 0.9734 accuracy: 0.9361 val_loss: 0.5405 val_accuracy: 0.8904 lr: 2.393e-05\n","\n","EPOCH 14/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 242.2s loss: 0.9685 accuracy: 0.9396 val_loss: 0.5425 val_accuracy: 0.8942 lr: 1.812e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 15/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 243.1s loss: 0.9613 accuracy: 0.9453 val_loss: 0.5415 val_accuracy: 0.8935 lr: 1.291e-05\n","\n","EPOCH 16/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 242.7s loss: 0.9574 accuracy: 0.9494 val_loss: 0.5425 val_accuracy: 0.8913 lr: 8.434e-06\n","\n","EPOCH 17/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 242.6s loss: 0.9559 accuracy: 0.9502 val_loss: 0.5362 val_accuracy: 0.8928 lr: 4.821e-06\n","\n","EPOCH 18/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 242.7s loss: 0.9537 accuracy: 0.9515 val_loss: 0.5397 val_accuracy: 0.8937 lr: 2.167e-06\n","\n","EPOCH 19/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 243.0s loss: 0.9523 accuracy: 0.9536 val_loss: 0.5401 val_accuracy: 0.8906 lr: 5.455e-07\n","\n","EPOCH 20/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 242.6s loss: 0.9521 accuracy: 0.9542 val_loss: 0.5448 val_accuracy: 0.8902 lr: 8e-05\n","#### FOLD 1 OOF Accuracy = 0.894\n","WARNING:tensorflow:TPU system grpc://10.53.42.130:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.53.42.130:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.53.42.130:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.53.42.130:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","FOLD: 2\n","TRAIN: [ 0  1  2 ... 47 48 49] VALID: [ 7 12 15 23 25 28 29 33 37 45]\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","EPOCH 1/20\n","time: 479.7s loss: 1.3217 accuracy: 0.6097 val_loss: 0.5771 val_accuracy: 0.8729 lr: 8e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 2/20\n","time: 258.4s loss: 1.1159 accuracy: 0.8164 val_loss: 0.5631 val_accuracy: 0.8937 lr: 7.945e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 3/20\n","time: 245.9s loss: 1.0829 accuracy: 0.8442 val_loss: 0.5342 val_accuracy: 0.8916 lr: 7.783e-05\n","\n","EPOCH 4/20\n","WARNING:tensorflow:5 out of the last 389 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:5 out of the last 389 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 245.3s loss: 1.0697 accuracy: 0.8529 val_loss: 0.5512 val_accuracy: 0.8965 lr: 7.518e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 5/20\n","WARNING:tensorflow:6 out of the last 390 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:6 out of the last 390 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 245.8s loss: 1.0542 accuracy: 0.8656 val_loss: 0.5459 val_accuracy: 0.8911 lr: 7.157e-05\n","\n","EPOCH 6/20\n","WARNING:tensorflow:7 out of the last 391 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:7 out of the last 391 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 245.9s loss: 1.0434 accuracy: 0.8742 val_loss: 0.5416 val_accuracy: 0.8977 lr: 6.709e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 7/20\n","WARNING:tensorflow:8 out of the last 392 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:8 out of the last 392 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 245.7s loss: 1.0322 accuracy: 0.8838 val_loss: 0.5569 val_accuracy: 0.8930 lr: 6.188e-05\n","\n","EPOCH 8/20\n","WARNING:tensorflow:9 out of the last 393 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:9 out of the last 393 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 245.7s loss: 1.0197 accuracy: 0.8954 val_loss: 0.5244 val_accuracy: 0.8944 lr: 5.607e-05\n","\n","EPOCH 9/20\n","WARNING:tensorflow:10 out of the last 394 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:10 out of the last 394 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 246.0s loss: 1.0088 accuracy: 0.9033 val_loss: 0.5261 val_accuracy: 0.8937 lr: 4.982e-05\n","\n","EPOCH 10/20\n","WARNING:tensorflow:11 out of the last 395 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 395 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 245.7s loss: 0.9991 accuracy: 0.9125 val_loss: 0.5411 val_accuracy: 0.8937 lr: 4.33e-05\n","\n","EPOCH 11/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 246.0s loss: 0.9904 accuracy: 0.9208 val_loss: 0.5281 val_accuracy: 0.8925 lr: 3.67e-05\n","\n","EPOCH 12/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 245.8s loss: 0.9815 accuracy: 0.9272 val_loss: 0.5467 val_accuracy: 0.8937 lr: 3.018e-05\n","\n","EPOCH 13/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 245.8s loss: 0.9732 accuracy: 0.9352 val_loss: 0.5280 val_accuracy: 0.8913 lr: 2.393e-05\n","\n","EPOCH 14/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 245.8s loss: 0.9677 accuracy: 0.9396 val_loss: 0.5416 val_accuracy: 0.8894 lr: 1.812e-05\n","\n","EPOCH 15/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 245.8s loss: 0.9615 accuracy: 0.9448 val_loss: 0.5341 val_accuracy: 0.8928 lr: 1.291e-05\n","\n","EPOCH 16/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 245.8s loss: 0.9569 accuracy: 0.9493 val_loss: 0.5382 val_accuracy: 0.8902 lr: 8.434e-06\n","\n","EPOCH 17/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 245.9s loss: 0.9550 accuracy: 0.9507 val_loss: 0.5446 val_accuracy: 0.8902 lr: 4.821e-06\n","\n","EPOCH 18/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 245.7s loss: 0.9529 accuracy: 0.9530 val_loss: 0.5361 val_accuracy: 0.8928 lr: 2.167e-06\n","\n","EPOCH 19/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 245.6s loss: 0.9510 accuracy: 0.9532 val_loss: 0.5394 val_accuracy: 0.8892 lr: 5.455e-07\n","\n","EPOCH 20/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 245.6s loss: 0.9509 accuracy: 0.9540 val_loss: 0.5451 val_accuracy: 0.8878 lr: 8e-05\n","#### FOLD 2 OOF Accuracy = 0.898\n","WARNING:tensorflow:TPU system grpc://10.53.42.130:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.53.42.130:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.53.42.130:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.53.42.130:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","FOLD: 3\n","TRAIN: [ 1  2  3 ... 47 48 49] VALID: [ 0  6 13 18 22 27 32 38 39 44]\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","EPOCH 1/20\n","time: 482.2s loss: 1.3172 accuracy: 0.6141 val_loss: 0.6157 val_accuracy: 0.8535 lr: 8e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 2/20\n","time: 249.1s loss: 1.1153 accuracy: 0.8150 val_loss: 0.5819 val_accuracy: 0.8812 lr: 7.945e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 3/20\n","time: 249.3s loss: 1.0818 accuracy: 0.8413 val_loss: 0.5556 val_accuracy: 0.8890 lr: 7.783e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 4/20\n","WARNING:tensorflow:5 out of the last 389 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:5 out of the last 389 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 249.0s loss: 1.0689 accuracy: 0.8537 val_loss: 0.5426 val_accuracy: 0.8916 lr: 7.518e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 5/20\n","WARNING:tensorflow:6 out of the last 390 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:6 out of the last 390 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 249.0s loss: 1.0543 accuracy: 0.8671 val_loss: 0.5383 val_accuracy: 0.8977 lr: 7.157e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 6/20\n","WARNING:tensorflow:7 out of the last 391 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:7 out of the last 391 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 248.8s loss: 1.0420 accuracy: 0.8752 val_loss: 0.5499 val_accuracy: 0.8913 lr: 6.709e-05\n","\n","EPOCH 7/20\n","WARNING:tensorflow:8 out of the last 392 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:8 out of the last 392 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 248.8s loss: 1.0310 accuracy: 0.8848 val_loss: 0.5480 val_accuracy: 0.8857 lr: 6.188e-05\n","\n","EPOCH 8/20\n","WARNING:tensorflow:9 out of the last 393 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:9 out of the last 393 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 249.0s loss: 1.0170 accuracy: 0.8974 val_loss: 0.5455 val_accuracy: 0.8897 lr: 5.607e-05\n","\n","EPOCH 9/20\n","WARNING:tensorflow:10 out of the last 394 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:10 out of the last 394 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 249.0s loss: 1.0068 accuracy: 0.9064 val_loss: 0.5233 val_accuracy: 0.8909 lr: 4.982e-05\n","\n","EPOCH 10/20\n","WARNING:tensorflow:11 out of the last 395 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 395 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 248.9s loss: 0.9970 accuracy: 0.9136 val_loss: 0.5207 val_accuracy: 0.8918 lr: 4.33e-05\n","\n","EPOCH 11/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 248.8s loss: 0.9874 accuracy: 0.9240 val_loss: 0.5510 val_accuracy: 0.8916 lr: 3.67e-05\n","\n","EPOCH 12/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 248.8s loss: 0.9790 accuracy: 0.9317 val_loss: 0.5360 val_accuracy: 0.8925 lr: 3.018e-05\n","\n","EPOCH 13/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 248.9s loss: 0.9717 accuracy: 0.9365 val_loss: 0.5365 val_accuracy: 0.8899 lr: 2.393e-05\n","\n","EPOCH 14/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 249.2s loss: 0.9638 accuracy: 0.9435 val_loss: 0.5357 val_accuracy: 0.8911 lr: 1.812e-05\n","\n","EPOCH 15/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 248.9s loss: 0.9585 accuracy: 0.9479 val_loss: 0.5432 val_accuracy: 0.8897 lr: 1.291e-05\n","\n","EPOCH 16/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 249.5s loss: 0.9548 accuracy: 0.9508 val_loss: 0.5453 val_accuracy: 0.8904 lr: 8.434e-06\n","\n","EPOCH 17/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 249.1s loss: 0.9514 accuracy: 0.9535 val_loss: 0.5419 val_accuracy: 0.8904 lr: 4.821e-06\n","\n","EPOCH 18/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 248.6s loss: 0.9506 accuracy: 0.9544 val_loss: 0.5380 val_accuracy: 0.8899 lr: 2.167e-06\n","\n","EPOCH 19/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 249.8s loss: 0.9502 accuracy: 0.9549 val_loss: 0.5392 val_accuracy: 0.8904 lr: 5.455e-07\n","\n","EPOCH 20/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 249.0s loss: 0.9493 accuracy: 0.9550 val_loss: 0.5478 val_accuracy: 0.8875 lr: 8e-05\n","#### FOLD 3 OOF Accuracy = 0.898\n","WARNING:tensorflow:TPU system grpc://10.53.42.130:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.53.42.130:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.53.42.130:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.53.42.130:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","FOLD: 4\n","TRAIN: [ 0  2  5 ... 47 48 49] VALID: [ 1  3  4  9 10 11 14 21 36 40]\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","EPOCH 1/20\n","time: 487.8s loss: 1.3227 accuracy: 0.6110 val_loss: 0.5768 val_accuracy: 0.8726 lr: 8e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_3.h5\"\n","\n","EPOCH 2/20\n","time: 255.4s loss: 1.1182 accuracy: 0.8154 val_loss: 0.5454 val_accuracy: 0.8904 lr: 7.945e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_3.h5\"\n","\n","EPOCH 3/20\n","time: 254.7s loss: 1.0865 accuracy: 0.8387 val_loss: 0.5442 val_accuracy: 0.8906 lr: 7.783e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_3.h5\"\n","\n","EPOCH 4/20\n","WARNING:tensorflow:5 out of the last 389 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:5 out of the last 389 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 255.1s loss: 1.0704 accuracy: 0.8530 val_loss: 0.5174 val_accuracy: 0.8930 lr: 7.518e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_3.h5\"\n","\n","EPOCH 5/20\n","WARNING:tensorflow:6 out of the last 390 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:6 out of the last 390 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 255.0s loss: 1.0578 accuracy: 0.8616 val_loss: 0.5379 val_accuracy: 0.8968 lr: 7.157e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_3.h5\"\n","\n","EPOCH 6/20\n","WARNING:tensorflow:7 out of the last 391 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:7 out of the last 391 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 254.8s loss: 1.0461 accuracy: 0.8720 val_loss: 0.5529 val_accuracy: 0.8925 lr: 6.709e-05\n","\n","EPOCH 7/20\n","WARNING:tensorflow:8 out of the last 392 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:8 out of the last 392 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 255.3s loss: 1.0346 accuracy: 0.8814 val_loss: 0.5237 val_accuracy: 0.8918 lr: 6.188e-05\n","\n","EPOCH 8/20\n","WARNING:tensorflow:9 out of the last 393 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:9 out of the last 393 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 255.0s loss: 1.0227 accuracy: 0.8905 val_loss: 0.5147 val_accuracy: 0.8937 lr: 5.607e-05\n","\n","EPOCH 9/20\n","WARNING:tensorflow:10 out of the last 394 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:10 out of the last 394 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 255.4s loss: 1.0080 accuracy: 0.9052 val_loss: 0.5269 val_accuracy: 0.8892 lr: 4.982e-05\n","\n","EPOCH 10/20\n","WARNING:tensorflow:11 out of the last 395 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 395 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 254.9s loss: 1.0011 accuracy: 0.9097 val_loss: 0.5433 val_accuracy: 0.8944 lr: 4.33e-05\n","\n","EPOCH 11/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 255.2s loss: 0.9878 accuracy: 0.9221 val_loss: 0.5248 val_accuracy: 0.8949 lr: 3.67e-05\n","\n","EPOCH 12/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 255.0s loss: 0.9806 accuracy: 0.9283 val_loss: 0.5309 val_accuracy: 0.8968 lr: 3.018e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_3.h5\"\n","\n","EPOCH 13/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 254.9s loss: 0.9717 accuracy: 0.9357 val_loss: 0.5327 val_accuracy: 0.8930 lr: 2.393e-05\n","\n","EPOCH 14/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 255.1s loss: 0.9643 accuracy: 0.9435 val_loss: 0.5366 val_accuracy: 0.8918 lr: 1.812e-05\n","\n","EPOCH 15/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 255.0s loss: 0.9604 accuracy: 0.9457 val_loss: 0.5306 val_accuracy: 0.8935 lr: 1.291e-05\n","\n","EPOCH 16/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 255.1s loss: 0.9567 accuracy: 0.9494 val_loss: 0.5377 val_accuracy: 0.8928 lr: 8.434e-06\n","\n","EPOCH 17/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 255.0s loss: 0.9514 accuracy: 0.9538 val_loss: 0.5353 val_accuracy: 0.8958 lr: 4.821e-06\n","\n","EPOCH 18/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 255.1s loss: 0.9507 accuracy: 0.9537 val_loss: 0.5327 val_accuracy: 0.8923 lr: 2.167e-06\n","\n","EPOCH 19/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 255.0s loss: 0.9500 accuracy: 0.9549 val_loss: 0.5389 val_accuracy: 0.8918 lr: 5.455e-07\n","\n","EPOCH 20/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 255.0s loss: 0.9485 accuracy: 0.9567 val_loss: 0.5447 val_accuracy: 0.8887 lr: 8e-05\n","#### FOLD 4 OOF Accuracy = 0.897\n","WARNING:tensorflow:TPU system grpc://10.53.42.130:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.53.42.130:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.53.42.130:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.53.42.130:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","FOLD: 5\n","TRAIN: [ 0  1  3 ... 45 48 49] VALID: [ 2  5  8 17 19 24 34 42 46 47]\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","EPOCH 1/20\n","time: 487.8s loss: 1.3152 accuracy: 0.6163 val_loss: 0.5841 val_accuracy: 0.8670 lr: 8e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 2/20\n","time: 252.5s loss: 1.1156 accuracy: 0.8182 val_loss: 0.5686 val_accuracy: 0.8878 lr: 7.945e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 3/20\n","time: 252.1s loss: 1.0875 accuracy: 0.8375 val_loss: 0.5486 val_accuracy: 0.8942 lr: 7.783e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 4/20\n","WARNING:tensorflow:5 out of the last 389 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:5 out of the last 389 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 252.0s loss: 1.0695 accuracy: 0.8531 val_loss: 0.5424 val_accuracy: 0.8949 lr: 7.518e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 5/20\n","WARNING:tensorflow:6 out of the last 390 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:6 out of the last 390 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 252.3s loss: 1.0576 accuracy: 0.8608 val_loss: 0.5296 val_accuracy: 0.8954 lr: 7.157e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 6/20\n","WARNING:tensorflow:7 out of the last 391 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:7 out of the last 391 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 252.1s loss: 1.0433 accuracy: 0.8745 val_loss: 0.5311 val_accuracy: 0.8946 lr: 6.709e-05\n","\n","EPOCH 7/20\n","WARNING:tensorflow:8 out of the last 392 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:8 out of the last 392 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 252.2s loss: 1.0328 accuracy: 0.8833 val_loss: 0.5458 val_accuracy: 0.8897 lr: 6.188e-05\n","\n","EPOCH 8/20\n","WARNING:tensorflow:9 out of the last 393 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:9 out of the last 393 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 252.3s loss: 1.0210 accuracy: 0.8938 val_loss: 0.5346 val_accuracy: 0.8949 lr: 5.607e-05\n","\n","EPOCH 9/20\n","WARNING:tensorflow:10 out of the last 394 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:10 out of the last 394 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 252.2s loss: 1.0085 accuracy: 0.9042 val_loss: 0.5499 val_accuracy: 0.8930 lr: 4.982e-05\n","\n","EPOCH 10/20\n","WARNING:tensorflow:11 out of the last 395 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 395 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 252.1s loss: 0.9987 accuracy: 0.9124 val_loss: 0.5576 val_accuracy: 0.8937 lr: 4.33e-05\n","\n","EPOCH 11/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 251.8s loss: 0.9876 accuracy: 0.9233 val_loss: 0.5322 val_accuracy: 0.8906 lr: 3.67e-05\n","\n","EPOCH 12/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 252.4s loss: 0.9797 accuracy: 0.9289 val_loss: 0.5462 val_accuracy: 0.8932 lr: 3.018e-05\n","\n","EPOCH 13/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 251.9s loss: 0.9710 accuracy: 0.9364 val_loss: 0.5391 val_accuracy: 0.8949 lr: 2.393e-05\n","\n","EPOCH 14/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 252.4s loss: 0.9647 accuracy: 0.9418 val_loss: 0.5489 val_accuracy: 0.8920 lr: 1.812e-05\n","\n","EPOCH 15/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 252.0s loss: 0.9597 accuracy: 0.9472 val_loss: 0.5394 val_accuracy: 0.8899 lr: 1.291e-05\n","\n","EPOCH 16/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 251.7s loss: 0.9547 accuracy: 0.9511 val_loss: 0.5402 val_accuracy: 0.8887 lr: 8.434e-06\n","\n","EPOCH 17/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 252.0s loss: 0.9522 accuracy: 0.9526 val_loss: 0.5403 val_accuracy: 0.8890 lr: 4.821e-06\n","\n","EPOCH 18/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 252.2s loss: 0.9501 accuracy: 0.9559 val_loss: 0.5383 val_accuracy: 0.8909 lr: 2.167e-06\n","\n","EPOCH 19/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 252.3s loss: 0.9500 accuracy: 0.9548 val_loss: 0.5375 val_accuracy: 0.8890 lr: 5.455e-07\n","\n","EPOCH 20/20\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f46bc4ff730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 252.2s loss: 0.9485 accuracy: 0.9555 val_loss: 0.5460 val_accuracy: 0.8873 lr: 8e-05\n","#### FOLD 5 OOF Accuracy = 0.895\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"NQyHtXnRCaO5","papermill":{"duration":0.130935,"end_time":"2021-01-20T23:41:32.592224","exception":false,"start_time":"2021-01-20T23:41:32.461289","status":"completed"},"tags":[]},"source":["## Model loss graph"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:41:32.862698Z","iopub.status.busy":"2021-01-20T23:41:32.861475Z","iopub.status.idle":"2021-01-20T23:41:35.936240Z","shell.execute_reply":"2021-01-20T23:41:35.935506Z"},"id":"_7pUdch3CaO6","papermill":{"duration":3.212527,"end_time":"2021-01-20T23:41:35.936368","exception":false,"start_time":"2021-01-20T23:41:32.723841","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1613480871718,"user_tz":-540,"elapsed":7381,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"1ef3bc07-632d-40a4-a907-c1c420ff6a8c"},"source":["for fold, history in enumerate(history_list):\n","    print(f'\\nFOLD: {fold+1}')\n","    plot_metrics(history)"],"execution_count":33,"outputs":[{"output_type":"stream","text":["\n","FOLD: 1\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 2 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","FOLD: 2\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 2 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","FOLD: 3\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 2 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","FOLD: 4\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAABIwAAAH3CAYAAADZi8QKAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdeXxU5d3///c5s2RfgYTVBZVIJYqCUBU3pNVWQLS1demvLi1aUam4grd7VeRXl9YFvdGKWrtQXEAUl1vclyrGAiIqVnBjCxASskwy2/n+cWYmM5MBQkLmZHk9H57HzLnOdc75DDmJmXeuc41hWZYlAAAAAAAAIMJ0ugAAAAAAAAB0LgRGAAAAAAAASEBgBAAAAAAAgAQERgAAAAAAAEhAYAQAAAAAAIAEBEYAAAAAAABIQGAEAAAAAACABARGAAAAOzF27Fi99957TpcBAACQVgRGAAAAAAAASEBgBAAAsJv8fr9uu+02jRkzRmPGjNFtt90mv98vSaqqqtKFF16okSNHatSoUTrrrLMUDoclSXPmzNHRRx+tQw89VCeeeKLef/99J18GAADADrmdLgAAAKCrefDBB7V8+XItXLhQhmFoypQpmj17ti677DLNnTtXpaWlsTBo+fLlMgxDa9as0d/+9jc99dRTKi0t1ffffx8LkgAAADobRhgBAADspkWLFuniiy9Wr169VFxcrIsvvljPPfecJMntdmvz5s1av369PB6PRo4cKcMw5HK55Pf79dVXXykQCGjgwIHaa6+9HH4lAAAAqREYAQAA7KbKykr1798/tt6/f39VVlZKkn7zm99o77331vnnn68TTjhBc+bMkSTtvffeuvbaa3XffffpyCOP1LRp07Rp0yZH6gcAANgVAiMAAIDdVFJSovXr18fWN2zYoJKSEklSbm6upk+friVLlujBBx/U3LlzY7enTZgwQf/4xz/0+uuvyzAM3XnnnY7UDwAAsCsERgAAALsQCATU1NQUW04++WQ9+OCDqqqqUlVVlR544AFNmDBBkvT666/rm2++kWVZysvLk8vlis1h9P7778vv98vr9SojI0Omya9iAACgc2LSawAAgF244IILEtbPP/98DRs2TBMnTpQknXTSSZoyZYok6ZtvvtEf/vAHVVVVKT8/X2eeeaZ++MMf6vPPP9ddd92l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7lNZWdluH6+9kv8NAAAAAADAjhEYdTKnnnqqtm/frtdffz3l9pdfflk+n0+TJk1q8zmOO+44zZs3TyUlJW0+xq488cQTKQOj008/XfPmzeuw8wJAWr16nL0AAACgR5gx+x3NmP2O02WkBYFRJ3PssceqsLBQCxYsSLl9wYIF6t+/v0aPHt3mcxQXF2v48OHyer1tPkZb9e3bV8OHD0/7eQEAAAAAQOsRGHUyXq9X48eP19tvv61t27YlbFu/fr2WLl2qiRMnyjAMvfPOO5o8ebLGjBmjQw45ROPHj9ejjz6qUCi003OkuiXN5/Pppptu0ujRo3XooYfqd7/7nTZu3Nhi3xUrVmjq1Kk65phjdPDBB+vEE0/U3XffrcbGxlifsWPHat26dVq0aJHKyspUVlYWux0s1S1pdXV1uuWWWzRmzBgNGzZMJ554oh577DFZlhXr88EHH6isrExLlizRLbfcotGjR2v06NG68sortX379tb/Aye9lnPPPVeHHnqohg8frnPOOUcrVqxo0ee8887T6NGjdfDBB+uEE07QTTfdFNu+efNmXXPNNbHax4wZowsvvFBbt25tU00AAAAAAHQGTHrdCU2aNElPPvmkFi9erLPPPjvW/txzz8myrNjtaN99952OOOII/epXv1JGRoZWrlyp++67T1VVVbryyt2biPWGG27Qiy++qIsvvljl5eV69913Ux5jw4YNOvDAA3XqqacqJydHX375pWbPnq3vvvtO99xzjyTp/vvv1wUXXKCysjJdeumlkuxRTamEw2FdcMEFWrVqlaZOnaohQ4bojTfe0MyZM1VVVaXLL788of9tt92m448/XnfddZfWrl2rP/7xj3K5XJo1a9Zuvd7PP/9cv/rVr7T//vtr5syZMgxDc+bM0a9+9Sv961//0oEHHqj6+nr99re/VXl5uWbOnKmcnBytW7dO//nPf2LHufrqq7V+/XpdffXV6tevn7Zs2aL3339fPp9vt+oBAAAAAKAz6baBUe2KN1S7/DVHa8g7ZKzyDj5ut/crLy/X/vvvrwULFiQERgsXLtTw4cO17777SpLOPPPM2DbLsjRy5EgFAgE9+uijuvzyy2WarRtAtmbNGj3//POaNm2aLrjgAknSmDFj1NDQoH/+858JfU888cSEcx522GHKzc3VNddcoxtuuEFFRUX6wQ9+IK/Xq6Kiol3efvbmm2+qoqJCM2fO1GmnnRY7t8/n06OPPqpzzz03IWw6/PDDdf3118f6rV27VvPnz9cdd9whwzBa9Xolafbs2fJ6vXrssceUn58vSTrqqKM0duxY3X///br//vu1Zs0a1dTU6KqrrtKBBx4Y2zdapyQtW7ZM06ZN08SJE2NtP/nJT1pdBwAAAAAAnRG3pHVSkyZN0ooVK7R27VpJ9q1Ra9asSZjsurKyUjfccIOOP/54DRs2TAcddJD+9Kc/afv27bt1S9SKFSsUDodbBB0nn3xyi751dXX64x//qHHjxqm8vFwHHXSQrr76almWpW+++Wa3X+fSpUtlmqbGjx+f0D5x4kQFAgEtW7Ysof3YY49NWB8yZIj8fr+2bNmy2+c97rjjYmGRJOXm5mrs2LFaunSpJGmfffZRfn6+brzxRi1cuFAbNmxocZxhw4bpL3/5ix5//HF98cUXCbfRAegB9vqFvQAAAKBHGHPIAI05ZIDTZaRFtx1hlHfwcW0a3dNZTJw4UXfffbcWLFigadOmacGCBfJ6vfrpT38qyb6V66KLLlJlZaUuvfRSDR48WBkZGXr11Vf10EMPqampqdXnqqyslCT16tUroT15XZJmzJih9957T1OnTtXQoUOVlZWlFStW6JZbbtmtc0bV1NSooKCgxQTcvXv3jm2PV1hYmLAe3W93z11TU6M+ffq0aO/du3fsnHl5eXriiSc0e/Zs3Xzzzaqvr9cBBxygSy+9NDbS6k9/+pPuv/9+PfLII7r99tvVp08fnXHGGZoyZUqrR3gB6MKGTHG6AgAAAKTRyUft63QJacM72k6qtLRURx55pBYtWiS/36/Fixfr+OOPV0FBgSTp22+/1cqVK3XllVfqF7/4hUaOHKny8nK5XK7dPldJSYkktRiVlLze1NSkJUuW6De/+Y3OOeccjRo1SuXl5crMzGzjq5QKCgpUU1Mjv9+f0B4dMRR9vXtaQUFBylFJW7ZsSTjn0KFDdd999+nDDz/UvHnzNGjQIF122WVavXq1JDtUu/HGG/X222/rxRdf1Gmnnab77ruvxa18ALqpYIO9AAAAoEdo9AfV6A86XUZaEBh1YqeeeqrWrVunu+++W9u2bdOpp54a2xb9VDKPxxNrCwQCWrRo0W6f5+CDD5ZpmnrxxRcT2l944YWEdb/fr1AoJLc7cWDas88+2+KYHo+nVaN+Ro0apXA4rJdeeimhfdGiRfJ4PLucA6mtDj/8cL311luqq6uLtdXV1en111/XqFGjWvR3u90aPny4fv/73yscDuurr75q0Wfw4MG6/PLLVVBQoC+//LJD6gbQybzxU3sBAABAj3DzI//WzY/82+ky0qLb3pLWHYwbN065ubl67LHH1KtXLx199NGxbYMHD9aAAQN0zz33yDRNud1uPf744206z+DBgzV+/Hjde++9CofDKi8v1zvvvKO33noroV9eXp6GDx+uuXPnqqSkREVFRXr66ae1adOmFsfcf//99dFHH+n1119X7969VVRUpIEDB7bod8wxx2jEiBG68cYbVVVVpQMOOEBvvvmm5s+frwsvvHCHn67WXlOmTNEbb7yhc889V5MnT5ZhGHr44Yfl8/l08cUXS5Jef/11zZs3T+PGjdPAgQPl8/n017/+VTk5OTr00ENVW1urc889VxMmTNDgwYPl8Xi0ZMkS1dTU6KijjuqQugEAAAAASAcCo04sMzNTP/nJTzR//nyNHz8+YWSP1+vVAw88oFtuuUXXXHONCgoK9LOf/Uz9+/fXddddt9vnuuWWW5Sdna1HH31UgUBAo0eP1p133qmzzjorod9dd92lm266STfffHOsvv/5n//RhRdemNDv8ssv1/XXX6/LLrtMjY2NOvXUU3XHHXe0OK9pmpozZ47uvvtuPfLII6qurtaAAQM0Y8YMnXPOObv9OlrrwAMP1F//+lfdc889mj59uizL0iGHHKInn3wy9oloe++9tzIzMzV79mxt3rxZOTk5Ki8v19y5c9W3b1/5/X4ddNBBmj9/vtavXy/DMLTvvvvqzjvv1Lhx4zqsdgAAAAAAOpphdfKPdWpqatLKlSs1bNgwZWRkpOzz2WefaejQoWmurG3q6+uVk5PjdBlwWPw1W1FRoREjRjhcETobrosu4tXj7Mdxb3T4qbgmkArXBZJxTSAVrgsk45pouxmz35EkzZwyxuFKOh5zGAEAAAAAACABt6QBANBWg891ugIAAACk0Qkj93K6hLQhMAIAoK0IjAAAAHqUcaN6TmDELWkAALRV4xZ7AQAAQI9QU9ekmromp8tIi24TGHXyubuBGK5VoBt55+f2AgAAgB7hjieW6o4nljpdRlq0+5a0tWvXavr06aqurlZhYaFmzZqlffbZJ6HP1q1bNWPG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16dp06apo6ND8Xh8WGjU0tKi/fv3591nWVmZhoaG3OWjR4+qubnZXTYMI6v9d7/7Xe3Zs0dPPvmkGhsb9eabb+rWW2+VZVmaPn26ent71dfXp+rq6mGP9aEPfUgbNmxQIpHQxRdfnPU4AAAA44FJrwEAwJS3bds2eTwebdmyRc8884yeeeYZbd26VZdddpm2bdumxsZGff3rX9fg4KAikYja29slSX/zN3+j7373u9q+fbssy9K+fft08OBBSdKCBQu0efNmJRIJvfTSS/rtb3970j6EQiEFAgFVV1erp6dH3/zmN937mpqa9N73vlcPP/ywent7FYvFsva3bNky7dy5U0888YRuvfXWcfgJAQAAZCMwAgAAU97TTz+t2267Ta2trWpsbHQvd911l7Zs2aLHHntM+/bt03XXXaf3vve9evbZZyVJN998s+655x595jOf0aWXXqr77rvPHU72j//4j/rlL3+pyy67TJs2bdKyZctO2oe7775bkUhEV155pe644w5dc801Wfc/8sgj8nq9uvnmm/We97xHP/jBD9z7gsGgbrjhBh04cEDXX3/9GP90AAAAhjMsy7KK3QkAAACc3De/+U3t3btXX/va14rdFQAAUAKoMAIAAJjgenp69JOf/ER33HFHsbsCAABKBIERAADABPbkk0/qr/7qr3TNNdfo8ssvL3Z3AABAiWBIGgAAAAAAALJQYQQAAAAAAIAsEz4wsixLkUhEFEIBAAAAAAAUxoQPjKLRqLZv365oNFrsroyJHTt2FLsLmGA4Js7A4W32ZQriuEAujgnkw3GBXBwTyIfjArk4JkbvD7s79YfdncXuRkF4i92BUhMOh4vdBUwwHBNnYPsX7evpy4rbj3HAcYFcHBPIh+MCuTgmkA/HBXJxTIzej7ftliRdfF5TkXsy/iZ8hREAAAAAAAAKi8AIAAAAAAAAWQiMAAAAAAAAkIXACAAAAAAAAFmY9BrA5LXk/y52DwAAAACUkPv+5qJid6FgCIwATF7V84vdAwAAAABTTDJpKZG0lEgk7eukpUQyqUTCks/rUUWZr9hdLAgCIwCT14FN9vXMW4rbDwAAAGAKsCxLScsOTJKWZV/nuZ3Iu17u7UQyqWRS7v2JZFLxRPZtex8Zt51wxl5OKnmC23aQk76dTFiKO2HOsJDnRLczl/Ps17JO/nPyeU395KvL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40Zeeukl5s+fz4oVKx7I8UVERERupYSRiIiIyE02btxo8TgiIgKDwUCDBg0AaNasGWfPnmX//v0W7davX0+FChV45plnAGjdujVbt27l3LlzDzS+mjVrMmrUKMqWLcuxY8ce6LFFREREbtAtaSIiIlJkHDlyhAsXLuTY7ubmZv55+/btzJo1Cw8PD6Kioli4cCF+fn7UqFEDyJ60eunSpYwYMYKRI0fi5OREeHg4u3btYtq0adja2gIwYsQItm3bhr+/P0OGDKFatWokJCSwY8cOZs+ene+YL126REBAAF26dKFmzZrY2dkRGRlJSkoKrVu3vr8XREREROQ2lDASERGRIuMf//hHrtt/+OEH88/vvPMOISEhrFixAjs7O3r16mVeNQ2gRIkSfP7557zzzjvMnj2b1NRUXFxcePvtt+nWrZu5XdWqVVm1ahVz587l3XffJS0tDScnJ7y8vO4q5uLFi/Pcc88RGhpKXFwcNjY2uLi4MHv2bLy9ve/yFRARERHJHxuTyWSydhAiIiIi1hYWFsb48ePZvHlznhNji4iIiBR2msNIREREREREREQsKGEkIiIiIiIiIiIWdEuaiIiIiIiIiIhYUIWRiIiIiIiIiIhYUMJIREREREREREQsKGEkIiIiIiIiIiIWlDASERERERERERELShiJiIiIiIiIiIiF/wd8zh7tcsElTwAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 1440x576 with 2 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","FOLD: 5\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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ERh1MF6vV5MmTdLbb7+t7du3Z2zbsGGDPvjgA02ZMkWGYeidd97R9OnTNW7cOB166KGaNGmSHnzwQcVisWaP0dSQtEAgoBtvvFFjx47VYYcdpp/85CfatGlTo+euWrVKM2fO1DHHHKNDDjlEJ554oubNm6dgMJhqM2HCBK1fv15Lly5VWVmZysrKUsPBmhqSVltbq5tvvlnjxo3TiBEjdOKJJ2rRokWyLCvV5u9//7vKysq0bNky3XzzzRo7dqzGjh2rK6+8Ujt27Gj5G5z1Wi644AIddthhGjlypM4//3ytWrWqUZsf/vCHGjt2rA455BCdcMIJuvHGG1Pbt2zZoquvvjpV+7hx43TRRRdp27ZtraoJAAAAAICOgIted0DTpk3To48+qhdffFHnnntuav1zzz0ny7JSw9G++eYbHXnkkfrBD34gn8+n1atX695771VlZaWuvHL3LgZ8/fXX66WXXtKll16q8vJy/fWvf21yHxs3btSBBx6oU089VQUFBfriiy+0YMECffPNN7r77rslSfPnz9eMGTNUVlamyy67TJLdq6kp8XhcM2bM0CeffKKZM2dq2LBhevPNNzV37lxVVlbqiiuuyGh/66236vjjj9ddd92ldevW6Ve/+pVcLpfuuOOO3Xq9n376qX7wgx9o//3319y5c2UYhhYuXKgf/OAH+vOf/6wDDzxQdXV1+vGPf6zy8nLNnTtXBQUFWr9+vT788MPUfn7xi19ow4YN+sUvfqEBAwZo69ateu+99xQIBHarHgAAAAAAOpIuGxjVrHpTNR+97mgNRYdOUNEhx+3288rLy7X//vvr2WefzQiMlixZopEjR2rfffeVJJ199tmpbZZlafTo0YpEInrwwQd1xRVXyDRb1oFs7dq1ev755zVr1izNmDFDkjRu3DjV19fr8ccfz2h74oknZhzz8MMPV2Fhoa6++mpdf/31Ki0t1UEHHSSv16vS0tJdDj9bvny5VqxYoblz5+q0005LHTsQCOjBBx/UBRdckBE2HXHEEbruuutS7datW6fFixfr9ttvl2EYLXq9krRgwQJ5vV4tWrRIxcXFkqSjjz5aEyZM0Pz58zV//nytXbtW1dXVuuqqq3TggQemnpusU5JWrlypWbNmacqUKal13/ve91pcBwAAAAAAHRFD0jqoadOmadWqVVq3bp0ke2jU2rVrMy52XVFRoeuvv17HH3+8RowYoYMPPli//vWvtWPHjt0aErVq1SrF4/FGQccpp5zSqG1tba1+9atfaeLEiSovL9fBBx+sX/ziF7IsS1999dVuv84PPvhApmlq0qRJGeunTJmiSCSilStXZqw/9thjM5aHDRumcDisrVu37vZxjzvuuFRYJEmFhYWaMGGCPvjgA0nSPvvso+LiYt1www1asmSJNm7c2Gg/I0aM0O9//3s9/PDD+uyzzzKG0SEH9jrDngAAAAAgB8YdOkjjDh3kdBk50WV7GBUdclyrevd0FFOmTNG8efP07LPPatasWXr22Wfl9Xp18sknS7KHcl188cWqqKjQZZddpqFDh8rn8+m1117T/fffr1Ao1OJjVVRUSJJ69eqVsT57WZLmzJmjd999VzNnztTw4cPl9/u1atUq3Xzzzbt1zKTq6mqVlJQ0ugB37969U9vT9ejRI2M5+bzdPXZ1dbX69OnTaH3v3r1TxywqKtIjjzyiBQsW6KabblJdXZ0OOOAAXXbZZameVr/+9a81f/58/e53v9Ntt92mPn366KyzztIll1zS4h5eaINhlzhdAQAAAIBu5JSj93W6hJzhG20H1a9fPx111FFaunSpwuGwXnzxRR1//PEqKSmRJH399ddavXq1rrzySp1xxhkaPXq0ysvL5XK5dvtYffv2laRGvZKyl0OhkJYtW6Yf/ehHOv/88zVmzBiVl5crLy+vla9SKikpUXV1tcLhcMb6ZI+h5Ovd00pKSprslbR169aMYw4fPlz33nuv3n//fT3xxBMaMmSILr/8cn3++eeS7FDthhtu0Ntvv62XXnpJp512mu69995GQ/nQTqL19gQAAAAAORAMRxUMR50uIycIjDqwU089VevXr9e8efO0fft2nXrqqaltybuSeTye1LpIJKKlS5fu9nEOOeQQmaapl156KWP9Cy+8kLEcDocVi8Xkdmd2THvmmWca7dPj8bSo18+YMWMUj8f18ssvZ6xfunSpPB7PLq+B1FpHHHGE3nrrLdXW1qbW1dbW6o033tCYMWMatXe73Ro5cqR+9rOfKR6P68svv2zUZujQobriiitUUlKiL774ol3qRpY3T7YnAAAAAMiBm373N930u785XUZOdNkhaV3BxIkTVVhYqEWLFqlXr14aP358atvQoUM1aNAg3X333TJNU263Ww8//HCrjjN06FBNmjRJ99xzj+LxuMrLy/XOO+/orbfeymhXVFSkkSNH6qGHHlLfvn1VWlqqp556Sps3b260z/3331//+Mc/9MYbb6h3794qLS3V4MGDG7U75phjNGrUKN1www2qrKzUAQccoOXLl2vx4sW66KKLdnp3tba65JJL9Oabb+qCCy7Q9OnTZRiGHnjgAQUCAV166aWSpDfeeENPPPGEJk6cqMGDBysQCOgPf/iDCgoKdNhhh6mmpkYXXHCBJk+erKFDh8rj8WjZsmWqrq7W0Ucf3S51AwAAAACQCwRGHVheXp6+973vafHixZo0aVJGzx6v16v77rtPN998s66++mqVlJTov//7vzVw4EBde+21u32sm2++Wfn5+XrwwQcViUQ0duxY3XnnnTrnnHMy2t1111268cYbddNNN6Xq+5//+R9ddNFFGe2uuOIKXXfddbr88ssVDAZ16qmn6vbbb290XNM0tXDhQs2bN0+/+93vVFVVpUGDBmnOnDk6//zzd/t1tNSBBx6oP/zhD7r77rs1e/ZsWZalQw89VI8++mjqjmh777238vLytGDBAm3ZskUFBQUqLy/XQw89pP79+yscDuvggw/W4sWLtWHDBhmGoX333Vd33nmnJk6c2G61AwAAAADQ3gyrg9/WKRQKafXq1RoxYoR8Pl+TbdasWaPhw4fnuLLWqaurU0FBgdNlwGHp5+yKFSs0atQohyvqpF47zn6c+KaTVbQLzgtk45xAUzgvkI1zAk3hvEA2zonWm7PgHUnS3EvGOVxJ++MaRgAAAAAAAMjAkDQAndfQC5yuAAAAAEA3csLovZwuIWcIjAB0XgRGAAAAAHJo4pjuExgxJA1A5xXcak8AAAAAkAPVtSFV14acLiMnukxg1MGv3Q2kcK7uQe98354AAAAAIAduf+QD3f7IB06XkRNdIjByu92KRqNOlwG0SDQaldvNaFAAAAAAQMfVJQKjvLw81dbWOl0G0CI1NTXKy8tzugwAAAAAAHaqzd0c1q1bp9mzZ6uqqko9evTQHXfcoX322SejzbZt2zRnzhxt3LhR0WhUY8eO1bXXXrvHeln06dNHX3/9tXw+n/x+vwzD2CP7BfYky7IUCAS0detW7bVX97lQGgAAAACg82lzYnPDDTfonHPO0dSpU7VkyRJdf/31euSRRzLa3H///dpvv/20cOFCRSIRnXPOOXr11Vd18sknt/XwkuweRv369dOmTZsUCnXsi0+Fw2F5vV6ny4BDfD6f+vXrRw8jAAAAAECH1qbAaNu2bfrkk0/00EMPSZImTZqkW265RZWVlerZs2eqnWEYqqurUzweVzgcViQSUb9+/dpWeZaSkhKVlJTs0X22hxUrVujQQw91ugygazjgYqcrAAAAANCNnHzkvk6XkDOG1YZbNq1evVpXX321XnjhhdS6k08+Wb/61a908MEHp9ZVVVXpsssu05dffqlAIKBzzz1XV155ZYuOEQqFtHr16taWCAAAAAAAgCaMGjVqp9tycquml19+WWVlZXr44YdVV1en6dOn6+WXX9ZJJ53U4n2MGDFCPp+vHavMjRUrVjT7A0H3wznRBnXf2I8FQ5ytox1wXiAb5wSawnmBbJwTaArnBbJxTrTelu0BSVKfUr/DlbS/Nt0lbcCAAdq8ebNisZgkKRaLqaKiQgMGDMho9+ijj2rKlCkyTVNFRUWaMGGC/v73v7fl0AAgvff/7AkAAAAAcmDen1Zo3p9WOF1GTrQpMOrVq5eGDx+u559/XpL0/PPPa/jw4RnXL5KkwYMH66233pJkX/T5vffe0wEHHNCWQwMAAAAAAKCdtCkwkqQbb7xRjz76qE488UQ9+uijuummmyRJ06dP18cffyxJuuaaa7RixQpNnjxZ06ZN0z777KMzzjijrYcGAAAAAABAO2jzNYz2228/LV68uNH6Bx54IDW/1157pe6kBgAAAAAAgI6tzT2MAAAAAAAA0LXk5C5pANAuDvy50xUAAAAA6EZOPXZ/p0vIGQIjAJ3X4MlOVwAAAACgGxlzcH+nS8gZhqQB6Lx2fGZPAAAAAJAD31bU6NuKGqfLyAkCIwCd1/sX2RMAAAAA5MB9T36k+578yOkycoLACAAAAAAAABkIjAAAAAAAAJCBwAgAAAAAAAAZCIwAAAAAAACQwe10AQDQaiOudboCAAAAAN3ImROHOV1CzhAYAei8+k90ugIAAAAA3cjIYX2dLiFnGJIGoPPavtKeAAAAACAH1q6v1tr11U6XkRMERgA6rxWX2xMAAAAA5MADSz7WA0s+drqMnCAwAgAAAAAAQAYCIwAAAAAAAGQgMAIAAAAAAEAGAiMAAAAAAABkcDtdAAC02qG3OV0BAAAAgG7kvO8d5HQJOUNgBKDz6nOU0xUAAAAA6EaG79vT6RJyhiFpADqvLe/aEwAAAADkwJp1lVqzrtLpMnKCwAhA5/XRNfYEAAAAADnwyEuf6JGXPnG6jJwgMAIAAAAAAEAGAiMAAAAAAABkIDACAAAAAABABgIjAAAAAAAAZHA7XQAAtNqoXztdAQAAAIBuZPrUcqdLyBkCIwCdV+lIpysAAAAA0I0MHVTidAk5w5A0AJ3XptfsCQAAAAByYOXnFVr5eYXTZeQEPYwAdF6rf2k/9p/obB0AAAAAuoUnXvtckjRyWF+HK2l/9DACAAAAAABABgIjAAAAAAAAZCAwAgAAAAAAQAYCIwAAAAAAAGTgotcAOq8x/+d0BQAAAAC6kUu/f6jTJeQMgRGAzqu4zOkKAAAAAHQjg/sWOV1CzjAkDUDn9e1SewIAAACAHHj/X5v0/r82OV1GTtDDCEDn9eld9uPgyc7WAQAAAKBbeGb5vyVJYw7u73Al7a/NPYzWrVunM888UyeeeKLOPPNM/ec//2my3YsvvqjJkydr0qRJmjx5srZu3drWQwMAAAAAAKAdtLmH0Q033KBzzjlHU6dO1ZIlS3T99dfrkUceyWjz8ccfa/78+Xr44YfVp08f1dTUyOv1tvXQAAAAAAAAaAdt6mG0bds2ffLJJ5o0aZIkadKkSfrkk09UWVmZ0W7RokW68MIL1adPH0lSUVGRfD5fWw4NAAAAAACAdtKmHkYbN25Uv3795HK5JEkul0t9+/bVxo0b1bNnz1S7L7/8UoMHD9a5556r+vp6fec739HFF18swzBafKzVq1e3pdQOZcWKFU6XgA6Gc6J1htXUSJI+76LvH+cFsnFOoCmcF8jGOYGmcF4gG+dE69QkvoN0lfdv1KhRO92Wk4tex2IxffbZZ3rooYcUDof14x//WAMHDtS0adNavI8RI0Z0iV5JK1asaPYHgu6Hc6INDnxWkjSqYIjDhex5nBfIxjmBpnBeIBvnBJrCeYFsnBOtt9fQgCSpT6nf4UraX5uGpA0YMECbN29WLBaTZAdDFRUVGjBgQEa7gQMH6qSTTpLX61VhYaFOOOEErVq1qi2H7pSsWESKhmRZltOlAF1DwRB7AgAAAIAc6FPq7xZhkdTGHka9evXS8OHD9fzzz2vq1Kl6/vnnNXz48IzhaJJ9baPly5dr6tSpikaj+tvf/qYTTzyxTYV3RhseuU6lG77QutddMvMK5MorkJlXKDOvILGcmPc3sS6vUK68Ahm+/N0aygd0aV89YT/ufaazdQAAAADoFt7+cL0kafxhgxyupP21eUjajTfeqNmzZ2vBggUqLi7WHXfcIUmaPn26Zs6cqfLycp1yyilavXq1Tj75ZJmmqXHjxun73/9+m4vvbHpNvED//ttrGti7h2LBOsWDdYoHaxUP1CqyfVNiuU6y4jvfiWHKzMtPBUhmeqDkz1pObc9PPRpGmzqVAR3LF7+1HwmMAAAAAOTAi++tk0Rg1CL77befFi9e3Gj9Aw88kJo3TVNz5szRnDlz2nq4Ti1vyIEKVdSpZzNjRS3LkhUOKBasVTyQCJSCdfZysE7xQK3iofqM7dHqLantiseaqcBIhEfZgZLdq6lRAJXe28mXL8N07fk3BQAAAAAAdDg5ueg1Ws4wDBm+fJm+fKlk955rWZasSNAOmAK1DT2YkoFToE7xUF3G9mjN16ntikWb3b/pawibMobM5RfJlV8iV0Gx/ZhfIldBiVz5xTLcnja8GwAAAAAAwAkERl2IYRgyvH6ZXr/cxb1367mWZcmKhu0eTOk9mlKBU8N8PFCrWLBOkW3rFQrWKRao2WnYZPry5SookZkKkdKCpYK0dfnFMv2F9GICAAAAAKADIDCCpETY5PHJ9Pik4l679dzUMLq6asXqq+3HumrF6ndkrItUblTo208Vq69p+jpNhilXflFauFScFjKVZIVMxTK8fi4ADgDYJSsek6y4DBe9XgEAAFqKwAhtlj6MztNzwC7bW/GY3UupPitYSg+c6ncovGmtYnXViofqmz6uyyMzvddSU+ESw+O6tnFPOl0BgBayLEuKx2RFw7KiEcWjIVnRSGIK21MknFqOJ9elb08+NxKWFctsn7E9azl5fT/TXyR3UU+5inrJXdxL7sRjw3JPe0g4AADATsw+7winS8gZAiPknGG6Uj2F1GfX7a1opFFvpeywKV5frciWbxSrq5YVizR9XF/+LnstJdcxPK6TyNu9oZcAGmt0/btQnaxwMBG6RBKhTOPwJr6TMMdKhDnxjDDHfmz2LqC7Ypgy3F4ZHq/9BwOPV4bbI8Ptk+H2yMwrkOHuYbdxe2W6k9vtZUmK1W5XtGabojWVCm/6UrG66saH8fpTYZIdJPW0g6WiXnIl1pv+Qnq4oltLXspAhiHD5eH/BwDdSkmhz+kScobACB2e4fbY/3hvwVA5e3hcMGtoXFq4VF+teF21olWbFFr/uWL1O3byBcawv2i43HbPJNPdsOzyJOaTy+7UspLr3Il2qbbuRs+V2y3DdMu99T8KfJWXuf+0fRout5TcZph7/g3uzNYush+HXuBkFciSHKaauv5ZqE7xYL2saFimN0+GN0+m15+YTzx6fJzfbWBZccVDAftac4k7aMZCdU3fbTM11SauT7erO2xmSXwemongxg5wEkGO2yMzvygR0ngSoY03tWxkLZtZz03fbmYsJz4L9/T7Fo0oWlup6I5titVsU3THNkVrtilWY68Lb/1GsdqqRr8nDLdXrqKeacFSz1RvpWSw5Coo4ZxuRjwats/DUL3iwXr7cyIxb8UiDb8vUz//hmXTbf++NbO2y+UmuEiwLEuKRRWPBGVFQoqHg7Ii4dSyFQnZ8+GQ4unLkZDi4ZCsaMgOjlPbQrKS2yMhWZG0ANgwZXi8Mj0+O8D1+mQmHg23fbmDJtclJtObZ/9cPT4Z6fOePPszwpvHH/EA5EQyDE/+sSweCaX1grY/++LRkN5cUyvTl6+TTxnndMntjsAIXYo9PM4v0+eXp7T/LttbVtweHtdEryUrlhgqEYvIikalWERWLGovJ9bFwwG7TTyaaJtoF022je7yL+pFkjb+o4Uv0HQl/tGcFkilBVRK/oPaTAut0sMtj8++253Pvji66cu33y9vYl1im+HJ6xz/6CYwahcNPU7qE1/oGnqepK9rCITq0y6SX28PI93tniSG/YXC03SgtPN5f6J92rwnT4bP3+n+6m3FYw1BTlrQk3yf/V99qS2b3m/6ZgTBeknWznduuhJ3tmy406W7R9+Gu10m1/sL5PIV2O9vVg+e1BfzLvTFzXB75OnRT54e/XbaxorHFKutsnsmJYOl1Hylgt98qmhNpRTPuvmD6WoY/pYIlxoNhSss7ZTvp32u1jd8JoTSPgdC9c3OJz8zdnVn1tZqHDB57FDSnb6cFkbtrJ0r7ZzPXm4mvNqd0MqKRexwJiOQCacFOekBjb09HgllbEt/bjwSlhUOqkewXute2fW/Pxpxue3PT49PZjLY8ebZnxNFPRtCnNQ2+y/syYCpoc6G0CleX61oRp32tNtMt/2Z5MlLhFOJOptYl7k9LZjKesyc93bIgNeykp/rlpSctyylPu8tyWq0LbUh9TxLkhEJKhasa+5gLalojzRp2X5atCPJMCXTtP+/Mwx72TDsn2diuTP9WwCNWVa8obdzJGT3cE4GOZG0UCfxGG/UNmyH4NkhUKp9KCMkaollO74rmS597+Sju/z5RWCEbs0wTHsoWn6xpCHtcgwrHmsInpKBU7QhWFrzyWqV7b+fvS3VLtE2ardX4jmZ+0gPsOznJkOteCjQKNyyYpHUB+Ou3xjT/lKeCpeSgVLDfONt+Y2381dBR6Tuepge4gTr7B4nyd4l6eFPsFax1Je/RI+TXXzRMDx5MvPy7aDBVyB3YanM3oNTy3YAYW93JZYNl0fxSNAOWkNBxSMB+y/Y4cS6JuZjiR6B8VAw8SUq2PIvQYaZCkB3Gi41FT558jKflza/q14u8WjY7tUTqkv19sns2VObFvTUZyxb4WCz+/aZbtX7C2X6E4FP+nueCHzSAyEzr0CuUYsrvgAAIABJREFURNtOEwJ3QIbpaujlOqjpNpYVV6xuR1ovpcqMYCm8eZ3qv/hH489fw5SroCRjuFtDL6Weqd5LZmJI3Z5gWXH7/6/0ICdYn/h8SAQ86UFQo3X1siLNn6tS4jPCl29/DvgKZPqL5S7tn/h8SKxLbHel1uWnPivs311h+/dXNGyHK9GwFI0qHksOc0z+LkxbTj0v0vC7Mm05HgrIiu7IbJdsGwmrhd92m3/tGYGUOxUkNfyF2g5Pdqtnn2SHJmlhTSoo8fplFPRI9dTZsr1a/Qfv1dBDJxnyNApb0gIgjy9nv68b/oKfDL4y5xvCsHDa9mCqZ1OjsCxQm7Y98d62IpC0h7z6Gq55aaX+kxHEWOlBRjK8yQpndrYt/XlW+rb0Y6QHQntQD0lfLdvju+08DLMhPEoGS1lBk5EWOGW3bQigspfT2pmZ7YzEMZtfbvw8yZ7sX9vJdcnXkdhuSEb6trT16c8xmtmWt2mzKnd8mvZ8NWpnNPG8hhrVuMasYyX/7WHFY5mBTnZYkxbs2NvTQp6dXG6kJT/zVLDsTgTDiR6M9udmSUOPxuSQd3cyiPY19HhObfelln1/+ndi9EfX/7cVgRHQzgzTJcPrkpTX5PbYxmr59ynPWT1WzO4ZFQ8F7H/4hwOJLwOJx4zlgKxwYj5Yp+iOraltVjjQouPZX8qzejB5GwdM6ctGowAqr/vd3SgWVbRme0aI09CrJ/HlrYleP7Fkb5Ps3g5ZDLc3LWgokKugRN5eAxOBT37GNtOX7JlSkNreHsODWiL1RSMRLMXDwaz5QCJ0ypqPBBQPBWVFgoru2JYRSrXky2+S4fKkekDZ4ZLPPnbiZ7SrQNbw5tnvp98Odtw9+sqbCHjSwx5XWuiT7Pnz4Ucfa9SoUW19C9EODMOUu7CH3IU95BuwX5NtLMtSPFib6pmU3WMpsm29Av/5WFYTN3ow84sT11Hq2RAsJXsvbVmr2k+yAqBm53fRG02SXG77fPTlpwIed1FpWtiT3/BZ4ctettt0xj8WNFyYvemwqanleDQsxSKKp1/APdZEmBWLJoZhZvZ8SQ3JTQ9wUtuSIU9iWws/d79esUI9O/BnRfLOvPL45FJxuxwj+eU0o9dTEz2dmlrX8Dnewi/qWdt2+WU9tU6JL5vN78dIPSerprQv+LsKFiRD3377rYYM2QN/HG3RF+Q99CV6V8dKhXKWLCtuL1uWrHjc/uOSlb4tntUubv8/v5Pn2cFgXIpnPy9zf6nnKe15lv28uBVLHWvnx278PCvjtaVebNPBZWtCy0RgmRePq+oro1GY2R6BZUqyt2AyoPH47OHrHl/iWoSlmQGNx2sPZ017zk6X0wKdZGDfXgzP1+22746GwAjoZgyXWy5/kVz+ojbtx7LiskKBrIApM3Cyt6dtSy7XVslKtQ20qMeI4fY2Cpt6m19Lpqntz96d9gtZDb+Qk78cU7+IE7/8LTX8sm6yjaWGX+hq+EeB0n6hq2F96nnZbZLPVeOaMp6T3cayVGrF9fVfmnk/XJ7MUMdfJHdpv4bgwVfQKPRp2Pb/2bv3MCnKO+//n+rq0/ScZ5gZhpMgKKLgARQ1eIgGTwlmiInRx2xifrmC8RDd35XsRjT7iOZggpu42WiIG/eKiY9xo2jUCGhc1F0P60OS+RkTRMUoAYFhgBnmPH2qrt8f1V3d1TPACM30HN6v6+qruqvuqr67qWmmP/O974qM2qsGer5olFYW5JjOF4v4gADKmb8j6pzLif1UQiVi8lfUpisoBq/yya4rLVrQhuIzDCP72dswfb/tUrE+JdOBkpWuVsqdYym6Y7NS/d1u+3JJu5tzn8jnrewJRZzhhzkVPdn7pQMDn3CkoBVNo4lhGM6QMtMvqaTY3cFhMHymewVfON7zN6tyBAeJGH7Nzc0H/EOU5/dkZ4VyQ6yBwyEHCa7S6w2f3wl1RuEfE8Y7fnMFcEgMwycj/SX4cDjz5cSyYVKs3wmT8sOmdBBl5zx2/oqbUnzfezl/ScuUB0tSbtlvusxYUnZ8u+Ful+GTL/exfOnD+fKOnbufz30v5Nl34PN5nyuvjZHTJv1XuZ172zXt6GPzQp+cyp9x+oXuSHC+WDhDLoFi84UiCoYiCk6Yst82qUTMveLbO5v/quNPOiVb2cPwQwBAAbi/l+7nvxT+pxkfCIwAFJVhGO5cMlL1h9s5eYskaap/7P0FcUtzsyr4SyCAQfgCIfmqJypQPVHWnqiCddOK3SUAAMaNFV8+o9hdGDYERgBGrzEYFAEAAAAYucLB8ROjjLzrRwLAUG1e5dwAAAAAYBisfXWL1r66pdjdGBYERgBGr22POjcAAAAAGAavvLFDr7yxo9jdGBYERgAAAAAAAPAgMAIAAAAAAIAHgREAAAAAAAA8Rvz03rZtS5Li8XiRe1I4sVis2F3ACMM5cYh81c5yjL5/nBfIxzmBwXBeIB/nBAbDeYF8nBOHJhI0JI2t9y8YDMowjAHrDTuTyIxQ3d3d2rx5c7G7AQAAAAAAMObMnTtXoVBowPoRHxilUin19vYqEAgMmngBAAAAAADg0IzaCiMAAAAAAAAMLya9BgAAAAAAgAeBEQAAAAAAADwIjAAAAAAAAOBBYAQAAAAAAAAPAiMAAAAAAAB4EBgBAAAAAADAg8AIAAAAAAAAHgRGAAAAAAAA8CAwAgAAAAAAgAeBEQAAAAAAADwIjAAAAAAAAOBBYAQAAAAAAAAPAiMAAAAAAAB4EBgBAAAAAADAg8AIAAAAAAAAHgRGAAAAAAAA8CAwAgAAAAAAgAeBEQAAAAAAADwIjAAAAAAAAOBBYAQAAAAAAAAPAiMAAAAAAAB4EBgBAAAAAADAg8AIAACMK5///Od12mmnKR6PF7srAAAAIxaBEQAAGDe2b9+uP/7xjzIMQ88///ywPW8ymRy25wIAACgEAiMAADBuPPnkkzrppJP0qU99Sk8++aS7vqWlRV/96ld1xhln6PTTT9e3vvUtd9ujjz6qSy65RKeccoo+/vGP680335QkzZ49W1u3bnXbLV++XP/yL/8iSdqwYYPOOecc/exnP9OiRYt0yy23qLOzU1/5yld0xhln6LTTTtNXvvIV7dq1y92/o6NDt9xyi8466yyddtppuv766yVJS5Ys0QsvvOC2SyQSOv3007Vp06Yj8yYBAABI8he7AwAAAMPlqaee0he/+EWddNJJuuKKK7R3715VV1e7Qc4LL7wg0zT1l7/8RZL0zDPP6J577tFPfvITzZs3T9u2bZPfP7Rfn/bu3avOzk69+OKLSqVS6u/v12WXXaYf/ehHsixLt956q771rW9p1apVkqRvfOMbikQiWrt2rSKRiF5//XVJUlNTk37729/q/PPPlyT993//t+rr63X88ccfgXcIAADAQWAEAADGhT/+8Y/auXOnLrnkEtXU1Gjq1Klas2aNTjrpJO3evVvf+MY33DDo1FNPlSQ99thj+vKXv6wTTzxRknTUUUcN+fl8Pp9uuukmBYNBSVI4HNZFF13kbr/uuuv0hS98QZK0e/duvfTSS9qwYYMqKyslSQsXLpQkffKTn9SqVavU09OjsrIy/fa3v9UnP/nJw3w3AAAADozACAAAjAtPPvmkFi1apJqaGknOUK8nnnhC9fX1mjRp0qCVQy0tLZo2bdohPV91dbVCoZD7uL+/X9/73vf08ssvq7OzU5LU29sry7K0a9cuVVZWumFRroaGBs2fP1+/+93vdMEFF+ill17SN7/5zUPqEwAAwFARGAEAgDEvGo3qmWeeUSqV0qJFiyRJ8XhcXV1dmjBhglpaWpRMJgeERo2Njdq2bdugxywpKVF/f7/7eM+ePWpoaHAfG4bhaf/zn/9cW7Zs0aOPPqq6ujq99dZbWrp0qWzb1sSJE9XZ2amuri5VVFQMeK5PfepTWr16tSzL0sknn+x5HgAAgCOBSa8BAMCYt379epmmqbVr1+rJJ5/Uk08+qXXr1unUU0/V+vXrVVdXpx/+8Ifq6+tTLBZTc3OzJOkzn/mMfv7zn2vjxo2ybVtbt27Vjh07JEnHHXec1qxZI8uy9NJLL+kPf/jDAfvQ29urUCikiooKdXR06N5773W31dfX65xzztEdd9yhzs5OJRIJz/EWL16sTZs26cEHH9TSpUuPwDsEAADgRWAEAADGvCeeeEKXXXaZJk2apLq6Ovf2uc99TmvXrtV9992nrVu36rzzztM555yjZ555RpJ0ySWX6Nprr9XXv/51zZ8/XzfccIM7nOyb3/ymXnzxRZ166ql6+umntXjx4gP24eqrr1YsFtMZZ5yhK664QmeffbZn+1133SW/369LLrlEH/nIR/TLX/7S3RYOh3XhhRdq+/btuuCCCwr87gAAAAxk2LZtF7sTAAAAOLB7771Xf/vb3/SDH/yg2F0BAADjABVGAAAAI1xHR4cef/xxXXHFFcXuCgAAGCcIjAAAAEawRx99VB/96Ed19tln67TTTit2dwAAwDjBkDQAAAAAAAB4UGEEAAAAAAAAjxEfGNm2rVgsJgqhAAAAAAAAhseID4zi8bg2btyoeDxe7K4UxJtvvlnsLmCE4Zw4DLvWO7cxiPMC+TgnMBjOC+TjnMBgOC9Ghz9t3q0/bd49LM/FOYGh8Be7A+NNNBotdhcwwnBOHIaN33GWExcXtx9HAOcF8nFOYDCcF8jHOYHBcF6MDo+s3yxJOvnY+iP+XJwTGIoRX2EEAAAAAACA4UVgBAAAAAAAAA8CIwAAAAAAAHgQGAEAAAAAAMCDSa8BjF4L/63YPQAAAAAK4obPnFTsLgAeBEYARq+K2cXuAQAAAHBIrJStRMJSPJlSImnJbzoDgHbv65PPMOTzGdmlz5DPkOexYTjrDMMo8ivBWEVgBGD02v60s5xyaXH7AQAAgFEpN7SJJyzFk5YSiZTiSUvxhLMukcw8Tq9z2wx9n0Qy5znSj5OWXZDX4DPkhktGbshkGDJ9hozM9pxt8VhMkeefdx8b6aXpCaSUF1hl9pc3zMpbZp4vcyxJsiXZKVsp25Zty13ansfebSnblg5lW8p5XzPbUpnnSUm2vM+XSmX7YCu3bc79zDa3ra266oju+YfzCvLvN5INKTDasmWLli9fro6ODlVVVWnlypWaPn26p82ePXt02223afv27Uomk7r22mvV1NQkSbrnnnv08MMPq76+XpI0f/58rVixorCvBMD48/YPnSWBEQAAQNHZti0rlb5ZKaVSuY9tWan8dSlZKTtnXSrdLrMulbOvrVTmccpWMukENt6wJyesSVjuukROkJP/2EodXmjjNw0FA6aCflOBgE9Bv8/zuKwkqEC5T6FAZruzDAVMBfymgn6f+/iJ/3pPkvTp82YpZTvvQSodXHgfp28pZR+nbPf9z21r5+xrpbIhyd62NlVVVWTb5h3fttNhmpXyHD+Vco5npXLWHaSvkjzVUD7DCZWMnOWQt/nS2yRP20xQZfqckMzdlntf2TDLyH8+OcfOPHaW3r7kbquviRzuj8uoMKTAaMWKFbrqqqvU1NSkp556SrfddpsefPBBT5vvf//7mjt3rn7605+qvb1dl112mRYuXKjGxkZJ0tKlS3XzzTcX/hUAAAAAwBiWStlu9UosbimWSKaXlmJxJxjJ3M9dxtP3W1r36dW/vu4JbjxBjZUNYg4W1FhWXht3XUqHmb0cMr/pUzAdxgQDPieIyQlnyiJBJ8jJhDrpQCfTNpSzj/M4G/54H6ePGzAVSG8zfYUbDvZf/992SdIFpx9VsGPuT3NzsxYsWHDEnwej20EDo7a2Nm3atEkPPPCAJGnJkiX69re/rfb2dtXU1Ljt3n77bV199dWSpJqaGh133HF65pln9KUvfekIdR0AAAAAiicT5HyY8CZ/2/7a5+97KDLVLrZtKbxnd7r6wucMFzINtxojd10w4JPp8zuP0+v8Pp98ZratW8Vheh/vf533sek5Xrb9gHWmke1H5pjuumxI5CtgaAMg66CBUUtLixoaGmSapiTJNE3V19erpaXFExidcMIJWrdunebNm6ft27fr9ddf15QpU9zta9eu1SuvvKK6ujrdeOONOuWUUz5URzdu3Pih2o9kzc3Nxe4CRhjOiUNzbHe3JGnzGH3/OC+Qj3MCg+G8QD7OiYFSKVuxpK1YIqV4wlnGErZiyfQysz6ZUiJpK2HZ7jKZc3+wbYfCbxoKmIYC/oFLv2mopMRQoNxQwAwo4A/mtPENaHug4/gKPhmyLenQwiuPVPqWc9Tk4R911OtO/247XD/DfFZA0gErzQo26fXy5ct15513qqmpSZMmTdKZZ57phkxXXnmlrr32WgUCAb366qu6/vrrtW7dOlVXVw/5+HPnzlUoFCpUd4uG0j/k45w4DPvKJR34Q2604rxAPs4JDIbzAvnG0jlh27aicUv9saT6ogn1RZPqjybVF0uqP5Z+HEuqL+psz9zvj6XbRLNtovGhhRxBv0+hoF+hoDMMKRQ0FQqbqsjcz1kGh7guFEyvz9wvQkXMWDovxrLHNrwiaXh+t+WcwFAcNDBqbGxUa2urLMuSaZqyLEu7d+925ybKqKmp0Q9+8AP38bJlyzRr1ixJUl1dnbt+0aJFamxs1LvvvquFCxcW6nUAGI/O/D/F7gEAAMhh27YSydTAICcnzMkEOU6ok1RfXvjTn96nP5Yc0pw4ftNQSSigSNivSNivkpBfVWUhTaotVUn6cSQccLdFwn5FQgH3fknYr0jI2WamL2sOFMPX/hcBDkaWgwZGtbW1mjNnjtasWaOmpiatWbNGc+bM8QxHk6R9+/apvLxcfr9fr732mjZv3qwf//jHkqTW1lY1NDRIkt566y3t2LFDM2bMOAIvB8C4Ujq12D0AAGBMSFopb4VONC/EyQQ9scGrejLhT38sMaRhWj5DKgn5VZIb5IT8mlBZMjDICQcUCflzAh9v+BPwm8PwDgFHXl11SbG7AHgMaUja7bffruXLl2vVqlWqqKjQypUrJTlVRDfddJPmzZunP//5z/rud78rn8+n6upq3XfffSopcU74u+++W2+++aZ8Pp8CgYDuuusuT9URABySrY84y6OuKG4/AAAoAitlp4Mcp0qnP5bUX1uiir6xc+CQrUGqefpzwqF4MnXwJ5QUDppuWJMJbybWRgYGOemgx63oyQ17Qs6QL6Pg8+sAo9vLr++QJJ19yuQi9wRwDCkwmjlzplavXj1g/f333+/eP/fcc3XuuecOun8mYAKAgnr3p86SwAgAMEqkUrai8fzKnUGGZWWqfHKDnSHPy7PX8yjo9ymSDm9K0uFNbWVYkXpvpU62sicn6An53eFe4ZC/oJcQB+C17rUtkgiMMHIUbNJrAAAAYLxIWil198bV1RdXd29c3X1xdfUm1O157Nx6+uPpIVxJReNJ2UOYl8f0GU7Ikw5tImG/KkuDaqwt9YY54WygUxLy64Ot7+mUk+Z6QiA/8/IAAA4BgREAAADGLdt2hnV19yUGBEDZx04Q1JUOgbp74+qP7f8i4AG/T+WRoCpKgyqPBDWlvlylmeFaefPy5E64nDukK+D3HdKQLaNvu6Y3VhzOWwIAgCQCIwAAAIwRVspWTybUGazyZz/bktb+5+8pDftVng5+KkqDmlJXln0cCbj3y0uDqkgvw8zPAwAYAwiMAAAAMOLEEpZT4dObU+njqfqJD6gK6o0m9jvcy/QZnuCncUKpjo1Uu1VAudsy68oiAYZzAQDGLQIjAKPXWY8VuwcAgDz5kzr3ZiZpjmYncc6/JHtvNOFu7+1PqKsvoXhifxM6SyUh0xPyNNREcip9AqooDaWrfQJuCFQS8lP1A2BEW/6F04rdBcCDwAjA6BWeUOweAMCYYaVsRd1LsDsBTibsca7Klb2fe/WubCCUXhcb2qTO2cuzB9zLrleVlykS9g+o9Mkd7lUeCSjgN4/8GwIAw6yyLFTsLgAeBEYARq/3f+Esj/5iMXsBAEVlWSm3Uqcvcyn2aO4yGwD15V6+PTfsiSXUH9t/RU+ukpDpTs4cCTlX8aqtDCsSyk7qXJq33QmEAu7VvkpCfpkM9QIAj/W/3yZJWrxwWpF7AjgIjACMXgRGAMawRNJSW2c0fevX3o70srNfben7nT0xJR7eftBjGYacq3Clr85VGvartCSgCdUl6RAnW+VTEgqotMTvCYAy98Mhv0wfw7oA4Eh4/o8ERhhZCIwAAACGWTSeHBgEdfSrrTPqBkIdPbEB+5WETNVWlmhCZYlOPKZO/T37NOOoKelqHif4cSp8vJdoDwf98hH0AACAD4HACAAAoEBs21ZfNOmpAtrbmRcIdfSrpz8xYN/ySEC1lSWqrQxr1pSqdDAUVm2Vs5xQVaJIOODZp7m5WQsWzB6ulwcAAMYRAiMAAIAhsG1bXb3xnCogb0XQ3s5+tXX2DzoXUFV5SBMqw2qoiej4GTWaUFXiBEJVYU2oLFFNZVjhIL+WAQCAkYPfTAAAwLhnpWx19sTSVUDZYWL5gVAimfLs5zOkmgqnCuioiRWaf1y9JqSrhJxAqEQ1FWEF/EzwDAAARhcCIwCj10fXFbsHAEaBeMJSR3csG/4MEgi1d0ZlpbzXgvebPtWmh4IdM61KZ1Y2qjZdEZRZX1UW4mpfAICCWPHlM4rdBcCDwAjA6OWPFLsHAIZZKmWrL5pQZ29cnT0xdfXG1dkTV1evc78rvb4zfb+rJ6ZofOAQsVDQdOYHqizRvJkT3AAotzqoojTIRNEAgGHD0GSMNJyRAEavzauc5bHXF7cfAA5ZIml5gp5MANSZCYB60ttyAqFUXiVQRihoqrI0qIrSoCrKQppaX6aK0pAqy4KqKA258wXVVpWoNOyXYRAGAQBGjrWvbpEkfWLRjCL3BHAQGAEYvbY96iwJjIARIXOFsM7eWDboyYRAvU4VUGdPXN3pAKizJ67+WHLQYxmGVFYSTIc9QU2uK9Oc6c79yrKQsywNqSK9vaI0yF9mAQCj2itv7JBEYISRg9+sAADAoJJWakD1T1dOAOSu680OCUtag1f/BPw+p/qnLKTK0qAm1pa6YVCFGwBlw6CySFAmw8EAAACKZkiB0ZYtW7R8+XJ1dHSoqqpKK1eu1PTp0z1t9uzZo9tuu03bt29XMpnUtddeq6amJkmSZVn6zne+o5dfflmGYeiaa67R5ZdfXvAXAwAADi4aT6q9K6q2TufW3hlVW5cz8XNbZ1QdPTF19cTUGx28+keSykoCbrVPQ01Ex0ytylb+pIeA5VYDhYMmQ8AAAABGkSEFRitWrNBVV12lpqYmPfXUU7rtttv04IMPetp8//vf19y5c/XTn/5U7e3tuuyyy7Rw4UI1Njbq6aef1rZt2/Tcc8+po6NDS5cu1ZlnnqkpU6YckRcFAMB4ZKVsdXSnQyA3EOr3hkNdUfX2JwbsGwqaqq1wJnueNaXKrQbKBkDZIWDlkaD8XBkMAABgTDtoYNTW1qZNmzbpgQcekCQtWbJE3/72t9Xe3q6amhq33dtvv62rr75aklRTU6PjjjtOzzzzjL70pS9p3bp1uvzyy+Xz+VRTU6PFixfr2Wef1Ze//OUj9LIAABg7bNtWfzylrbu63Cqg3IqgTCDU0R1V/nzQPp+h6vKQaivDmlxXqhNnOVcEq6kI5yxLFGESaAAAAOQ4aGDU0tKihoYGmaYpSTJNU/X19WppafEERieccILWrVunefPmafv27Xr99dfdCqKWlhZNmjTJbdvY2Khdu3Z9qI5u3LjxQ7UfyZqbm4vdBYwwnBOHqPqHznKMvn+cF+ND0rLV3W+pu99SV5818H5fSt39lhKWLWmnZ99w0FBFianyElPTJpiaO7Vc5RHncXmJqYqIqdKQL+/S8In0rVtWt7SnW9qzYxhfMAqOzwrk45zAYDgvRr7PnF4iafj+rTgnIEkLFizY77aCTXq9fPly3XnnnWpqatKkSZN05plnuiFTIcydO1ehUKhgxyuW5ubmA/6DYPwZD+eEbduSbMm2Mysk2c76vHVKr7MHWTfgWJl9DUMyDBmGz70vGU61RO46I29dps0INB7Oi7EulbLV2RtLzw8UzVYG5QwRa++Kqqs3PmDfgN+Xrv4p07RJJaqtDKuva69OOmGWWxFUUxlWKFC4/2cxOvFZgXycExgM5wXycU5gKA4aGDU2Nqq1tVWWZck0TVmWpd27d6uxsdHTrqamRj/4wQ/cx8uWLdOsWbPcY+zcuVMnnniipIEVR8Bws21bdjKuVLRPqVivUtEepaK9SkX7ZEV7lYr1SSnLCS7slCe4cB97Qo+cdbZ3nTfgSGWPIUl2SqXt7dq15fn0NmddNkgZZF16X08/7FS6Oyl3PzunPwNfh3Jez8B17vGdO9ntdiovyJHbHyfkGbgufeAjorJisySps+vYwztQTqhkGD7PumzA5Kwz0kHTgHXu+rzgKnMMZdb50k0P/Jylvf1q/eAl+QJh+UIlMtJLX7BERjAsX7BEvmBYRnqZfRyW4SNEGCo7mVAq1qdUvF+peFR2vD/9OKpUrF+peH96XX+6Tb/sWL8S0T4l+/tkxaOyUraSKUMJ21DCMhRPSbGkoXjSVtL2yZIhSz5Ztk9++TQ54NdRwYCCwaBCE4MKhYIKh4MKl4QUKQkpEgkrFArKMOMyfJbki8kwTW3Z+oGODgVkJPzSPlNWp6l+0y/5TBnpm0y/c9800+vT283MfZ8M059zLg/je533WWkP+FzM/czK/RzMX5f9/PR8LtqDfC6m22U+1wwzIMOfvpkBGf5g9jE/NyNK5t/atpJSKiU7ZUkpy7O0U6kB6zJt7dT+93PbWJZke9fJSj+2c57DSmafy8628ezneY5UTh+t9O8TqfTPYu75l1n6nWX++el57JcG3e7Pnsum39kW7ZbV1825DYxCv3nxr5Kky86bVeSeAI6DBka1tbWaM2eO1qwi+Y59AAAgAElEQVRZo6amJq1Zs0Zz5szxDEeTpH379qm8vFx+v1+vvfaaNm/erB//+MeSpIsvvlirV6/WhRdeqI6ODq1fv16/+tWvjswrwrhhW4lswBPtTQc/ObdYb3abp02frGiPZO3/6j8DGTlf9g1PGHDQwGCQShcjZ18zGlXS7lc2hMhpLw1c5/NJhk8+9/i+9NP6PH2S8tflBhOZvkpSOsDIvEb3OSVjkHXuaxxknfuc+c9h+NLHyn0vM+/NwHWZdp73NeeYmfWRrf8oSQoc9RVvUJcbhh0gvLNzvmhm9stfN6SgTjlfggeEh97AcfAQMueLdCqllJ2SL9at2M4e2fGoE2QkokM/W/1BJ2QKluQFTuG8wGmQ+yFnHyOUE0KZgSE/95Fm27bsRFSpWFSpeJ9sN8iJpsMcb9iTiqUDn/ggj2NRKTW0z4GkEVBcAcXsgPosv/pTfkXtgOJ2iSRbpmEraNoK+6WQKZWVGAr6bAVMW37Dlt9IyDRsGbbzRVLpL7R2X0rqTma/aErqTd/ylUna/efCvZfy+dNBkumGTpnASYZxwPDmwwbnRzI4LpjcL/P+nDDJzHns+cIelM+/n23ul/fg/o+VPobh92fbD/MXe9tOyU4mnFDGSsq2nPvOuvT99FLJ5IB1mX0z69xj5K3PtFVq4D772+YGg8WQ/r82+7PhywauuT8vbljr86zz+YMD2xqG8zOezL6HqWhvznudkJ1Myrbi6WXC+aw4BFWStv6X9/W4YdJgQVX6/DtwIJW3r+nP2c8JpA3TuTk/S/70utwgO5ANsNPbZZrZ3xsA6A9vOdO2EBhhpBjSkLTbb79dy5cv16pVq1RRUaGVK1dKcqqIbrrpJs2bN09//vOf9d3vflc+n0/V1dW67777VFLijMFsamrSG2+8oQsvvFCSdMMNN2jq1KlH6CVhtLBTlvOX/HRljxPwZCt9nGWP28bKBD79ztJOxA78BD5TvnCpzHCZfOFS+cIR+Svr0vdLZYZL5QuVuo/dW8hp6/yCd+T/Ct/c3KxjKAc9NO13SpIq5l9Y5I4UXnNzs47NOS9sOyU7HvNWwniqYvqVSkRlx6J5bdKP+7uU7Nydsy069C9kpn/QiqbcSqfcKqjcaqjcfQyf6YY2udU6TsDTl67mSfc3HfzYsfywJ6qhhQ+GjFCmbxEZgbBS/pAS4VrFwkFFU371Wqa6E6a64j51RA219dna128oagcUtQOKpQMiyxdQVUXEGQbmmSg6rJrKsLu+JHR4o7xt2/ZWKViZKglLtpXUxr/8WSfMOS693nK+YFs51RZW0lvVYCWzVRSpTIVEMu+4uc+XzKmGsLPhs1sld7jB+QGGhw4Sruc/pzdsz33ObLieG8ZLeaG5lA4n4s6X9GQ8G24MeBwf0DaVTDiBZGZ75ot+ev+hho8H5PPnVUA5X+Z9/oBkBtIBlTd8iuzZo9YPXnL6MEgQY+cEMfmhUMFDGTd0S4cFuZUxbsjgly8QyQYS7nZ/NpzIrZbz+Zz3xRPKOAFO9n5+iOPLhhZG3n5mOvgxzJzqu7z9RkiAkfm5zg+VZCWUSiYkN5zzLv/2/nuaNmVS9tzODaQy53buuW8llErGZUf70uvj6fMlJ/xLDhw6WzDpQCsbLPmz50DOOrmhlJkXSnlDK+UcwzAD6W0Dj+EEVjnHd4+R+f0v+0c6I2/pnkMD1nmXxajmxMENrGDM/f807//HzP+lmarFzP+VVs46d/9kzv/B+f83J3MqFi1P+9z/8+OtMyRD2vXoy55zecAfedzK4cz5PUgbz2epP/uz4DMl05S5b7tiOyvd42X392c/Z3N+3jifx6ch/XY7c+ZMrV69esD6+++/371/7rnn6txzzx10f9M0dccddxxiFzGS2SlLVne7t5InXemz38qfaK+sWJ/sWN+BD2745AtHPKFOsGzyoCGP6a6LyJcOiAx/kA81jBmG4XMCkFBJQY6XGZaZDWj605U7/YMGTplKJ3eIVrxfqZ72nP2HXq2zXz5/NmgKhWUEI/KVlMtfVZcOqEpygqiSdCBUorgRUHfcVEfU0L6oob29tvb2WGrriqm9K6r2PVHt64oqaXmDJsOQKstCTvhTG1bNjLCOzgmFMsFQRenwfJYYhuF+QRpMqnSHgnXTjng/cGiyX+4zFSI5wZQnXNrf+oRsywmmlHQCAc8xrGT6S31vzjESCiSTivVH0l+CM8FLwPkZKSnPfunOrQzJXfrTX5o9oU4gHfj401+4vcf2HsMvZdaNkKBlrHC/2AU+3Bye8WSlKgv8hygn0E661U/eKrSk50u18zg3hM4EmZkvz0nvl24r4f1ibSWdL+JW9r775dqylIrHPMfwPL973BFQqeYyBoZI+QHUfkOp/awbEEoNdmzTc+zI3r3as+v3TpdyKj9t97/GnGrQ3HV23h9pMkOKvTvn3M89RuY5htYu93j2gdpllqmU7HRgkx0qur/AJxvMFCTg/zA84U2mYtEcNJyx7ZSUspXsast5XXl/IMp5XYdaiShJFZJ2bDic1zJIgJUJXjNhvxtg5QX/mfVGpoozZ10muHcDM28V52B/LBgQ/A9aDbq/PzLk/qEh5/khqYCTXmPss+2UEu27FGv5q2It7ym286+Kt245YKWPEYrIDGVDHH9VfTrYKUuHPJFsVU+JszTTIZARLCHwAY4QwzBkBEJSICSztLIgx7StRHqoWE6lUE41lJ2y3LDHHTKXGwD5vUPfEklL7V2ZSaMHXkK+vatf7V1d6o8N/GWpNOx3qn8qSjRv5oSBlUEVJaquCMlv8gsBCuNQv9wfLiYtxXBwAu1AeohyYf5wMRxsO+X5wp0NpRI5wVJO0JUJoGwniHCG5KakzP28pVLp7YOtS+XtO9i6/OPZ6Tmx9vMcufun7OTA4xzg2IFEQn0dW5Ud5q+c+0bOqszv3vtv59wdWrv84xm57Q7SPrt6P+0MQ4bP7wwDDeZXn+WEAWZ+JU5ONdlg4caAMCTneO4+pmf/7HPk9MMNP4b+fSa06hVJ0pQvf2FI7b3VUnmVw3lhazZwcoKoze+8rVkzj87+jOQFUZ5KqEGPm9cmr9o5059UMi6lop7jDmUuusMJww6f4Q2QMkGTkV0XqGrQxP/1v8f891UCIwzKtm1Z3W2K7fyrExDtdEKiVLoqyPAHFZw4Q+UnL1awbqrMkvIBwY8vVCImWsQRZY6eX1rHA8MMyIwEZEbKD9guc/Wwts6o2tuiautsT4dBztXDMoHQYFcP85s+N/iZMalSC+Y0qLYirJrKEtWmw6DqAgwPAwCMfobhk/w+GRo5c/EVC+Hy6BD8kFc/dYZim4f0nSvZnlDpMSP3nHDDsPwLCnguWOCs91wgIbPN8gZQuRct2N8FCrLr8i+ckBqwzl9RO+bDIonACGlWb2c6GHrPrSCyejucjT5TwfqjVHr8WQo1zlRo0iwF66YSBqH4znum2D1AWiplq7svrs6emDp74urojqmjJ6bOHmfZ0e3c2rqc4WFWauDwsKqykGorw6qriui4o2pU46kIcuYKKo8ExsV/zgAAYPy5Y9mZxe7CiHE4YRgKh8BoHEpFexXb9b47rCzW8lclO/ektxoKTJiskqNPzoZDDdOdUk8A40o8YbmhjxMCRdXR44RCnkCoO6bO3rhSeSGQJPkMqaIspKr07cRZE5z5gSq8E0ZXl4dkMjwMAAAAGDEIjMa4VCKmeOvfcoaV/VWJtp3udn9VvUKTjlHFqZco1DhLoYlHF2xSXeCI+8u3neW8/13cfowStm2rtz+hfd37CYHygqC+6OCTQoaDpirTAVB9dUTHTK1WVXlIlWVBJxgqD7nbyyNB+XxUBAEAABzMr//zHUnSlRfMLnJPAAeB0RhiW0nF92xz5xuKtbyn+J5t7oRhZlm1Qo2zVHbCOQpNmqVQ40yZkYoi9xo4DK3PO8txHBglkil19cbcEKgjs0yHQZ09cTcI6uqNDbhSmOQMB6soDbohzzFTqlTpBkBhVZUFPSFQmPmBAAAACu6Nd51RHwRGGCn4rX+Usu2UEm07PfMOxVv/JjvpTBLrC5cp1DhTVWc0pcOhWfJX1Ba51wCGoj+W1N6uhN58v82t/OlMV/505M0R1NufGPQYQb/PDXlqKsKaOblSlWXp0Kc8lA6BwqosC6oiEmQ4GAAAAAAPAqNRwLZtJTv3eIaVxVrelx3vlyQZgbBCE2eoYsFFzrCySbPkr2pgYlhghLJtW/u6Y2rZ26tdbb1qaetVa1ufWtqcx509mauDtXr2K48E3BBo+qQKVZeF0pVA2TmCMkPDSkJ+PgMAAAAAHDICoxEo2bMvZ1hZ+nL2fV3ORtOvUP10lc8715mUunGWAhMmM3s8MMIkkint2ZcOgfb2qqWtT7vSgdCu9j7F4pbb1mdIE6pKNLG2VKef0KiJtRF179ulk+cd54ZAFaVB+akCAgAAADBMCIyKzIr2ei9nv/OvsrrbnI2GT4EJUxSZdarCk5xwKFh/lAx/oLidBkaKUHGHWfb2J9IhULY6qGWvEwjt3den3IuGBQOmJtZG1FhbqpOPrdfE2ogm1paqcUKp6qsjCvi9YVBzc7fmz64f5lcEAACAYimPcGVqjCwERsMolYjJ3PeBOjbsdMOh5L5d7nZ/9USFp81RqHGWwpNmKdgwQ75guIg9Bka4sx8/oodPpWzt6446gVDO8DEnGOpTd1/c076iNKjG2lLNOapGExdMUWNtqSbWlmpibUQ1FWGGiAEAAGC/bv3iwmJ3AfAgMBpGLQ/foYrt76hdklleq9CkWSo/6Xxn3qHGmTJLyordRWDcSSQttbb3aVd6yJgzhKwvPa9Qr+LJlNvWZ0gTqiNqrI3oIyc2OoHQhNJ0MBRRJEz1HwAAAICxgcBoGNWe/3lt3viGjj/7IvnLqovdHWD0+9MtzvLk7x2wWU9/Ij2PUK87hCwTDu3t6JedM3QsFDTVWFuqSRNKteC4emfYWG2pJk6IqL46wjxCAAAAOCJ+uXaTJOnqTxxf5J4ADgKjYRSeOkeJ3X2ERUCh7H1NkjN0rL0rmjPBdDYU2tXWq+4+76Xnq8pCmlgb0QlH17rVQZlgqKo8xNAxAAAADLu3t7YXuwuAB4ERgBEnlbLVF02oqzeurr64unvj6uqNq7vPWWZuV/o6lUymtPyWNUrkDh3zGaqvdq46dtZJk9OTSzuhUEMNQ8cAAAAA4GAIjAAcUVbKVk+fN/AZLADqzmnT3Rv3XGEsl89nqKI06FxFokEKBf1actbRasy56tiEqhKGjgEAAADAYSAwAjBkSSvlhD1DCX7Sj3ujCc8cQbn8pk8VpUH3dtTECicMSgdCudsyjyNhf3bI2PpKSdKXFp8wTO8AAAAAAIwPQwqMtmzZouXLl6ujo0NVVVVauXKlpk+f7mnT1tamW265RS0tLUomkzr99NP1T//0T/L7/brnnnv08MMPq76+XpI0f/58rVixouAvBsDQxRPWAYOe3FAos60vmtzv8UJBMxvyRIKqr454gp7y0uy2zP1w0Dy8+YIiUw59XwAAAGAEmVBZUuwuAB5DCoxWrFihq666Sk1NTXrqqad022236cEHH/S0ue+++zRz5kz97Gc/UyKR0FVXXaXnnntOH//4xyVJS5cu1c0331z4VwBgUF29cW3f3a3tu3u0Y3ePtu/uUVtXvxsCRePWfvctCfk9Ac/kujL3cXnEWZcbApWXBhUKmMP46tI+8tDwPycAAABwBHz9cwuK3QXA46CBUVtbmzZt2qQHHnhAkrRkyRJ9+9vfVnt7u2pqatx2hmGot7dXqVRK8XhciURCDQ0NR67nAJS0Umpt79P21m7t2OOEQplbd1/cbec3fZpUV6r66oiOmlgxaNVP7lCwgJ/5fwAAAABgPDtoYNTS0qKGhgaZplM9YJqm6uvr1dLS4gmMrr/+et14440666yz1N/fr8997nNasCCbkK5du1avvPKK6urqdOONN+qUU045Ai8HGJt6+uI5YVA2HGrZ2ysrZ3boqrKQJteX6SMnNmpKfZmm1Jdrcl2Z6msiMn1j8FLxzf+vs1zwo+L2AwAAADhM9z/5F0nSsqXzitwTwFGwSa+fffZZzZ49W7/85S/V29urZcuW6dlnn9XFF1+sK6+8Utdee60CgYBeffVVXX/99Vq3bp2qq6uHfPyNGzcWqqtF19zcXOwuYIRpbm6WlbLV0WuprSuhvV3J9M253xfLvWS8VFPm14QKv848rkwTKvyqrfBrQkVAJcFMZZAlqVPq69TOrdLOrUV5WUfcsdteliRt1tj8meKzAvk4JzAYzgvk45zAYDgvRr433tktSWpujh+kZWFwTkCSp9An30EDo8bGRrW2tsqyLJmmKcuytHv3bjU2NnraPfTQQ7rzzjvl8/lUXl6u888/Xxs2bNDFF1+suro6t92iRYvU2Niod999VwsXLhzyi5g7d65CodCQ249Uzc3NB/wHwdjX259IVwg58wtt3LxdPXG/Wvb2Kmllg6GK0qCm1Jdp9gynUsipGCpTQ01EJpeMd+wrl3TgD7nRis8K5OOcwGA4L5CPcwKD4bwYHR7b8Iqk4fndlnMCQ3HQwKi2tlZz5szRmjVr1NTUpDVr1mjOnDme4WiSNGXKFL300ks68cQTFY/H9dprr+mCCy6QJLW2trrzGb311lvasWOHZsyYcQReDjAyWClbe/b1ucPIMgHRjt092tcdc9uZPkNVZaZmTa3UwuMbNLkuPYysvkwVpcEivgIAAAAAwHg2pCFpt99+u5YvX65Vq1apoqJCK1eulCQtW7ZMN910k+bNm6dbb71VK1as0KWXXirLsnT66afrs5/9rCTp7rvv1ptvvimfz6dAIKC77rrLU3UEjFZ90YQ7n9COnHBox54eJZLZaqGykoCm1JdpwXENmlJfpsnpaqGJtaV640+vk+4DAAAAAEaUIQVGM2fO1OrVqwesv//++93706ZNc6+kli8TMAGjUSpla29Hv1MttMd7mfr2rqjbzmdIE2tLNbm+TKfMrk9XCzm3itKgDGMMTjpdbOXHFrsHAAAAQEFMrisrdhcAj4JNeg2MdrZta/e+fr2/o0Nbdnbpg/Sl6nfs6VU8YbntSsN+Takv18nH1rmB0OS6MjVOKFXAbxbxFYxDp/+s2D0AAAAACuKrl59c7C4AHgRGGJeslK0du7v1/o5OvbejU++nbz39CUmSYUgNNRFNqS/XibPqPMPIqspCVAsBAAAAAMY0AiOMefGEpb+1dLmh0Ps7OrWlpcutGgr4fTqqsUKLTpqkoydX6ujJlZreWKFwkB+PEW/DNc6SSiMAAACMcveu/pMkKo0wcvCNGGNKT39CW9yqoQ69v6NTH+zuUSplS3KGk82YXKmLzzxKMydX6ujJVZpSXyY/l6kfnbo3F7sHAAAAQEHs2NNT7C4AHgRGGJVs21Z7V9StGMoMK2tt73Pb1FSEdPTkKp0+t1FHT67UzMmVaqiJMJwMAAAAAICDIDDCiJdK2drV1uuZa+j9HZ3q6Im5bRonlGrW1CpddMZR7rCy6vJwEXsNAAAAAMDoRWCEESWRTOmD1m69v6PDDYi27OxSfywpSTJ9hqZNLNeCOfXpqqEqzZhUoUg4UOSeAwAAAAAwdhAYoWj6Y0n9bWdXNhza2amtLd1KWilJUjhoasakSp1/6lS3auioieVcuh5Z1UwICAAAgLHh6EmVxe4C4EFghGHR2RPzDCd7b0endu7tke3MRa3ySFAzp1Sq6Zyj3XCocUKZTB/zDeEAFvyo2D0AAAAACmLZ0nnF7gLgQWCEgrJtW3v29efNN9ShvZ1Rt01ddYmOnlSpc0+ZnA6HqjShKsxk1AAAAAAAjBAERjgssYSl1/7Sove2d6TnG+pUd19CkuQzpMn1ZTrh6AnuVcpmTK5URWmwyL3GmPE/f+csP/JQcfsBAAAAHKYf/qpZkvT1zy0ock8AB4ERDsuPH3ldL72+QwG/T0c1VugjJ05yh5RNb6xQOMgphiOob3uxewAAAAAUxN7O/mJ3AfDg2zwO2dZdXXr5Tzu09NyZuvoTx8tv+ordJQAAAAAAUAB8w8che+Q/NyscNHX5x44lLAIAAAAAYAzhWz4OydZdXXrljR1actbRzEkEAAAAAMAYw5A0HJJMddHSc2cVuysYzyacWeweAAAAAAVx3FE1xe4C4EFghA8tU130mfOPoboIxXXy94rdAwAAAKAgrv7E8cXuAuDBkDR8aFQXAQAAAAAwtg0pMNqyZYuuuOIKXXTRRbriiiv0t7/9bUCbtrY2XXPNNbr00kt1ySWX6Pbbb1cymZQkWZalO+64Q4sXL9YFF1yg1atXF/RFYPhsY+4ijCQvf9q5AQAAAKPcnb/4ve78xe+L3Q3ANaTAaMWKFbrqqqv0u9/9TldddZVuu+22AW3uu+8+zZw5U08//bR++9vf6s0339Rzzz0nSXr66ae1bds2Pffcc3rkkUd0zz33aPv27YV9JRgWVBdhRIm1OTcAAABglOvui6u7L17sbgCugwZGbW1t2rRpk5YsWSJJWrJkiTZt2qT29nZPO8Mw1Nvbq1QqpXg8rkQioYaGBknSunXrdPnll8vn86mmpkaLFy/Ws88+ewReDo6kbbu69DLVRQAAAAAAjHkHnfS6paVFDQ0NMk1TkmSapurr69XS0qKamuws7tdff71uvPFGnXXWWerv79fnPvc5LViwwD3GpEmT3LaNjY3atWvXh+roxo0bP1T7kay5ubnYXTgkj73apoBpaHplz6h9DSMV7+ehOba7W5K0eYy+f5wXyMc5gcFwXiAf5wQGw3kx8nWnf7cdrn8rzglIcnObwRTsKmnPPvusZs+erV/+8pfq7e3VsmXL9Oyzz+riiy8uyPHnzp2rUChUkGMVU3Nz8wH/QUaqbbu69Oa27frM+cfonEXM3l9Io/WcGBH2lUs68IfcaMV5gXycExgM5wXycU5gMJwXo8NjG16RNDy/23JOYCgOOiStsbFRra2tsixLkjOB9e7du9XY2Ohp99BDD+mTn/ykfD6fysvLdf7552vDhg3uMXbu3Om2bWlp0cSJEwv5OnCEZeYuajpnZrG7AmQ1fMy5AQAAAKPcScfU6aRj6ordDcB10MCotrZWc+bM0Zo1ayRJa9as0Zw5czzD0SRpypQpeumllyRJ8Xhcr732mo455hhJ0sUXX6zVq1crlUqpvb1d69ev10UXXVTo14IjJHfuosqy0V/lhTFk3v92bgAAAMAod+UFs3XlBbOL3Q3ANaSrpN1+++166KGHdNFFF+mhhx7SHXfcIUlatmyZ/vKXv0iSbr31VjU3N+vSSy/V0qVLNX36dH32s5+VJDU1NWnKlCm68MIL9dnPflY33HCDpk6deoReEgqN6iIAAAAAAMaXIc1hNHPmTK1evXrA+vvvv9+9P23aND3wwAOD7m+aphsyYXTJVBd95vxjqC7CyPPiJc7yvGeK2w8AAADgMK24/zVJ0h3LzixyTwBHwSa9xthEdRFGNKu/2D0AAAAACiKesIrdBcBjSEPSMD4xdxEAAAAAAOMTgRH2i+oiAAAAAADGJwIjDIrqIgAAAAAAxi/mMMKgqC7CqDB5SbF7AAAAABTEaXMmFrsLgAeBEQbgymgYNeb8Q7F7AAAAABTEZefNKnYXAA+GpGEAqosAAAAAABjfCIzgwdxFGFXWf9S5AQAAAKPcLate0S2rXil2NwAXgRE8HllPdREAAAAAAOMdgRFcH7R26+U/7dAnFlFdBAAAAADAeEZgBNev//MdhQKmlp5LdREAAAAAAOMZgREkZauLmLsIAAAAAAD4i90BjAxUF2FUmvbZYvcAAAAAKIizTppc7C4AHgRGcKuLPn3eMVQXYXQ59vpi9wAAAAAoiE8smlHsLgAeDEkD1UUYvZJ9zg0AAAAY5aLxpKLxZLG7AbgIjMY55i7CqPZfH3duAAAAwCh3x7//X93x7/+32N0AXARG4xzVRQAAAAAAIN+Q5jDasmWLli9fro6ODlVVVWnlypWaPn26p803vvENvfPOO+7jd955Rz/5yU/0sY99TPfcc48efvhh1dfXS5Lmz5+vFStWFO5V4JAwdxEAAAAAABjMkAKjFStW6KqrrlJTU5Oeeuop3XbbbXrwwQc9be666y73/ttvv62rr75aZ599trtu6dKluvnmmwvUbRQC1UUAAAAAAGAwBx2S1tbWpk2bNmnJkiWSpCVLlmjTpk1qb2/f7z6PPfaYLr30UgWDwcL1FAXF3EUAAAAAAGB/Dlph1NLSooaGBpmmKUkyTVP19fVqaWlRTU3NgPbxeFxPP/20fvGLX3jWr127Vq+88orq6up044036pRTTinMK8AhoboIY8LRXyx2DwAAAICC+Nip04rdBcDDsG3bPlCDjRs36uabb9batWvddR//+Mf1z//8zzrhhBMGtF+3bp3uv/9+PfHEE+66PXv2qKqqSoFAQK+++qr+4R/+QevWrVN1dfVBOxiLxbRx48YP85pwEHs6E/rJ2laddXy5Fp9cWezuAAAAAACAIliwYMF+tx20wqixsVGtra2yLEumacqyLO3evVuNjY2Dtn/88cf16U9/2rOurq7Ovb9o0SI1Njbq3Xff1cKFC4f6GjR37lyFQqN/6FRzc/MB/0GGwz8/9EeFg6auvWIRw9FGgJFwToxa0b3OMjyhuP04AjgvkI9zAoPhvEA+zgkMhvNidOjsiUnSsHxH45zAUBx0DqPa2lrNmTNHa9askSStWbNGc+bMGXQ42q5du9Tc3KxLL73Us761tdW9/9Zbb2nHjh2aMWPG4fYdh4C5izCmvPIZ5wYAAACMct9/8A/6/oN/KHY3ANeQrpJ2++23a/ny5Vq1apUqKiq0cuVKSdKyZct00003ad68eZKkJ554Quedd54qK73DnO6++269+eab8vl8CgQCuj0RkgsAACAASURBVOuuuzxVRxg+j/znZuYuAgAAAAAABzSkwGjmzJlavXr1gPX333+/5/F111036P6ZgAnF9UFrt17603Z9+rxjqC4CAAAAAAD7ddAhaRg7qC4CAAAAAABDQWA0TmSqiz6xaAbVRQAAAAAA4ICGNCQNo1+muuhTH51V7K4AhXPM4MNgAQAAgNHm42dyYSiMLARG40Cmuuiyj86iughjy1FXFLsHAAAAQEGcfcrkYncB8GBI2jhAdRHGrN4PnBsAAAAwyu3Z1689+/qL3Q3ARWA0xjF3Eca01z7v3AAAAIBR7u7/aNbd/9Fc7G4ALgKjMY7qIgAAAAAA8GERGI1hVBcBAAAAAIBDQWA0hlFdBAAAAAAADgWB0RhFdREAAAAAADhU/mJ3AEcG1UUYF477erF7AAAAABTEp87luxtGFgKjMShTXXTZR2dRXYSxbcqlxe4BAAAAUBALT5hY7C4AHgxJG4MeXU91EcaJrnecGwAAADDKbd/dre27u4vdDcBFYDTGfNDarZdeZ+4ijBO//4pzAwAAAEa5nzz2hn7y2BvF7gbgIjAaYx5dv1lBqosAAAAAAMBhIDAaQ6guAgAAAAAAhcCk12PIo+s3K0B1EQCMWV1dXdq9e7cSiUSxu4IRwu/366233ip2N0adQCCg+vp6VVRUFLsrAACMWARGY0SmuuhTXBkNAMas1tZWTZ48WSUlJTIMo9jdwQjQ29ur0tLSYndjVLFtW/39/dqxY4ckERoBALAfQwqMtmzZouXLl6ujo0NVVVVauXKlpk+f7mnzjW98Q++8k71a0TvvvKOf/OQn+tjHPibLsvSd73xHL7/8sgzD0DXXXKPLL7+8oC9kvKO6COPS3H8qdg+AYeP3+zV58mRFIpFidwUY1QzDUCQS0eTJk7Vz504CIwAjxhWLjy12FwCPIQVGK1as0FVXXaWmpiY99dRTuu222/Tggw962tx1113u/bfffltXX321zj77bEnS008/rW3btum5555TR0eHli5dqjPPPFNTpkwp4EsZv6guwrg1cXGxewAMG9u2VVJSUuxuAGNGSUkJwzsBjCgnH1tf7C4AHged9LqtrU2bNm3SkiVLJElLlizRpk2b1N7evt99HnvsMV166aUKBoOSpHXr1unyyy+Xz+dTTU2NFi9erGeffbZALwFUF2Hc2vcn5waMA4ZhMAwNKCB+ngCMNO/v6NT7OzqL3Q3AddAKo5aWFjU0NMg0TUmSaZqqr69XS0uLampqBrSPx+N6+umn9Ytf/MJzjEmTJrmPGxsbtWvXrg/V0Y0bN36o9iNZc3NzwY61pzOh/369VR85rkx/fWfsvEfjTSHPifHk2G3XSJI2T/tZkXtyZHBeIJff71dvb2+xu4ERiPPi0MXj8TH5WTsWXxMOH+fFyPfA+t2SpP9n8fBUGnFOQJIWLFiw320Fn/R6/fr1mjRpkubMmVPQ486dO1eh0OgfbtXc3HzAf5AP64e/alYwYOq6K89iONooVehzYlzZVy7pwB9yoxXnBfK98cYbTG6MAZj0+vAEg0GddNJJxe5GQfH/BwbDeTE6PLbhFUnD87st5wSG4qCBUWNjo1pbW2VZlkzTlGVZ2r17txobGwdt//jjj+vTn/70gGPs3LlTJ554oqSBFUc4NMxdBAAYjWbPnn3QNpMnT9YLL7xwyM/xm9/8Rrfccouef/555kwEAAA4BAcNjGprazVnzhytWbNGTU1NWrNmjebMmTPocLRdu3apublZd999t2f9xRdfrNWrV+vCCy9UR0eH1q9fr1/96leFexXjFHMXAQBGo0ceecTz+Ktf/apmz56tG2+80V2XmQfxUH30ox/VI488ovp6JhAFAAA4FEMaknb77bdr+fLlWrVqlSoqKrRy5UpJ0rJly3TTTTdp3rx5kqQnnnhC5513niorKz37NzU16Y033tCFF14oSbrhhhs0derUQr6OcYfqIgDAaHXyySd7HgeDQVVXVw9Yn8uyLNm2Lb9/aKPpa2pqBv3j1lhn27YSicRhB24AAABD+q1r5syZWr169YD1999/v+fxddddN+j+pmnqjjvuOITuYX+oLgIknXRnsXsA4AiZPXu2rr32WpWWlurXv/61Wlpa9Pjjj2vmzJn64Q9/qP/5n//Rjh07FIlENG/ePP3jP/6jZs6c6e4/2JC0888/X/Pnz9d5552ne++9Vy0tLTr66KN166236tRTTz1gf7Zu3ap7771Xzc3N2rt3r+rq6nTWWWfpa1/72oA/lP3+97/XT3/6U/35z3+WZVmaNm2aPv/5z+vyyy932zz66KP6j//4D7333nsKhUKaPXu2vva1r2n+/PnasGGDvvCFL+jBBx/U6aeffsDX9IlPfEKnnnqqzjjjDP37v/+7PvjgA/3oRz/SBRdcoB//+Md68cUXtXXrVgUCAfc58oO59vZ2t21bW5tqa2u1cOFCffe739WLL76om266SU899ZSOO+44z36f//znFYvF9Oijj36If1kAwP584ZLji90FwKPgk17jyNu+m+oiQJJU95Fi9wAoqhf+uE3/+fttRe3DBQun6fxTpx2RY//mN7/R1KlTdfPNN6ukpET19fWKx+Pq7e3Vddddp7q6OnV2durhhx/WlVdeqXXr1qmuru6Ax2xubtaWLVv093//9wqFQvrXf/1XXXvttXrhhRdUUVGx3/0y8zfeeuutqqys1AcffKB/+7d/0zXXXOMZYrd+/XrddNNNmj9/vr71rW+purpa7777rnbu3Om2WblypX7+85/rM5/5jG688Ub5fD796U9/UktLyyG9Txs2bNDbb7+tr371q6qtrdXkyZMlSa2trbr66qs1ceJE9ff3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DMBgMLBlyxYAtmzZgr29Pf369QNyq2TGjh3LV199xdixY1m3bh0ff/yxuZLm9gRDYS5cuADkXmp/uzufA0ybNo0PP/yQ559/nrCwMD7++GNmzpxZ7GPmSU9Pp2bNmvku5apbt655++1q1apl8Tzvdfc69rVr13jppZf46aef+Mtf/sL777/Pxx9/zLPPPmu+BAwgLS2NmjVr8thjj911X2lpadSvX79oJ1dEBSW6li5dysqVKxkwYABvvfUWERERrFy5EvjvuaalpQEUGs+gQYPIzs5m69atAOZqo5JMeomIPGzbv4ln+zfx1g5DxKzE7pIm90fVRSIiUlE5OTnRuXNnIiMjGTduHNu3b+eZZ56hZs2aAJw5c4bDhw+zaNEiAgICzK/76quvin2sevXqAblVSVWrVjW3p6SkWPS7ceMGMTExjB8/nhdffNHcfvz48WIfM0/NmjVJT0/Pt/7PxYsXzdsf1A8//EBCQgLvv/8+bdu2Nbe/9957Fv2MRiPp6elcv379rkkjo9FIcnLyPY9nb29vkYjKk5aWli/hBRR4KV1UVBQBAQEEBweb27799tt8sQCFxmM0Gunbty8bN27E29ubf//738ybN++erxEREZF7U4WRFam6SEREKrqBAweSkJDA0qVLuXTpEgMHDjRvy7srWd6dViF3bZrIyMhiH6dly5YYDAZ27Nhh0R4VFWXxPCsri+zsbCpVsvxOraC7jdnZ2RWp4qh9+/bk5OTw2WefWbRHRkZiZ2dX6BpIRZGZmWmOKU96ejoxMTEW/bp06YLJZCpwqYHb+8TFxfHTTz/dtU/Dhg1JSUkhNTXV3HbmzBni44v+zfj169fzvc+bN2+2eO7i4kLDhg2JiIiwuKNcQYYPH87x48eZMWMGNWrUoH///kWORURERPJThZEVqbpIREQqOh8fH6pXr054eDh16tSha9eu5m2urq40bNiQv//97xgMBipVqsS6devu6ziurq74+fmxfPlycnJy8PT0ZO/evezevduiX40aNfDy8mLt2rXUq1cPo9HIpk2bCqxweeKJJ/jPf/7DV199Rd26dTEajTRq1Chfv27dutGmTRtmzZpFamoqTz75JLt27SIiIoKXX375rndXK468hbnnzJlDSEgIGRkZrFmzBqPRyJUrV8z9OnbsiK+vLwsWLCApKYmOHTty69YtYmNj6dGj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//jHP6hfv75Fm62trZWiERERESm7lDASERGRCsPd3Z0mTZpYOwwRERGRMk9rGImIiIiQe9mam5sbsbGxBAcH07p1azp06MCcOXO4fv26Rd8LFy4wZcoUOnTogIeHB/7+/mzdujXfPs+ePcvkyZPp0qULHh4e9OrVi3nz5uXrd/ToUYYPH06rVq34/e9/z4YNGyy2//bbb0ydOhVvb288PDzw9vbm5ZdfJiUlpWTfBBEREZH/pwojERERqTCys7O5deuWRZvBYMBg+O93aJMnT6Zv374MHz6cuLg4Vq9eTWZmJgsWLAAgIyOD559/nvT0dCZNmkT9+vX59NNPmTJlCtevX2fIkCFAbrJo8ODBVKlShZCQEJo0aUJSUhJ79+61OP7Vq1f5y1/+wosvvsi4cePYvHkzs2fPxsXFhY4dOwIwZcoUEhMTmTJlCs7Ozly8eJFvvvmGzMzMh/l2iYiISAWmhJGIiIhUGH379s3X1qNHD9566y3z827dujF16lQAvL29sbGxYfny5bz88su4uLiwefNmTp8+zfr16+nQoQMA3bt3JyUlhWXLljFo0CBsbW1ZsWIFN27cYOvWrTg5OZn3P3DgQIvjX7t2jVmzZpmTQ+3atWPv3r1ERUWZ23744QcmTpzIgAED7nkuIiIiIiVFCSMRERGpMFatWmWRvAFwcHCweH5nIqZ///4sW7aMuLg4XFxciI2NxcnJyZwsyjNgwACmTZvGL7/8gpubG/v27aNHjx75jnenKlWqmBNDAPb29jRt2pTExERzm4eHB//85z8xmUx07NiRZs2aYWNjU6xzFxERESkOJYxERESkwnjyyScLXfS6bt26Fs/r1KkDQHJyMgDp6ek4Ojre9XXp6ekApKWl5bsjW0HuTFhBbtIoKyvL/HzZsmWsXLmSd999l9dffx1HR0eGDh1KcHCwxeV0IiIiIiVFMwwRERGR21y8eNHied7C0nmVQjVr1szX5/bX1axZEwCj0WhOMj2oOnXqMGvWLPbs2cOOHTv4wx/+wIoVK/jwww9LZP8iIiIid1LCSEREROQ2O3bssHgeFRWFwWCgVatWALRv357z589z4MABi37btm2jTp06PPHEEwB06dKFr776igsXLpRofK6urkyaNImaNWty4sSJEt23iIiISB5dkiYiIiIVxrFjx7h06VK+dg8PD/PPu3fvZuHChXh7exMXF8eqVasIDAykadOmQO6i1evXr2fChAlMnDgRJycnIiMj2bdvH3PnzsXW1haACRMmsGvXLoYOHcqYMWNo3LgxycnJ7Nmzh8WLFxc55itXrhAUFIS/vz+urq7Y2dkRExNDeno6Xbp0ebA3REREROQulDASERGRCuN//ud/Cmz/5ptvzD+/8cYbhIWF8eGHH2JnZ8fgwYPNd00DqFq1Kv/617944403WLx4MdeuXcPFxYVFixYREBBg7teoUSM++ugjli1bxpIlS8jIyMDJyYlevXoVK+bKlSvz1FNPERERQWJiIjY2Nri4uLB48WJ8fHyK+Q6IiIiIFI2NyWQyWTsIEREREWvbvHkz06ZNIzo6utCFsUVERETKO61hJCIiIiIiIiIiFpQwEhERERERERERC7okTURERERERERELKjCSERERERERERELChhJCIiIiIiIiIiFpQwEhERERERERERC0oYiYiIiIiIiIiIBSWMRERERERERETEwv8B33go0fQkNW8AAAAASUVORK5CYII=\n","text/plain":["<Figure size 1440x576 with 2 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"ImheYrtKCaO7","papermill":{"duration":0.140565,"end_time":"2021-01-20T23:41:36.235070","exception":false,"start_time":"2021-01-20T23:41:36.094505","status":"completed"},"tags":[]},"source":["# Model evaluation\n","\n","Now we can evaluate the performance of the model, first, we can evaluate the usual metrics like, `accuracy`, `precision`, `recall`, and `f1-score`, `scikit-learn` provides the perfect function for this `classification_report`.\n","\n","We are evaluating the model on the `OOF` predictions, it stands for `Out Of Fold`, since we are training using `K-Fold` our model will see all the data, and the correct way to evaluate each fold is by looking at the predictions that are not from that fold.\n","\n","## OOF metrics"]},{"cell_type":"markdown","metadata":{"id":"I_QvO8rPCaO7","papermill":{"duration":0.142773,"end_time":"2021-01-20T23:41:36.524904","exception":false,"start_time":"2021-01-20T23:41:36.382131","status":"completed"},"tags":[]},"source":["#### I am still having some problems to get the real model `OOF` scores while using `TPU Pods`, so the results here and the confusion matrix are just placeholders."]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:41:36.817847Z","iopub.status.busy":"2021-01-20T23:41:36.816550Z","iopub.status.idle":"2021-01-20T23:41:36.871365Z","shell.execute_reply":"2021-01-20T23:41:36.870279Z"},"id":"q7TfhkICCaO7","papermill":{"duration":0.205034,"end_time":"2021-01-20T23:41:36.871548","exception":false,"start_time":"2021-01-20T23:41:36.666514","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613480871889,"user_tz":-540,"elapsed":7542,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"4849f275-f5e6-4741-c471-2859f331e88b"},"source":["y_true = np.concatenate(oof_labels)\n","y_true = np.argmax(y_true, axis=-1)\n","y_pred = np.concatenate(oof_pred)\n","\n","print(classification_report(y_true, y_pred, target_names=CLASSES))"],"execution_count":34,"outputs":[{"output_type":"stream","text":["                              precision    recall  f1-score   support\n","\n","    Cassava Bacterial Blight       0.69      0.68      0.68      1086\n","Cassava Brown Streak Disease       0.84      0.83      0.83      2189\n","        Cassava Green Mottle       0.85      0.80      0.82      2386\n","      Cassava Mosaic Disease       0.96      0.97      0.96     13158\n","                     Healthy       0.76      0.75      0.76      2576\n","\n","                    accuracy                           0.90     21395\n","                   macro avg       0.82      0.81      0.81     21395\n","                weighted avg       0.90      0.90      0.90     21395\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"pIAJafCnCaO7","papermill":{"duration":0.1407,"end_time":"2021-01-20T23:41:37.153525","exception":false,"start_time":"2021-01-20T23:41:37.012825","status":"completed"},"tags":[]},"source":["# Confusion matrix\n","\n","Let's also take a look at the confusion matrix, this will give us an idea about what classes the model is mixing or having a hard time."]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:41:37.451948Z","iopub.status.busy":"2021-01-20T23:41:37.451220Z","iopub.status.idle":"2021-01-20T23:41:37.902193Z","shell.execute_reply":"2021-01-20T23:41:37.902770Z"},"id":"dw2F8Wk2CaO7","papermill":{"duration":0.608362,"end_time":"2021-01-20T23:41:37.902957","exception":false,"start_time":"2021-01-20T23:41:37.294595","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1613480872266,"user_tz":-540,"elapsed":7913,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"1496458d-f4c5-4303-c27b-18af30562397"},"source":["fig, ax = plt.subplots(1, 1, figsize=(20, 12))\n","cfn_matrix = confusion_matrix(y_true, y_pred, labels=range(len(CLASSES)))\n","cfn_matrix = (cfn_matrix.T / cfn_matrix.sum(axis=1)).T\n","df_cm = pd.DataFrame(cfn_matrix, index=CLASSES, columns=CLASSES)\n","ax = sns.heatmap(df_cm, cmap='Blues', annot=True, fmt='.2f', linewidths=.5).set_title('Train', fontsize=30)\n","plt.show()"],"execution_count":35,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x864 with 2 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"AaZVX_ZhCaO7","papermill":{"duration":0.14275,"end_time":"2021-01-20T23:41:38.189478","exception":false,"start_time":"2021-01-20T23:41:38.046728","status":"completed"},"tags":[]},"source":["# Visualize predictions\n","\n","Finally, it is a good practice to always inspect some of the model's prediction by looking at the data, this can give an idea if the model is getting some predictions wrong because the data is really hard, of if it is because the model is actually bad.\n","\n","\n","### Class map\n","```\n","0: Cassava Bacterial Blight (CBB)\n","1: Cassava Brown Streak Disease (CBSD)\n","2: Cassava Green Mottle (CGM)\n","3: Cassava Mosaic Disease (CMD)\n","4: Healthy\n","```\n","\n","\n","## Train set"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:41:38.486711Z","iopub.status.busy":"2021-01-20T23:41:38.478610Z","iopub.status.idle":"2021-01-20T23:42:07.973278Z","shell.execute_reply":"2021-01-20T23:42:07.973946Z"},"id":"ExEWWtxyCaO8","papermill":{"duration":29.642469,"end_time":"2021-01-20T23:42:07.974121","exception":false,"start_time":"2021-01-20T23:41:38.331652","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1wA0eiFpc6kOqU9H9Qi0VhoHIQoTwRhPX"},"executionInfo":{"status":"ok","timestamp":1613480909279,"user_tz":-540,"elapsed":44917,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"c0d6e25d-7e60-4495-f96d-11ce84df3457"},"source":["train_dataset = get_dataset(TRAINING_FILENAMES, ordered=True)\n","x_samp, y_samp = dataset_to_numpy_util(train_dataset, 18)\n","y_samp = np.argmax(y_samp, axis=-1)\n","\n","x_samp_1, y_samp_1 = x_samp[:9,:,:,:], y_samp[:9]\n","samp_preds_1 = model.predict(x_samp_1, batch_size=9)\n","display_9_images_with_predictions(x_samp_1, samp_preds_1, y_samp_1)\n","\n","x_samp_2, y_samp_2 = x_samp[9:,:,:,:], y_samp[9:]\n","samp_preds_2 = model.predict(x_samp_2, batch_size=9)\n","display_9_images_with_predictions(x_samp_2, samp_preds_2, y_samp_2)"],"execution_count":36,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:42:08.485006Z","iopub.status.busy":"2021-01-20T23:42:08.479584Z","iopub.status.idle":"2021-01-20T23:42:08.490084Z","shell.execute_reply":"2021-01-20T23:42:08.489432Z"},"id":"h9CeTJAYKYQd","papermill":{"duration":0.271568,"end_time":"2021-01-20T23:42:08.490212","exception":false,"start_time":"2021-01-20T23:42:08.218644","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613480910326,"user_tz":-540,"elapsed":45960,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"0e8d2228-029c-40fc-f7fc-3f1b3cbc1725"},"source":["\n","save_data=True# You can immediately create a kaggle dataset from your models\n","if COLAB and save_data:\n","  \n","    import json\n","\n","\n","    \n","    data = {\"title\": \"Cassava Leaf Disease\", \n","        \"id\": \"aikhmelnytskyy/CassavaLeafDisease\", \n","        \"licenses\": [\n","                     {\n","                         \"name\": \"CC0-1.0\"\n","                      }\n","                     ]}\n","    \n","\n","    # for kaggle api Connection\n","    \n","    !kaggle datasets init -p /content/drive/MyDrive/Colab Notebooks/Cassava/\n","    \n","    with open(\"/content/drive/MyDrive/Colab Notebooks/Cassava/dataset-metadata.json\", \"w\", encoding=\"utf-8\") as file:\n","        json.dump(data, file)\n","    \n","    #if new dataset\n","    !kaggle datasets create -p /content/drive/MyDrive/Models/Cassava/\n","    #If you’d like to upload a new version of an existing dataset\n","    #!kaggle datasets version -p /content/drive/MyDrive/Models/Cassava/ -m \"Your message here\""],"execution_count":37,"outputs":[{"output_type":"stream","text":["Traceback (most recent call last):\n","  File \"/usr/local/bin/kaggle\", line 5, in <module>\n","    from kaggle.cli import main\n","  File \"/usr/local/lib/python3.6/dist-packages/kaggle/__init__.py\", line 23, in <module>\n","    api.authenticate()\n","  File \"/usr/local/lib/python3.6/dist-packages/kaggle/api/kaggle_api_extended.py\", line 166, in authenticate\n","    self.config_file, self.config_dir))\n","OSError: Could not find kaggle.json. Make sure it's located in /root/.kaggle. Or use the environment method.\n","Traceback (most recent call last):\n","  File \"/usr/local/bin/kaggle\", line 5, in <module>\n","    from kaggle.cli import main\n","  File \"/usr/local/lib/python3.6/dist-packages/kaggle/__init__.py\", line 23, in <module>\n","    api.authenticate()\n","  File \"/usr/local/lib/python3.6/dist-packages/kaggle/api/kaggle_api_extended.py\", line 166, in authenticate\n","    self.config_file, self.config_dir))\n","OSError: Could not find kaggle.json. Make sure it's located in /root/.kaggle. Or use the environment method.\n"],"name":"stdout"}]}]}