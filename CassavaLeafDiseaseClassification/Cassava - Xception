{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.6"},"papermill":{"duration":2705.650201,"end_time":"2021-01-20T23:42:08.938285","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2021-01-20T22:57:03.288084","version":"2.1.0"},"colab":{"name":"Cassava - Xception","provenance":[{"file_id":"1qualeLJp6Z5t34MDn0ooIUJvk_KfurOu","timestamp":1612102725024},{"file_id":"1I0jhqKt_pIruiY4SLNQ1nKa1KTc7aLwW","timestamp":1612026516405},{"file_id":"1k3GJEDIw5B9smNhmCO9z5wJn0_fz7V6e","timestamp":1611698282872},{"file_id":"1luIn2wZfy_fopw5CZhO7tSwz3QfPBeu0","timestamp":1611649047226},{"file_id":"14lxnkhkxhL-leLaM7_ewQrCSbDr617ZZ","timestamp":1611576808109}],"collapsed_sections":[]},"accelerator":"TPU"},"cells":[{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:08.648534Z","iopub.status.busy":"2021-01-20T22:57:08.647654Z","iopub.status.idle":"2021-01-20T22:57:08.650554Z","shell.execute_reply":"2021-01-20T22:57:08.651069Z"},"papermill":{"duration":0.038327,"end_time":"2021-01-20T22:57:08.651252","exception":false,"start_time":"2021-01-20T22:57:08.612925","status":"completed"},"tags":[],"id":"BkVGwREBxGQy","executionInfo":{"status":"ok","timestamp":1612103058614,"user_tz":-540,"elapsed":748,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["EPOCHS = 10 \n","HEIGHT = 512\n","WIDTH = 512\n","HEIGHT_RS = 512\n","WIDTH_RS = 512\n","CHANNELS = 3\n","N_CLASSES = 5\n","N_FOLDS = 5\n","FOLDS_USED = 5\n","ES_PATIENCE = 5"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:08.738880Z","iopub.status.busy":"2021-01-20T22:57:08.723182Z","iopub.status.idle":"2021-01-20T22:57:11.217685Z","shell.execute_reply":"2021-01-20T22:57:11.216355Z"},"id":"YZBauHrJCkn7","papermill":{"duration":2.537229,"end_time":"2021-01-20T22:57:11.217823","exception":false,"start_time":"2021-01-20T22:57:08.680594","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1612103098758,"user_tz":-540,"elapsed":40880,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"03771e67-c228-4cdd-d0f3-c7b9d1e98506"},"source":["\n","import os\n","\n","models_path=''\n","\n","COLAB=True\n","import gc\n","!pip install fsspec\n","!pip install gcsfs \n","!pip install --upgrade --force-reinstall --no-deps kaggle\n","\n","from google.colab import drive\n","drive.mount('/content/drive')\n","%cd '/content/drive/MyDrive/Colab Notebooks/Cassava/'\n","\n","#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n","\n","database_base_path = 'gs://kds-3a224514a454fd9aa3d169e4b992b270639f50cb2562afc9a7f30028'\n","GCS_PATH = 'gs://kds-97ffa76638f61f952661d26d7752f59abdf8f804f1e4794ab6b2e297'\n","GCS_PATH_EXT = 'gs://kds-e707b2c823f5ab0df2845ed8abcbed536d27e188731770fde8a6a95b'\n","GCS_PATH_CLASSES = 'gs://kds-df6e525a58ba9104b570dd12c9abca118c8a509b740d9164e4cd4de3'\n","GCS_PATH_EXT_CLASSES = 'gs://kds-7e729109c97bb2badcc4d6ec847c47b388513403e0c35cfc68b5ae02'\n","\n","\n","# \n","#This is a path to a dataset that changes over time, so you need to constantly update it. To update the path just run the code: \n","#GCS_DS_PATH = KaggleDatasets (). Get_gcs_path ()\n","#print (GCS_PATH)......\n","models_path='/content/drive/MyDrive/Colab Notebooks/Cassava/model/'# I created a folder called Models/Cassava on my Google Drive"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Collecting fsspec\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/ec/80/72ac0982cc833945fada4b76c52f0f65435ba4d53bc9317d1c70b5f7e7d5/fsspec-0.8.5-py3-none-any.whl (98kB)\n","\r\u001b[K     |███▎                            | 10kB 14.4MB/s eta 0:00:01\r\u001b[K     |██████▋                         | 20kB 19.4MB/s eta 0:00:01\r\u001b[K     |██████████                      | 30kB 12.2MB/s eta 0:00:01\r\u001b[K     |█████████████▎                  | 40kB 10.7MB/s eta 0:00:01\r\u001b[K     |████████████████▋               | 51kB 6.2MB/s eta 0:00:01\r\u001b[K     |████████████████████            | 61kB 6.7MB/s eta 0:00:01\r\u001b[K     |███████████████████████▏        | 71kB 6.5MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▌     | 81kB 6.8MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▉  | 92kB 6.7MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 102kB 4.8MB/s \n","\u001b[?25hInstalling collected packages: fsspec\n","Successfully installed fsspec-0.8.5\n","Collecting gcsfs\n","  Downloading https://files.pythonhosted.org/packages/85/75/3d669945d41e5aedd5c4333b9dc6192b7839d2bafd04b75b8222d4e92ae0/gcsfs-0.7.1-py2.py3-none-any.whl\n","Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from gcsfs) (2.23.0)\n","Requirement already satisfied: google-auth>=1.2 in /usr/local/lib/python3.6/dist-packages (from gcsfs) (1.17.2)\n","Requirement already satisfied: fsspec>=0.8.0 in /usr/local/lib/python3.6/dist-packages (from gcsfs) (0.8.5)\n","Collecting aiohttp\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/ad/e6/d4b6235d776c9b33f853e603efede5aac5a34f71ca9d3877adb30492eb4e/aiohttp-3.7.3-cp36-cp36m-manylinux2014_x86_64.whl (1.3MB)\n","\u001b[K     |████████████████████████████████| 1.3MB 7.3MB/s \n","\u001b[?25hRequirement already satisfied: google-auth-oauthlib in /usr/local/lib/python3.6/dist-packages (from gcsfs) (0.4.2)\n","Requirement already satisfied: decorator in /usr/local/lib/python3.6/dist-packages (from gcsfs) (4.4.2)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests->gcsfs) (2020.12.5)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->gcsfs) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->gcsfs) (3.0.4)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests->gcsfs) (1.24.3)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.2->gcsfs) (0.2.8)\n","Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.2->gcsfs) (1.15.0)\n","Requirement already satisfied: setuptools>=40.3.0 in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.2->gcsfs) (51.3.3)\n","Requirement already satisfied: rsa<5,>=3.1.4; python_version >= \"3\" in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.2->gcsfs) (4.7)\n","Requirement already satisfied: cachetools<5.0,>=2.0.0 in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.2->gcsfs) (4.2.1)\n","Collecting multidict<7.0,>=4.5\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/a1/35/b22524d6b9cacfb4c5eff413a069bbc17c6ea628e54da5c6c989998ced5f/multidict-5.1.0-cp36-cp36m-manylinux2014_x86_64.whl (141kB)\n","\u001b[K     |████████████████████████████████| 143kB 19.5MB/s \n","\u001b[?25hCollecting idna-ssl>=1.0; python_version < \"3.7\"\n","  Downloading https://files.pythonhosted.org/packages/46/03/07c4894aae38b0de52b52586b24bf189bb83e4ddabfe2e2c8f2419eec6f4/idna-ssl-1.1.0.tar.gz\n","Requirement already satisfied: typing-extensions>=3.6.5 in /usr/local/lib/python3.6/dist-packages (from aiohttp->gcsfs) (3.7.4.3)\n","Collecting yarl<2.0,>=1.0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/da/08/52b26b44bce7b818b410aee37c5e424c9ea420c557bca97dc2adac29b151/yarl-1.6.3-cp36-cp36m-manylinux2014_x86_64.whl (293kB)\n","\u001b[K     |████████████████████████████████| 296kB 18.7MB/s \n","\u001b[?25hCollecting async-timeout<4.0,>=3.0\n","  Downloading https://files.pythonhosted.org/packages/e1/1e/5a4441be21b0726c4464f3f23c8b19628372f606755a9d2e46c187e65ec4/async_timeout-3.0.1-py3-none-any.whl\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.6/dist-packages (from aiohttp->gcsfs) (20.3.0)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.6/dist-packages (from google-auth-oauthlib->gcsfs) (1.3.0)\n","Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.6/dist-packages (from pyasn1-modules>=0.2.1->google-auth>=1.2->gcsfs) (0.4.8)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.6/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib->gcsfs) (3.1.0)\n","Building wheels for collected packages: idna-ssl\n","  Building wheel for idna-ssl (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for idna-ssl: filename=idna_ssl-1.1.0-cp36-none-any.whl size=3163 sha256=02b9fe0ff8662dae52d6a4928c48dc47ffde0e9a2d60d70dcf76b93757e83bfa\n","  Stored in directory: /root/.cache/pip/wheels/d3/00/b3/32d613e19e08a739751dd6bf998cfed277728f8b2127ad4eb7\n","Successfully built idna-ssl\n","Installing collected packages: multidict, idna-ssl, yarl, async-timeout, aiohttp, gcsfs\n","Successfully installed aiohttp-3.7.3 async-timeout-3.0.1 gcsfs-0.7.1 idna-ssl-1.1.0 multidict-5.1.0 yarl-1.6.3\n","Collecting kaggle\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/99/33/365c0d13f07a2a54744d027fe20b60dacdfdfb33bc04746db6ad0b79340b/kaggle-1.5.10.tar.gz (59kB)\n","\u001b[K     |████████████████████████████████| 61kB 3.7MB/s \n","\u001b[?25hBuilding wheels for collected packages: kaggle\n","  Building wheel for kaggle (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for kaggle: filename=kaggle-1.5.10-cp36-none-any.whl size=73269 sha256=f5b1e81071b426cac41664f2d07c10afce34db5c4a4002793b44af898ed71688\n","  Stored in directory: /root/.cache/pip/wheels/3a/d1/7e/6ce09b72b770149802c653a02783821629146983ee5a360f10\n","Successfully built kaggle\n","Installing collected packages: kaggle\n","  Found existing installation: kaggle 1.5.10\n","    Uninstalling kaggle-1.5.10:\n","      Successfully uninstalled kaggle-1.5.10\n","Successfully installed kaggle-1.5.10\n","Mounted at /content/drive\n","/content/drive/MyDrive/Colab Notebooks/Cassava\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:11.294556Z","iopub.status.busy":"2021-01-20T22:57:11.290187Z","iopub.status.idle":"2021-01-20T22:57:11.298693Z","shell.execute_reply":"2021-01-20T22:57:11.298011Z"},"id":"5V15UaoACh-M","papermill":{"duration":0.051661,"end_time":"2021-01-20T22:57:11.298873","exception":false,"start_time":"2021-01-20T22:57:11.247212","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1612103098993,"user_tz":-540,"elapsed":41113,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["if COLAB:# Prepare the kaggle.json file for use \n","    from google.colab import files\n","    if not os.path.exists('/content/drive/MyDrive/Colab Notebooks/.kaggle/kaggle.json'):\n","        !mkdir ~/content/drive/MyDrive/Colab Notebooks/.kaggle/\n","        if not os.path.exists('/content/drive/MyDrive/Colab Notebooks/.kaggle/kaggle.json'):\n","            files.upload()\n","            !cp kaggle.json ~/content/drive/MyDrive/Colab Notebooks/.kaggle/\n","        else:\n","            !cp '/content/drive/MyDrive/Colab Notebooks/' ~/.kaggle/  \n","        !chmod 600 ~/content/drive/MyDrive/Colab Notebooks/.kaggle/kaggle.json\n"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:11.368941Z","iopub.status.busy":"2021-01-20T22:57:11.367797Z","iopub.status.idle":"2021-01-20T22:57:11.371432Z","shell.execute_reply":"2021-01-20T22:57:11.370752Z"},"id":"urYjsB4IV-t5","papermill":{"duration":0.04238,"end_time":"2021-01-20T22:57:11.371550","exception":false,"start_time":"2021-01-20T22:57:11.329170","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1612103217070,"user_tz":-540,"elapsed":159188,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"11024187-3713-4869-a918-4ba0ad59d469"},"source":["if COLAB:# force TF to 2.2\n","    !pip install -q tensorflow~=2.2.0 tensorflow_gcs_config~=2.2.0\n","    \n","    import requests\n","    import os\n","    import tensorflow as tf\n","    resp = requests.post(\"http://{}:8475/requestversion/{}\".format(os.environ[\"COLAB_TPU_ADDR\"].split(\":\")[0], tf.__version__))\n","    if resp.status_code != 200:\n","      print(\"Failed to switch the TPU to TF {}\".format(version))"],"execution_count":4,"outputs":[{"output_type":"stream","text":["\u001b[K     |████████████████████████████████| 516.2MB 31kB/s \n","\u001b[K     |████████████████████████████████| 399kB 36.5MB/s \n","\u001b[K     |████████████████████████████████| 460kB 52.2MB/s \n","\u001b[K     |████████████████████████████████| 20.1MB 1.3MB/s \n","\u001b[K     |████████████████████████████████| 3.0MB 53.8MB/s \n","\u001b[31mERROR: datascience 0.10.6 has requirement folium==0.2.1, but you'll have folium 0.8.3 which is incompatible.\u001b[0m\n","\u001b[31mERROR: albumentations 0.1.12 has requirement imgaug<0.2.7,>=0.2.5, but you'll have imgaug 0.2.9 which is incompatible.\u001b[0m\n","\u001b[?25h"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"DJLH967uCaOv","papermill":{"duration":0.029839,"end_time":"2021-01-20T22:57:11.431128","exception":false,"start_time":"2021-01-20T22:57:11.401289","status":"completed"},"tags":[]},"source":["## Dependencies"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:21.982695Z","iopub.status.busy":"2021-01-20T22:57:21.981961Z","iopub.status.idle":"2021-01-20T22:57:29.891530Z","shell.execute_reply":"2021-01-20T22:57:29.890624Z"},"id":"-iMoIRz7CaOw","papermill":{"duration":7.952124,"end_time":"2021-01-20T22:57:29.891659","exception":false,"start_time":"2021-01-20T22:57:21.939535","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1612103218170,"user_tz":-540,"elapsed":160286,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["import math, os, re, warnings, random, time\n","import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","from matplotlib import pyplot as plt\n","\n","from sklearn.model_selection import KFold\n","from sklearn.metrics import classification_report, confusion_matrix\n","import tensorflow as tf\n","import tensorflow.keras.layers as L\n","import tensorflow.keras.backend as K\n","from tensorflow.keras import optimizers, Sequential, losses, metrics, Model\n","from tensorflow.keras.callbacks import EarlyStopping\n","def seed_everything(seed=0):\n","    random.seed(seed)\n","    np.random.seed(seed)\n","    tf.random.set_seed(seed)\n","    os.environ['PYTHONHASHSEED'] = str(seed)\n","    os.environ['TF_DETERMINISTIC_OPS'] = '1'\n","\n","seed = 0\n","seed_everything(seed)\n","warnings.filterwarnings('ignore')"],"execution_count":5,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Z-146lSGCaOx","papermill":{"duration":0.030316,"end_time":"2021-01-20T22:57:29.954488","exception":false,"start_time":"2021-01-20T22:57:29.924172","status":"completed"},"tags":[]},"source":["### Hardware configuration\n","\n","Note that we have `32` cores, this is because the `TPU v2 Pod` have more cores than a single `TPU v3` which has `8` cores."]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:30.071569Z","iopub.status.busy":"2021-01-20T22:57:30.035804Z","iopub.status.idle":"2021-01-20T22:57:34.008561Z","shell.execute_reply":"2021-01-20T22:57:34.010162Z"},"id":"cCFwEwkVCaOy","papermill":{"duration":4.024986,"end_time":"2021-01-20T22:57:34.010410","exception":false,"start_time":"2021-01-20T22:57:29.985424","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1612103245196,"user_tz":-540,"elapsed":187306,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"2b408294-2cb3-4689-d0ec-c34fd7fea632"},"source":["# TPU or GPU detection\n","# Detect hardware, return appropriate distribution strategy\n","try:\n","    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n","    print(f'Running on TPU {tpu.master()}')\n","except ValueError:\n","    tpu = None\n","    print ('tpu',tpu)\n","\n","if tpu:\n","    tf.config.experimental_connect_to_cluster(tpu)\n","    tf.tpu.experimental.initialize_tpu_system(tpu)\n","    strategy = tf.distribute.experimental.TPUStrategy(tpu)\n","else:\n","    strategy = tf.distribute.get_strategy()\n","\n","AUTO = tf.data.experimental.AUTOTUNE\n","REPLICAS = strategy.num_replicas_in_sync\n","print(f'REPLICAS: {REPLICAS}')"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Running on TPU grpc://10.119.160.210:8470\n","INFO:tensorflow:Initializing the TPU system: grpc://10.119.160.210:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.119.160.210:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Found TPU system:\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Found TPU system:\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Cores: 8\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Cores: 8\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Workers: 1\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Workers: 1\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Cores Per Worker: 8\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Cores Per Worker: 8\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:CPU:0, CPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:CPU:0, CPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:XLA_CPU:0, XLA_CPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:XLA_CPU:0, XLA_CPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:CPU:0, CPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:CPU:0, CPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:0, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:0, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:1, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:1, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:2, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:2, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:3, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:3, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:4, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:4, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:5, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:5, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:6, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:6, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:7, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:7, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU_SYSTEM:0, TPU_SYSTEM, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU_SYSTEM:0, TPU_SYSTEM, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:XLA_CPU:0, XLA_CPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:XLA_CPU:0, XLA_CPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["REPLICAS: 8\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"NK8TAx9JCaOz","papermill":{"duration":0.035404,"end_time":"2021-01-20T22:57:34.088585","exception":false,"start_time":"2021-01-20T22:57:34.053181","status":"completed"},"tags":[]},"source":["# Model parameters"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:34.155750Z","iopub.status.busy":"2021-01-20T22:57:34.154661Z","iopub.status.idle":"2021-01-20T22:57:34.160980Z","shell.execute_reply":"2021-01-20T22:57:34.160280Z"},"papermill":{"duration":0.040682,"end_time":"2021-01-20T22:57:34.161109","exception":false,"start_time":"2021-01-20T22:57:34.120427","status":"completed"},"tags":[],"id":"hyxJUKF-xGQ2","executionInfo":{"status":"ok","timestamp":1612103245197,"user_tz":-540,"elapsed":187305,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["BATCH_SIZE = 8 * REPLICAS\n","LEARNING_RATE = 1e-5 * REPLICAS"],"execution_count":7,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UmwrOwlYCaOz","papermill":{"duration":0.031304,"end_time":"2021-01-20T22:57:34.223728","exception":false,"start_time":"2021-01-20T22:57:34.192424","status":"completed"},"tags":[]},"source":["# Load data"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:34.290296Z","iopub.status.busy":"2021-01-20T22:57:34.289242Z","iopub.status.idle":"2021-01-20T22:57:35.971447Z","shell.execute_reply":"2021-01-20T22:57:35.971977Z"},"id":"UxM4MGNGCaO0","papermill":{"duration":1.717316,"end_time":"2021-01-20T22:57:35.972129","exception":false,"start_time":"2021-01-20T22:57:34.254813","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":238},"executionInfo":{"status":"ok","timestamp":1612103246978,"user_tz":-540,"elapsed":189079,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"3a473630-1511-457a-e3bf-570194f37ed5"},"source":["def count_data_items(filenames):\n","    n = [int(re.compile(r'-([0-9]*)\\.').search(filename).group(1)) for filename in filenames]\n","    return np.sum(n)\n","\n","\n","train = pd.read_csv(f'{database_base_path}/train.csv')\n","print(f'Train samples: {len(train)}')\n","\n","FILENAMES_COMP = tf.io.gfile.glob(GCS_PATH + '/*.tfrec')\n","FILENAMES_2019 = tf.io.gfile.glob(GCS_PATH_EXT + '/*.tfrec')\n","\n","FILENAMES_COMP_CBB = tf.io.gfile.glob(GCS_PATH_CLASSES + '/CBB*.tfrec')\n","FILENAMES_COMP_CBSD = tf.io.gfile.glob(GCS_PATH_CLASSES + '/CBSD*.tfrec')\n","FILENAMES_COMP_CGM = tf.io.gfile.glob(GCS_PATH_CLASSES + '/CGM*.tfrec')\n","FILENAMES_COMP_CMD = tf.io.gfile.glob(GCS_PATH_CLASSES + '/CMD*.tfrec')\n","FILENAMES_COMP_Healthy = tf.io.gfile.glob(GCS_PATH_CLASSES + '/Healthy*.tfrec')\n","\n","FILENAMES_2019_CBB = tf.io.gfile.glob(GCS_PATH_EXT_CLASSES + '/CBB*.tfrec')\n","FILENAMES_2019_CBSD = tf.io.gfile.glob(GCS_PATH_EXT_CLASSES + '/CBSD*.tfrec')\n","FILENAMES_2019_CGM = tf.io.gfile.glob(GCS_PATH_EXT_CLASSES + '/CGM*.tfrec')\n","FILENAMES_2019_CMD = tf.io.gfile.glob(GCS_PATH_EXT_CLASSES + '/CMD*.tfrec')\n","FILENAMES_2019_Healthy = tf.io.gfile.glob(GCS_PATH_EXT_CLASSES + '/Healthy*.tfrec')\n","\n","\n","TRAINING_FILENAMES = (FILENAMES_COMP + \n","                      FILENAMES_2019 + \n","                      (2 * FILENAMES_COMP_CBB) + \n","                      (2 * FILENAMES_2019_CBB) + \n","                      (2 * FILENAMES_COMP_CBSD) + \n","                      (2 * FILENAMES_2019_CBSD) + \n","                      (2 * FILENAMES_COMP_CGM) + \n","                      (2 * FILENAMES_2019_CGM) + \n","                      (2 * FILENAMES_COMP_Healthy) + \n","                      (2 * FILENAMES_2019_Healthy))\n","\n","NUM_TRAINING_IMAGES = count_data_items(TRAINING_FILENAMES)\n","\n","print(f'GCS: train images: {NUM_TRAINING_IMAGES}')\n","display(train.head())\n","\n","CLASSES = ['Cassava Bacterial Blight', \n","           'Cassava Brown Streak Disease', \n","           'Cassava Green Mottle', \n","           'Cassava Mosaic Disease', \n","           'Healthy']"],"execution_count":8,"outputs":[{"output_type":"stream","text":["Train samples: 21397\n","GCS: train images: 48081\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>image_id</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1000015157.jpg</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1000201771.jpg</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>100042118.jpg</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1000723321.jpg</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1000812911.jpg</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         image_id  label\n","0  1000015157.jpg      0\n","1  1000201771.jpg      3\n","2   100042118.jpg      1\n","3  1000723321.jpg      1\n","4  1000812911.jpg      3"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"BZIhYsg_CaO1","papermill":{"duration":0.032803,"end_time":"2021-01-20T22:57:36.037731","exception":false,"start_time":"2021-01-20T22:57:36.004928","status":"completed"},"tags":[]},"source":["# Augmentation"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:36.106682Z","iopub.status.busy":"2021-01-20T22:57:36.105973Z","iopub.status.idle":"2021-01-20T22:57:36.133193Z","shell.execute_reply":"2021-01-20T22:57:36.133788Z"},"id":"Wwh329L6CaO1","papermill":{"duration":0.063522,"end_time":"2021-01-20T22:57:36.133965","exception":false,"start_time":"2021-01-20T22:57:36.070443","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1612103247196,"user_tz":-540,"elapsed":189295,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["def data_augment(image, label):\n","    p_rotation = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_spatial = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_rotate = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_pixel_1 = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_pixel_2 = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_pixel_3 = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_shear = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_crop = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_cutout = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    \n","    # Shear\n","    if p_shear > .2:\n","        if p_shear > .6:\n","            image = transform_shear(image, HEIGHT, shear=20.)\n","        else:\n","            image = transform_shear(image, HEIGHT, shear=-20.)\n","            \n","    # Rotation\n","    if p_rotation > .2:\n","        if p_rotation > .6:\n","            image = transform_rotation(image, HEIGHT, rotation=45.)\n","        else:\n","            image = transform_rotation(image, HEIGHT, rotation=-45.)\n","            \n","    # Flips\n","    image = tf.image.random_flip_left_right(image)\n","    image = tf.image.random_flip_up_down(image)\n","    if p_spatial > .75:\n","        image = tf.image.transpose(image)\n","        \n","    # Rotates\n","    if p_rotate > .75:\n","        image = tf.image.rot90(image, k=3) # rotate 270º\n","    elif p_rotate > .5:\n","        image = tf.image.rot90(image, k=2) # rotate 180º\n","    elif p_rotate > .25:\n","        image = tf.image.rot90(image, k=1) # rotate 90º\n","        \n","    # Pixel-level transforms\n","    if p_pixel_1 >= .4:\n","        image = tf.image.random_saturation(image, lower=.7, upper=1.3)\n","    if p_pixel_2 >= .4:\n","        image = tf.image.random_contrast(image, lower=.8, upper=1.2)\n","    if p_pixel_3 >= .4:\n","        image = tf.image.random_brightness(image, max_delta=.1)\n","        \n","    # Crops\n","    if p_crop > .6:\n","        if p_crop > .9:\n","            image = tf.image.central_crop(image, central_fraction=.5)\n","        elif p_crop > .8:\n","            image = tf.image.central_crop(image, central_fraction=.6)\n","        elif p_crop > .7:\n","            image = tf.image.central_crop(image, central_fraction=.7)\n","        else:\n","            image = tf.image.central_crop(image, central_fraction=.8)\n","    elif p_crop > .3:\n","        crop_size = tf.random.uniform([], int(HEIGHT*.6), HEIGHT, dtype=tf.int32)\n","        image = tf.image.random_crop(image, size=[crop_size, crop_size, CHANNELS])\n","            \n","    image = tf.image.resize(image, size=[HEIGHT, WIDTH])\n","\n","    if p_cutout > .5:\n","        image = data_augment_cutout(image)\n","        \n","    return image, label"],"execution_count":9,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"r4Hg1nKgCaO1","papermill":{"duration":0.033215,"end_time":"2021-01-20T22:57:36.199741","exception":false,"start_time":"2021-01-20T22:57:36.166526","status":"completed"},"tags":[]},"source":["## Auxiliary functions"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:36.295009Z","iopub.status.busy":"2021-01-20T22:57:36.289488Z","iopub.status.idle":"2021-01-20T22:57:36.318353Z","shell.execute_reply":"2021-01-20T22:57:36.317633Z"},"id":"-DueNRgfCaO1","papermill":{"duration":0.08607,"end_time":"2021-01-20T22:57:36.318490","exception":false,"start_time":"2021-01-20T22:57:36.232420","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1612103247197,"user_tz":-540,"elapsed":189294,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["# data augmentation @cdeotte kernel: https://www.kaggle.com/cdeotte/rotation-augmentation-gpu-tpu-0-96\n","def transform_rotation(image, height, rotation):\n","    # input image - is one image of size [dim,dim,3] not a batch of [b,dim,dim,3]\n","    # output - image randomly rotated\n","    DIM = height\n","    XDIM = DIM%2 #fix for size 331\n","    \n","    rotation = rotation * tf.random.uniform([1],dtype='float32')\n","    # CONVERT DEGREES TO RADIANS\n","    rotation = math.pi * rotation / 180.\n","    \n","    # ROTATION MATRIX\n","    c1 = tf.math.cos(rotation)\n","    s1 = tf.math.sin(rotation)\n","    one = tf.constant([1],dtype='float32')\n","    zero = tf.constant([0],dtype='float32')\n","    rotation_matrix = tf.reshape(tf.concat([c1,s1,zero, -s1,c1,zero, zero,zero,one],axis=0),[3,3])\n","\n","    # LIST DESTINATION PIXEL INDICES\n","    x = tf.repeat( tf.range(DIM//2,-DIM//2,-1), DIM )\n","    y = tf.tile( tf.range(-DIM//2,DIM//2),[DIM] )\n","    z = tf.ones([DIM*DIM],dtype='int32')\n","    idx = tf.stack( [x,y,z] )\n","    \n","    # ROTATE DESTINATION PIXELS ONTO ORIGIN PIXELS\n","    idx2 = K.dot(rotation_matrix,tf.cast(idx,dtype='float32'))\n","    idx2 = K.cast(idx2,dtype='int32')\n","    idx2 = K.clip(idx2,-DIM//2+XDIM+1,DIM//2)\n","    \n","    # FIND ORIGIN PIXEL VALUES \n","    idx3 = tf.stack( [DIM//2-idx2[0,], DIM//2-1+idx2[1,]] )\n","    d = tf.gather_nd(image, tf.transpose(idx3))\n","        \n","    return tf.reshape(d,[DIM,DIM,3])\n","\n","def transform_shear(image, height, shear):\n","    # input image - is one image of size [dim,dim,3] not a batch of [b,dim,dim,3]\n","    # output - image randomly sheared\n","    DIM = height\n","    XDIM = DIM%2 #fix for size 331\n","    \n","    shear = shear * tf.random.uniform([1],dtype='float32')\n","    shear = math.pi * shear / 180.\n","        \n","    # SHEAR MATRIX\n","    one = tf.constant([1],dtype='float32')\n","    zero = tf.constant([0],dtype='float32')\n","    c2 = tf.math.cos(shear)\n","    s2 = tf.math.sin(shear)\n","    shear_matrix = tf.reshape(tf.concat([one,s2,zero, zero,c2,zero, zero,zero,one],axis=0),[3,3])    \n","\n","    # LIST DESTINATION PIXEL INDICES\n","    x = tf.repeat( tf.range(DIM//2,-DIM//2,-1), DIM )\n","    y = tf.tile( tf.range(-DIM//2,DIM//2),[DIM] )\n","    z = tf.ones([DIM*DIM],dtype='int32')\n","    idx = tf.stack( [x,y,z] )\n","    \n","    # ROTATE DESTINATION PIXELS ONTO ORIGIN PIXELS\n","    idx2 = K.dot(shear_matrix,tf.cast(idx,dtype='float32'))\n","    idx2 = K.cast(idx2,dtype='int32')\n","    idx2 = K.clip(idx2,-DIM//2+XDIM+1,DIM//2)\n","    \n","    # FIND ORIGIN PIXEL VALUES \n","    idx3 = tf.stack( [DIM//2-idx2[0,], DIM//2-1+idx2[1,]] )\n","    d = tf.gather_nd(image, tf.transpose(idx3))\n","        \n","    return tf.reshape(d,[DIM,DIM,3])\n","\n","# CutOut\n","def data_augment_cutout(image, min_mask_size=(int(HEIGHT * .1), int(HEIGHT * .1)), \n","                        max_mask_size=(int(HEIGHT * .125), int(HEIGHT * .125))):\n","    p_cutout = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    \n","    if p_cutout > .85: # 10~15 cut outs\n","        n_cutout = tf.random.uniform([], 10, 15, dtype=tf.int32)\n","        image = random_cutout(image, HEIGHT, WIDTH, \n","                              min_mask_size=min_mask_size, max_mask_size=max_mask_size, k=n_cutout)\n","    elif p_cutout > .6: # 5~10 cut outs\n","        n_cutout = tf.random.uniform([], 5, 10, dtype=tf.int32)\n","        image = random_cutout(image, HEIGHT, WIDTH, \n","                              min_mask_size=min_mask_size, max_mask_size=max_mask_size, k=n_cutout)\n","    elif p_cutout > .25: # 2~5 cut outs\n","        n_cutout = tf.random.uniform([], 2, 5, dtype=tf.int32)\n","        image = random_cutout(image, HEIGHT, WIDTH, \n","                              min_mask_size=min_mask_size, max_mask_size=max_mask_size, k=n_cutout)\n","    else: # 1 cut out\n","        image = random_cutout(image, HEIGHT, WIDTH, \n","                              min_mask_size=min_mask_size, max_mask_size=max_mask_size, k=1)\n","\n","    return image\n","\n","def random_cutout(image, height, width, channels=3, min_mask_size=(10, 10), max_mask_size=(80, 80), k=1):\n","    assert height > min_mask_size[0]\n","    assert width > min_mask_size[1]\n","    assert height > max_mask_size[0]\n","    assert width > max_mask_size[1]\n","\n","    for i in range(k):\n","      mask_height = tf.random.uniform(shape=[], minval=min_mask_size[0], maxval=max_mask_size[0], dtype=tf.int32)\n","      mask_width = tf.random.uniform(shape=[], minval=min_mask_size[1], maxval=max_mask_size[1], dtype=tf.int32)\n","\n","      pad_h = height - mask_height\n","      pad_top = tf.random.uniform(shape=[], minval=0, maxval=pad_h, dtype=tf.int32)\n","      pad_bottom = pad_h - pad_top\n","\n","      pad_w = width - mask_width\n","      pad_left = tf.random.uniform(shape=[], minval=0, maxval=pad_w, dtype=tf.int32)\n","      pad_right = pad_w - pad_left\n","\n","      cutout_area = tf.zeros(shape=[mask_height, mask_width, channels], dtype=tf.uint8)\n","\n","      cutout_mask = tf.pad([cutout_area], [[0,0],[pad_top, pad_bottom], [pad_left, pad_right], [0,0]], constant_values=1)\n","      cutout_mask = tf.squeeze(cutout_mask, axis=0)\n","      image = tf.multiply(tf.cast(image, tf.float32), tf.cast(cutout_mask, tf.float32))\n","\n","    return image"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:36.388974Z","iopub.status.busy":"2021-01-20T22:57:36.388107Z","iopub.status.idle":"2021-01-20T22:57:36.415254Z","shell.execute_reply":"2021-01-20T22:57:36.415771Z"},"id":"CPcg0bWECaO1","papermill":{"duration":0.064439,"end_time":"2021-01-20T22:57:36.415960","exception":false,"start_time":"2021-01-20T22:57:36.351521","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1612103247396,"user_tz":-540,"elapsed":189491,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["# Datasets utility functions\n","def decode_image(image_data):\n","    \"\"\"\n","        Decode a JPEG-encoded image to a uint8 tensor.\n","    \"\"\"\n","    image = tf.image.decode_jpeg(image_data, channels=3)\n","    return image\n","\n","def scale_image(image, label):\n","    \"\"\"\n","        Cast tensor to float and normalizes (range between 0 and 1).\n","    \"\"\"\n","    image = tf.cast(image, tf.float32)\n","    image /= 255.0\n","    return image, label\n","\n","def prepare_image(image, label):\n","    \"\"\"\n","        Resize and reshape images to the expected size.\n","    \"\"\"\n","    image = tf.image.resize(image, [HEIGHT_RS, WIDTH_RS])\n","    image = tf.reshape(image, [HEIGHT_RS, WIDTH_RS, 3])\n","    return image, label\n","\n","def read_tfrecord(example, labeled=True):\n","    \"\"\"\n","        1. Parse data based on the 'TFREC_FORMAT' map.\n","        2. Decode image.\n","        3. If 'labeled' returns (image, label) if not (image, name).\n","    \"\"\"\n","    if labeled:\n","        TFREC_FORMAT = {\n","            'image': tf.io.FixedLenFeature([], tf.string), \n","            'target': tf.io.FixedLenFeature([], tf.int64), \n","        }\n","    else:\n","        TFREC_FORMAT = {\n","            'image': tf.io.FixedLenFeature([], tf.string), \n","            'image_name': tf.io.FixedLenFeature([], tf.string), \n","        }\n","    example = tf.io.parse_single_example(example, TFREC_FORMAT)\n","    image = decode_image(example['image'])\n","    if labeled:\n","        label_or_name = tf.cast(example['target'], tf.int32)\n","        # One-Hot Encoding needed to use \"categorical_crossentropy\" loss\n","        label_or_name = tf.one_hot(tf.cast(label_or_name, tf.int32), N_CLASSES)\n","    else:\n","        label_or_name = example['image_name']\n","    return image, label_or_name\n","\n","def get_dataset(FILENAMES, labeled=True, ordered=False, repeated=False, \n","                cached=False, augment=False):\n","    \"\"\"\n","        Return a Tensorflow dataset ready for training or inference.\n","    \"\"\"\n","    ignore_order = tf.data.Options()\n","    if not ordered:\n","        ignore_order.experimental_deterministic = False\n","        dataset = tf.data.Dataset.list_files(FILENAMES)\n","        dataset = dataset.interleave(tf.data.TFRecordDataset, num_parallel_calls=AUTO)\n","    else:\n","        dataset = tf.data.TFRecordDataset(FILENAMES, num_parallel_reads=AUTO)\n","        \n","    dataset = dataset.with_options(ignore_order)\n","    \n","    dataset = dataset.map(lambda x: read_tfrecord(x, labeled=labeled), num_parallel_calls=AUTO)\n","    \n","    if augment:\n","        dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n","        \n","    dataset = dataset.map(scale_image, num_parallel_calls=AUTO)\n","    dataset = dataset.map(prepare_image, num_parallel_calls=AUTO)\n","    \n","    if not ordered:\n","        dataset = dataset.shuffle(2048)\n","    if repeated:\n","        dataset = dataset.repeat()\n","        \n","    dataset = dataset.batch(BATCH_SIZE)\n","    \n","    if cached:\n","        dataset = dataset.cache()\n","    dataset = dataset.prefetch(AUTO)\n","    return dataset\n","\n","def unfreeze_model(model):\n","    # Unfreeze layers while leaving BatchNorm layers frozen\n","    for layer in model.layers:\n","        if not isinstance(layer, L.BatchNormalization):\n","            layer.trainable = True\n","        else:\n","            layer.trainable = False\n","                \n","def unfreeze_block(model, block_name=None, n_top=3):\n","    # Unfreeze layers while leaving BatchNorm layers frozen\n","    for layer in model.layers[:-n_top]:\n","        if isinstance(layer, L.BatchNormalization):\n","            layer.trainable = False\n","        else:\n","            if block_name and (block_name in layer.name):\n","                layer.trainable = True"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:36.487403Z","iopub.status.busy":"2021-01-20T22:57:36.486600Z","iopub.status.idle":"2021-01-20T22:57:36.530480Z","shell.execute_reply":"2021-01-20T22:57:36.531039Z"},"id":"gHAxNOInCaO2","papermill":{"duration":0.081913,"end_time":"2021-01-20T22:57:36.531213","exception":false,"start_time":"2021-01-20T22:57:36.449300","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1612103247691,"user_tz":-540,"elapsed":189784,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["# Visualization utility functions\n","np.set_printoptions(threshold=15, linewidth=80)\n","\n","def batch_to_numpy_images_and_labels(data):\n","    images, labels = data\n","    numpy_images = images.numpy()\n","    numpy_labels = labels.numpy()\n","    if numpy_labels.dtype == object: # binary string in this case, these are image ID strings\n","        numpy_labels = [None for _ in enumerate(numpy_images)]\n","    # If no labels, only image IDs, return None for labels (this is the case for test data)\n","    return numpy_images, numpy_labels\n","\n","def title_from_label_and_target(label, correct_label):\n","    if correct_label is None:\n","        return CLASSES[label], True\n","    correct = (label == correct_label)\n","    return \"{} [{}{}{}]\".format(CLASSES[label], 'OK' if correct else 'NO', u\"\\u2192\" if not correct else '',\n","                                CLASSES[correct_label] if not correct else ''), correct\n","\n","def display_one_flower(image, title, subplot, red=False, titlesize=16):\n","    plt.subplot(*subplot)\n","    plt.axis('off')\n","    plt.imshow(image)\n","    if len(title) > 0:\n","        plt.title(title, fontsize=int(titlesize) if not red else int(titlesize/1.2), color='red' if red else 'black', \n","                  fontdict={'verticalalignment':'center'}, pad=int(titlesize/1.5))\n","    return (subplot[0], subplot[1], subplot[2]+1)\n","\n","def display_batch_of_images(databatch, predictions=None):\n","    \"\"\"This will work with:\n","    display_batch_of_images(images)\n","    display_batch_of_images(images, predictions)\n","    display_batch_of_images((images, labels))\n","    display_batch_of_images((images, labels), predictions)\n","    \"\"\"\n","    # data\n","    images, labels = batch_to_numpy_images_and_labels(databatch)\n","    labels = np.argmax(labels, axis=-1)\n","    if labels is None:\n","        labels = [None for _ in enumerate(images)]\n","        \n","    # auto-squaring: this will drop data that does not fit into square or square-ish rectangle\n","    rows = int(math.sqrt(len(images)))\n","    cols = len(images)//rows\n","        \n","    # size and spacing\n","    FIGSIZE = 13.0\n","    SPACING = 0.1\n","    subplot=(rows,cols,1)\n","    if rows < cols:\n","        plt.figure(figsize=(FIGSIZE,FIGSIZE/cols*rows))\n","    else:\n","        plt.figure(figsize=(FIGSIZE/rows*cols,FIGSIZE))\n","    \n","    # display\n","    for i, (image, label) in enumerate(zip(images[:rows*cols], labels[:rows*cols])):\n","        title = '' if label is None else CLASSES[label]\n","        correct = True\n","        if predictions is not None:\n","            title, correct = title_from_label_and_target(predictions[i], label)\n","        dynamic_titlesize = FIGSIZE*SPACING/max(rows,cols)*40+3 # magic formula tested to work from 1x1 to 10x10 images\n","        subplot = display_one_flower(image, title, subplot, not correct, titlesize=dynamic_titlesize)\n","    \n","    #layout\n","    plt.tight_layout()\n","    if label is None and predictions is None:\n","        plt.subplots_adjust(wspace=0, hspace=0)\n","    else:\n","        plt.subplots_adjust(wspace=SPACING, hspace=SPACING)\n","    plt.show()\n","    \n","# Visualize model predictions\n","def dataset_to_numpy_util(dataset, N):\n","    dataset = dataset.unbatch().batch(N)\n","    for images, labels in dataset:\n","        numpy_images = images.numpy()\n","        numpy_labels = labels.numpy()\n","        break;  \n","    return numpy_images, numpy_labels\n","\n","def title_from_label_and_target(label, correct_label):\n","    label = np.argmax(label, axis=-1)\n","    correct = (label == correct_label)\n","    return \"{} [{}{}{}]\".format(label, str(correct), ', shoud be ' if not correct else '',\n","                                correct_label if not correct else ''), correct\n","\n","def display_one_flower_eval(image, title, subplot, red=False):\n","    plt.subplot(subplot)\n","    plt.axis('off')\n","    plt.imshow(image)\n","    plt.title(title, fontsize=14, color='red' if red else 'black')\n","    return subplot+1\n","\n","def display_9_images_with_predictions(images, predictions, labels):\n","    subplot=331\n","    plt.figure(figsize=(13,13))\n","    for i, image in enumerate(images):\n","        title, correct = title_from_label_and_target(predictions[i], labels[i])\n","        subplot = display_one_flower_eval(image, title, subplot, not correct)\n","        if i >= 8:\n","            break;\n","              \n","    plt.tight_layout()\n","    plt.subplots_adjust(wspace=0.1, hspace=0.1)\n","    plt.show()\n","\n","\n","# Model evaluation\n","def plot_metrics(history):\n","    fig, axes = plt.subplots(2, 1, sharex='col', figsize=(20, 8))\n","    axes = axes.flatten()\n","    \n","    axes[0].plot(history['loss'], label='Train loss')\n","    axes[0].plot(history['val_loss'], label='Validation loss')\n","    axes[0].legend(loc='best', fontsize=16)\n","    axes[0].set_title('Loss')\n","    axes[0].axvline(np.argmin(history['loss']), linestyle='dashed')\n","    axes[0].axvline(np.argmin(history['val_loss']), linestyle='dashed', color='orange')\n","    \n","    axes[1].plot(history['accuracy'], label='Train accuracy')\n","    axes[1].plot(history['val_accuracy'], label='Validation accuracy')\n","    axes[1].legend(loc='best', fontsize=16)\n","    axes[1].set_title('Accuracy')\n","    axes[1].axvline(np.argmax(history['accuracy']), linestyle='dashed')\n","    axes[1].axvline(np.argmax(history['val_accuracy']), linestyle='dashed', color='orange')\n","\n","    plt.xlabel('Epochs', fontsize=16)\n","    sns.despine()\n","    plt.show()"],"execution_count":12,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oCtCB3WdCaO2","papermill":{"duration":0.033127,"end_time":"2021-01-20T22:57:36.597612","exception":false,"start_time":"2021-01-20T22:57:36.564485","status":"completed"},"tags":[]},"source":["# Training data samples (with augmentation)"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:36.667226Z","iopub.status.busy":"2021-01-20T22:57:36.666549Z","iopub.status.idle":"2021-01-20T22:57:52.204000Z","shell.execute_reply":"2021-01-20T22:57:52.204539Z"},"id":"p8IMzXLRCaO2","papermill":{"duration":15.574028,"end_time":"2021-01-20T22:57:52.204708","exception":false,"start_time":"2021-01-20T22:57:36.630680","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1Q563bdZy0u7Dt8o6RrKRWHzYk1XHC5RY"},"executionInfo":{"status":"ok","timestamp":1612103263322,"user_tz":-540,"elapsed":205409,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"c0a340b2-db15-4e2e-dec8-79e980e57a54"},"source":["train_dataset = get_dataset(FILENAMES_COMP, ordered=True, augment=True)\n","train_iter = iter(train_dataset.unbatch().batch(20))\n","\n","display_batch_of_images(next(train_iter))\n","display_batch_of_images(next(train_iter))"],"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"gfrU-uCiCaO3","papermill":{"duration":0.115332,"end_time":"2021-01-20T22:57:52.436099","exception":false,"start_time":"2021-01-20T22:57:52.320767","status":"completed"},"tags":[]},"source":["## Datasets distribution\n","\n","### Competition data"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:52.660179Z","iopub.status.busy":"2021-01-20T22:57:52.659360Z","iopub.status.idle":"2021-01-20T22:59:14.164307Z","shell.execute_reply":"2021-01-20T22:59:14.165290Z"},"id":"WJywiXKHCaO4","papermill":{"duration":81.617644,"end_time":"2021-01-20T22:59:14.165495","exception":false,"start_time":"2021-01-20T22:57:52.547851","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":502},"executionInfo":{"status":"ok","timestamp":1612103348395,"user_tz":-540,"elapsed":290475,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"40600753-02f0-4d80-b364-e11aa5c4e896"},"source":["ds_comp = get_dataset(FILENAMES_COMP)\n","labels_comp = [target.numpy() for img, target in iter(ds_comp.unbatch())]\n","labels_comp = np.argmax(labels_comp, axis=-1)\n","\n","fig, ax = plt.subplots(1, 1, figsize=(18, 8))\n","ax = sns.countplot(y=labels_comp, palette='viridis')\n","ax.tick_params(labelsize=16)\n","\n","plt.show()"],"execution_count":14,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1296x576 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"H03votk7CaO4","papermill":{"duration":0.11035,"end_time":"2021-01-20T22:59:14.384953","exception":false,"start_time":"2021-01-20T22:59:14.274603","status":"completed"},"tags":[]},"source":["### 2019 competition data"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:59:14.619739Z","iopub.status.busy":"2021-01-20T22:59:14.618979Z","iopub.status.idle":"2021-01-20T22:59:36.253576Z","shell.execute_reply":"2021-01-20T22:59:36.252814Z"},"id":"SfD2fI73CaO4","papermill":{"duration":21.757163,"end_time":"2021-01-20T22:59:36.253707","exception":false,"start_time":"2021-01-20T22:59:14.496544","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":502},"executionInfo":{"status":"ok","timestamp":1612103370830,"user_tz":-540,"elapsed":312903,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"939b0ce1-f350-490a-ae21-7d8f628551b4"},"source":["ds_2019 = get_dataset(FILENAMES_2019)\n","labels_2019 = [target.numpy() for img, target in iter(ds_2019.unbatch())]\n","labels_2019 = np.argmax(labels_2019, axis=-1)\n","\n","fig, ax = plt.subplots(1, 1, figsize=(18, 8))\n","ax = sns.countplot(y=labels_2019, palette='viridis')\n","ax.tick_params(labelsize=16)\n","\n","plt.show()"],"execution_count":15,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1296x576 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"ZXY3rsY4CaO4","papermill":{"duration":0.112402,"end_time":"2021-01-20T22:59:36.476696","exception":false,"start_time":"2021-01-20T22:59:36.364294","status":"completed"},"tags":[]},"source":["### Dataset oversampled"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:59:36.715120Z","iopub.status.busy":"2021-01-20T22:59:36.714385Z","iopub.status.idle":"2021-01-20T23:02:43.355083Z","shell.execute_reply":"2021-01-20T23:02:43.355614Z"},"id":"PRXTNO7RCaO5","papermill":{"duration":186.766033,"end_time":"2021-01-20T23:02:43.355778","exception":false,"start_time":"2021-01-20T22:59:36.589745","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":502},"executionInfo":{"status":"ok","timestamp":1612103576728,"user_tz":-540,"elapsed":518794,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"da761602-4d50-4e8d-b0c8-d8f1f584451d"},"source":["FILENAMES_COMP_OVER = (FILENAMES_COMP + \n","                       FILENAMES_2019 + \n","                       (2 * FILENAMES_COMP_CBB) + \n","                       (2 * FILENAMES_2019_CBB) + \n","                       (2 * FILENAMES_COMP_CBSD) + \n","                       (2 * FILENAMES_2019_CBSD) + \n","                       (2 * FILENAMES_COMP_CGM) + \n","                       (2 * FILENAMES_2019_CGM) + \n","                       (2 * FILENAMES_COMP_Healthy) + \n","                       (2 * FILENAMES_2019_Healthy))\n","\n","ds_comp = get_dataset(FILENAMES_COMP_OVER)\n","labels_comp = [target.numpy() for img, target in iter(ds_comp.unbatch())]\n","labels_comp = np.argmax(labels_comp, axis=-1)\n","\n","fig, ax = plt.subplots(1, 1, figsize=(18, 8))\n","ax = sns.countplot(y=labels_comp, palette='viridis')\n","ax.tick_params(labelsize=16)\n","\n","plt.show()"],"execution_count":16,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1296x576 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"HvXRzhofCaO5","papermill":{"duration":0.112509,"end_time":"2021-01-20T23:02:43.580615","exception":false,"start_time":"2021-01-20T23:02:43.468106","status":"completed"},"tags":[]},"source":["### Learning rate schedule\n","\n","We are going to use a `cosine learning rate schedule with a warm-up phase`, this may be a good idea since we are using a pre-trained model, the warm-up phase will be useful to avoid the pre-trained weights degradation resulting in catastrophic forgetting, during the schedule the learning rate will slowly decrease to very low values, this helps the model to land on more stable weights."]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:02:43.808753Z","iopub.status.busy":"2021-01-20T23:02:43.807680Z","iopub.status.idle":"2021-01-20T23:02:47.940826Z","shell.execute_reply":"2021-01-20T23:02:47.939748Z"},"id":"I9cuJCl1CaO5","papermill":{"duration":4.248898,"end_time":"2021-01-20T23:02:47.940988","exception":false,"start_time":"2021-01-20T23:02:43.692090","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":422},"executionInfo":{"status":"ok","timestamp":1612103615012,"user_tz":-540,"elapsed":557071,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"eb618a00-f619-4870-ee97-ecfd47499c80"},"source":["lr_start = 1e-8\n","lr_min = 1e-8\n","lr_max = LEARNING_RATE\n","num_cycles = 1.\n","warmup_epochs = 1\n","hold_max_epochs = 0\n","total_epochs = EPOCHS\n","warmup_steps = warmup_epochs * (NUM_TRAINING_IMAGES//BATCH_SIZE)\n","total_steps = total_epochs * (NUM_TRAINING_IMAGES//BATCH_SIZE)\n","\n","@tf.function\n","def lrfn(step):\n","    if step < warmup_steps:\n","        lr = (lr_max - lr_start) / warmup_steps * step + lr_start\n","    else:\n","        progress = (step - warmup_steps) / (total_steps - warmup_steps)\n","        lr = lr_max * (0.5 * (1.0 + tf.math.cos(np.pi * ((num_cycles * progress) % 1.0))))\n","        if lr_min is not None:\n","            lr = tf.math.maximum(lr_min, float(lr))\n","\n","    return lr\n","\n","\n","# rng = [i for i in range(total_epochs)]\n","rng = [i for i in range(total_steps)]\n","y = [lrfn(tf.cast(x, tf.float32)) for x in rng]\n","\n","sns.set(style='whitegrid')\n","fig, ax = plt.subplots(figsize=(20, 6))\n","plt.plot(rng, y)\n","\n","print(f'{total_steps} total steps and {NUM_TRAINING_IMAGES//BATCH_SIZE} steps per epoch')\n","print(f'Learning rate schedule: {y[0]:.3g} to {max(y):.3g} to {y[-1]:.3g}')"],"execution_count":17,"outputs":[{"output_type":"stream","text":["7510 total steps and 751 steps per epoch\n","Learning rate schedule: 1e-08 to 8e-05 to 1e-08\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x432 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"OMIrA5jxCaO5","papermill":{"duration":0.112158,"end_time":"2021-01-20T23:02:48.166235","exception":false,"start_time":"2021-01-20T23:02:48.054077","status":"completed"},"tags":[]},"source":["# Model"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:02:48.402810Z","iopub.status.busy":"2021-01-20T23:02:48.402111Z","iopub.status.idle":"2021-01-20T23:02:48.406439Z","shell.execute_reply":"2021-01-20T23:02:48.405740Z"},"id":"pRksD6K6CaO5","papermill":{"duration":0.126526,"end_time":"2021-01-20T23:02:48.406566","exception":false,"start_time":"2021-01-20T23:02:48.280040","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1612103615013,"user_tz":-540,"elapsed":557070,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["from tensorflow.keras.applications import Xception\n","def model_fn(input_shape, N_CLASSES):\n","    inputs = L.Input(shape=input_shape, name='input_image')\n","    base_model = Xception(input_tensor=inputs, \n","                                    include_top=False, \n","                                    weights='imagenet', \n","                                    pooling='avg')\n","    base_model.trainable = False\n","    x = L.Dropout(.5)(base_model.output)\n","    output = L.Dense(N_CLASSES, activation='softmax', name='output')(x)\n","    model = Model(inputs=inputs, outputs=output)\n","\n","    return model"],"execution_count":18,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:02:48.640007Z","iopub.status.busy":"2021-01-20T23:02:48.638735Z","iopub.status.idle":"2021-01-20T23:02:48.642985Z","shell.execute_reply":"2021-01-20T23:02:48.643690Z"},"id":"4zl0qy-pcR-A","papermill":{"duration":0.122772,"end_time":"2021-01-20T23:02:48.643846","exception":false,"start_time":"2021-01-20T23:02:48.521074","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1612103615014,"user_tz":-540,"elapsed":557069,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["#help(strategy)"],"execution_count":19,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hMc0tk0VCaO5","papermill":{"duration":0.114465,"end_time":"2021-01-20T23:02:48.871581","exception":false,"start_time":"2021-01-20T23:02:48.757116","status":"completed"},"tags":[]},"source":["# Training"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:02:49.104256Z","iopub.status.busy":"2021-01-20T23:02:49.103030Z","iopub.status.idle":"2021-01-20T23:41:32.330134Z","shell.execute_reply":"2021-01-20T23:41:32.329366Z"},"id":"8HrFGFRNCaO5","papermill":{"duration":2323.344808,"end_time":"2021-01-20T23:41:32.330270","exception":false,"start_time":"2021-01-20T23:02:48.985462","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1612111811064,"user_tz":-540,"elapsed":8753113,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"57dd69bb-2c9a-43f1-9e63-1d28c133b1af"},"source":["skf = KFold(n_splits=N_FOLDS, shuffle=True, random_state=seed)\n","oof_pred = []; oof_labels = []; history_list = []\n","\n","for fold,(idxT, idxV) in enumerate(skf.split(np.arange(50))):\n","    if fold >= FOLDS_USED:\n","        break\n","    if tpu: tf.tpu.experimental.initialize_tpu_system(tpu)\n","    K.clear_session()\n","    print(f'\\nFOLD: {fold+1}')\n","    print(f'TRAIN: {idxT} VALID: {idxV}')\n","\n","    # Create train and validation sets\n","    FILENAMES_COMP = tf.io.gfile.glob([GCS_PATH + '/Id_train%.2i*.tfrec' % x for x in idxT])\n","    FILENAMES_2019 = tf.io.gfile.glob([GCS_PATH_EXT + '/Id_train%.2i*.tfrec' % x for x in idxT])\n","\n","    FILENAMES_COMP_CBB = tf.io.gfile.glob([GCS_PATH_CLASSES + '/CBB%.2i*.tfrec' % x for x in idxT])\n","    FILENAMES_COMP_CBSD = tf.io.gfile.glob([GCS_PATH_CLASSES + '/CBSD%.2i*.tfrec' % x for x in idxT])\n","    FILENAMES_COMP_CGM = tf.io.gfile.glob([GCS_PATH_CLASSES + '/CGM%.2i*.tfrec' % x for x in idxT])\n","    FILENAMES_COMP_Healthy = tf.io.gfile.glob([GCS_PATH_CLASSES + '/Healthy%.2i*.tfrec' % x for x in idxT])\n","    \n","    FILENAMES_2019_CBB = tf.io.gfile.glob([GCS_PATH_EXT_CLASSES + '/CBB%.2i*.tfrec' % x for x in idxT])\n","    FILENAMES_2019_CBSD = tf.io.gfile.glob([GCS_PATH_EXT_CLASSES + '/CBSD%.2i*.tfrec' % x for x in idxT])\n","    FILENAMES_2019_CGM = tf.io.gfile.glob([GCS_PATH_EXT_CLASSES + '/CGM%.2i*.tfrec' % x for x in idxT])\n","    FILENAMES_2019_Healthy = tf.io.gfile.glob([GCS_PATH_EXT_CLASSES + '/Healthy%.2i*.tfrec' % x for x in idxT])\n","\n","    TRAIN_FILENAMES = (FILENAMES_COMP + \n","                       FILENAMES_2019 + \n","                       (2 * FILENAMES_COMP_CBB) + \n","                       (2 * FILENAMES_2019_CBB) + \n","                       (2 * FILENAMES_COMP_CBSD) + \n","                       (2 * FILENAMES_2019_CBSD) + \n","                       (2 * FILENAMES_COMP_CGM) + \n","                       (2 * FILENAMES_2019_CGM) + \n","                       (2 * FILENAMES_COMP_Healthy) + \n","                       (2 * FILENAMES_2019_Healthy))\n","    \n","    VALID_FILENAMES = tf.io.gfile.glob([GCS_PATH + '/Id_train%.2i*.tfrec' % x for x in idxV])\n","    np.random.shuffle(TRAIN_FILENAMES)\n","    \n","    ct_train = count_data_items(TRAIN_FILENAMES)\n","    ct_valid = count_data_items(VALID_FILENAMES)\n","    \n","    step_size = (ct_train // BATCH_SIZE)\n","    valid_step_size = (ct_valid // BATCH_SIZE)\n","    total_steps=(total_epochs * step_size)\n","    warmup_steps=(warmup_epochs * step_size)\n","    \n","    \n","    # Build TF datasets\n","    train_ds = strategy.experimental_distribute_dataset(get_dataset(TRAIN_FILENAMES, repeated=True, augment=True))\n","    valid_ds = strategy.experimental_distribute_dataset(get_dataset(VALID_FILENAMES, ordered=True, repeated=True, cached=True))\n","    train_data_iter = iter(train_ds)\n","    valid_data_iter = iter(valid_ds)\n","    \n","    \n","    # Step functions\n","    @tf.function\n","    def train_step(data_iter):\n","        def train_step_fn(x, y):\n","            with tf.GradientTape() as tape:\n","                probabilities = model(x, training=True)\n","                loss = loss_fn(y, probabilities, label_smoothing=.3)\n","            gradients = tape.gradient(loss, model.trainable_variables)\n","            optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n","            # update metrics\n","            train_accuracy.update_state(y, probabilities)\n","            train_loss.update_state(loss)\n","        for _ in tf.range(step_size):\n","            if COLAB:\n","                #print(COLAB)\n","                strategy.experimental_run_v2(train_step_fn, next(data_iter))\n","            else:\n","                strategy.experimental_run_v2(train_step_fn, next(data_iter))\n","\n","    @tf.function\n","    def valid_step(data_iter):\n","        def valid_step_fn(x, y):\n","            probabilities = model(x, training=False)\n","            loss = loss_fn(y, probabilities)\n","            # update metrics\n","            valid_accuracy.update_state(y, probabilities)\n","            valid_loss.update_state(loss)\n","        for _ in tf.range(valid_step_size):\n","            if COLAB:\n","                strategy.experimental_run_v2(valid_step_fn, next(data_iter))\n","            else:\n","                strategy.experimental_run_v2(valid_step_fn, next(data_iter))\n","    \n","    \n","    # Model\n","    model_path = models_path+f'model_{fold}.h5'\n","    with strategy.scope():\n","        model = model_fn((None, None, CHANNELS), N_CLASSES)\n","        unfreeze_model(model) # unfreeze all layers except \"batch normalization\"\n","        \n","        optimizer = optimizers.Adam(learning_rate=lambda: lrfn(tf.cast(optimizer.iterations, tf.float32)))\n","        loss_fn = losses.categorical_crossentropy\n","\n","        train_accuracy = metrics.CategoricalAccuracy()\n","        valid_accuracy = metrics.CategoricalAccuracy()\n","        train_loss = metrics.Sum()\n","        valid_loss = metrics.Sum()\n","    \n","    \n","    # Setup training loop\n","    step = 0\n","    epoch_steps = 0\n","    patience_cnt = 0\n","    best_val = 0\n","    history = {'loss': [], 'val_loss': [], 'accuracy': [], 'val_accuracy': []}\n","\n","    ### Train model\n","    for epoch in range(EPOCHS):\n","        epoch_start_time = time.time()\n","\n","        # Run training step\n","        train_step(train_data_iter)\n","        epoch_steps += step_size\n","        step += step_size\n","            \n","\n","        # Validation run at the end of each epoch\n","        if (step // step_size) > epoch:\n","            # Validation run\n","            valid_epoch_steps = 0\n","            valid_step(valid_data_iter)\n","            valid_epoch_steps += valid_step_size\n","\n","            # Compute metrics\n","            history['accuracy'].append(train_accuracy.result().numpy())\n","            history['loss'].append(train_loss.result().numpy() / (BATCH_SIZE * epoch_steps))\n","            history['val_accuracy'].append(valid_accuracy.result().numpy())\n","            history['val_loss'].append(valid_loss.result().numpy() / (BATCH_SIZE * valid_epoch_steps))\n","\n","            # Report metrics\n","            epoch_time = time.time() - epoch_start_time\n","            print(f'\\nEPOCH {epoch+1}/{EPOCHS}')\n","            print(f'time: {epoch_time:0.1f}s',\n","                  f\"loss: {history['loss'][-1]:0.4f}\",\n","                  f\"accuracy: {history['accuracy'][-1]:0.4f}\",\n","                  f\"val_loss: {history['val_loss'][-1]:0.4f}\",\n","                  f\"val_accuracy: {history['val_accuracy'][-1]:0.4f}\",\n","                  f'lr: {lrfn(tf.cast(optimizer.iterations, tf.int32).numpy()):0.4g}')\n","\n","            # Early stopping monitor\n","            if history['val_accuracy'][-1] >= best_val:\n","                best_val = history['val_accuracy'][-1]\n","                model.save_weights(model_path)\n","                print(f'Saved model weights at \"{model_path}\"')\n","                patience_cnt = 1\n","            else:\n","                patience_cnt += 1\n","            # if patience_cnt > ES_PATIENCE:\n","            #     print(f'Epoch {epoch:05d}: early stopping')\n","            #     break\n","\n","                \n","            # Set up next epoch\n","            epoch = step // step_size\n","            epoch_steps = 0\n","            train_accuracy.reset_states()\n","            train_loss.reset_states()\n","            valid_accuracy.reset_states()\n","            valid_loss.reset_states()\n","    \n","    \n","    ### RESULTS\n","    print(f\"#### FOLD {fold+1} OOF Accuracy = {np.max(history['val_accuracy']):.3f}\")\n","    \n","    history_list.append(history)\n","    # Load best model weights\n","    model.load_weights(model_path)\n","\n","    # OOF predictions\n","    ds_valid = get_dataset(VALID_FILENAMES, ordered=True)\n","    oof_labels.append([target.numpy() for img, target in iter(ds_valid.unbatch())])\n","    x_oof = ds_valid.map(lambda image, target: image)\n","    oof_pred.append(np.argmax(model.predict(x_oof), axis=-1))"],"execution_count":20,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.119.160.210:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.119.160.210:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.119.160.210:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.119.160.210:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","FOLD: 1\n","TRAIN: [ 0  1  3 ... 47 48 49] VALID: [ 2  4 10 11 22 27 28 31 38 41]\n","Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/xception/xception_weights_tf_dim_ordering_tf_kernels_notop.h5\n","83689472/83683744 [==============================] - 1s 0us/step\n","WARNING:tensorflow:From <ipython-input-20-d506d5d257e7>:71: StrategyBase.experimental_run_v2 (from tensorflow.python.distribute.distribute_lib) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","renamed to `run`\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:From <ipython-input-20-d506d5d257e7>:71: StrategyBase.experimental_run_v2 (from tensorflow.python.distribute.distribute_lib) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","renamed to `run`\n"],"name":"stderr"},{"output_type":"stream","text":["\n","EPOCH 1/10\n","time: 205.9s loss: 1.3046 accuracy: 0.6270 val_loss: 0.6878 val_accuracy: 0.8352 lr: 8e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 2/10\n","time: 144.8s loss: 1.1371 accuracy: 0.7967 val_loss: 0.5479 val_accuracy: 0.8632 lr: 7.759e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 3/10\n","time: 147.3s loss: 1.1050 accuracy: 0.8242 val_loss: 0.5948 val_accuracy: 0.8584 lr: 7.064e-05\n","\n","EPOCH 4/10\n","WARNING:tensorflow:5 out of the last 80 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:5 out of the last 80 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 143.8s loss: 1.0857 accuracy: 0.8417 val_loss: 0.5318 val_accuracy: 0.8748 lr: 6e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 5/10\n","WARNING:tensorflow:6 out of the last 81 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:6 out of the last 81 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 152.2s loss: 1.0707 accuracy: 0.8526 val_loss: 0.5359 val_accuracy: 0.8840 lr: 4.695e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 6/10\n","WARNING:tensorflow:7 out of the last 82 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:7 out of the last 82 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 133.8s loss: 1.0595 accuracy: 0.8626 val_loss: 0.5293 val_accuracy: 0.8835 lr: 3.305e-05\n","\n","EPOCH 7/10\n","WARNING:tensorflow:8 out of the last 83 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:8 out of the last 83 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 143.8s loss: 1.0456 accuracy: 0.8739 val_loss: 0.5191 val_accuracy: 0.8857 lr: 2e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 8/10\n","WARNING:tensorflow:9 out of the last 84 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:9 out of the last 84 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 135.0s loss: 1.0368 accuracy: 0.8821 val_loss: 0.5159 val_accuracy: 0.8880 lr: 9.358e-06\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 9/10\n","WARNING:tensorflow:10 out of the last 85 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:10 out of the last 85 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 140.9s loss: 1.0304 accuracy: 0.8865 val_loss: 0.5208 val_accuracy: 0.8857 lr: 2.412e-06\n","\n","EPOCH 10/10\n","WARNING:tensorflow:11 out of the last 86 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 86 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 142.7s loss: 1.0294 accuracy: 0.8889 val_loss: 0.5328 val_accuracy: 0.8835 lr: 8e-05\n","#### FOLD 1 OOF Accuracy = 0.888\n","WARNING:tensorflow:TPU system grpc://10.119.160.210:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.119.160.210:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.119.160.210:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.119.160.210:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","FOLD: 2\n","TRAIN: [ 0  1  2 ... 46 47 49] VALID: [ 7 14 18 26 29 33 34 35 45 48]\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","EPOCH 1/10\n","time: 207.1s loss: 1.2948 accuracy: 0.6364 val_loss: 0.6302 val_accuracy: 0.8369 lr: 8e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 2/10\n","time: 146.5s loss: 1.1356 accuracy: 0.8010 val_loss: 0.5850 val_accuracy: 0.8684 lr: 7.759e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 3/10\n","time: 149.8s loss: 1.1035 accuracy: 0.8273 val_loss: 0.5254 val_accuracy: 0.8738 lr: 7.064e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 4/10\n","WARNING:tensorflow:5 out of the last 80 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:5 out of the last 80 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 145.2s loss: 1.0847 accuracy: 0.8413 val_loss: 0.5938 val_accuracy: 0.8700 lr: 6e-05\n","\n","EPOCH 5/10\n","WARNING:tensorflow:6 out of the last 81 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:6 out of the last 81 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 142.7s loss: 1.0712 accuracy: 0.8528 val_loss: 0.5464 val_accuracy: 0.8819 lr: 4.695e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 6/10\n","WARNING:tensorflow:7 out of the last 82 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:7 out of the last 82 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 136.8s loss: 1.0579 accuracy: 0.8623 val_loss: 0.5292 val_accuracy: 0.8781 lr: 3.305e-05\n","\n","EPOCH 7/10\n","WARNING:tensorflow:8 out of the last 83 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:8 out of the last 83 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 143.9s loss: 1.0470 accuracy: 0.8732 val_loss: 0.5175 val_accuracy: 0.8821 lr: 2e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 8/10\n","WARNING:tensorflow:9 out of the last 84 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:9 out of the last 84 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 135.6s loss: 1.0363 accuracy: 0.8815 val_loss: 0.5179 val_accuracy: 0.8857 lr: 9.358e-06\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 9/10\n","WARNING:tensorflow:10 out of the last 85 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:10 out of the last 85 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 138.3s loss: 1.0313 accuracy: 0.8886 val_loss: 0.5181 val_accuracy: 0.8842 lr: 2.412e-06\n","\n","EPOCH 10/10\n","WARNING:tensorflow:11 out of the last 86 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 86 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 142.0s loss: 1.0272 accuracy: 0.8901 val_loss: 0.5288 val_accuracy: 0.8821 lr: 8e-05\n","#### FOLD 2 OOF Accuracy = 0.886\n","WARNING:tensorflow:TPU system grpc://10.119.160.210:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.119.160.210:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.119.160.210:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.119.160.210:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","FOLD: 3\n","TRAIN: [ 0  1  2 ... 47 48 49] VALID: [ 8 13 15 16 20 25 30 32 42 43]\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","EPOCH 1/10\n","time: 209.5s loss: 1.3136 accuracy: 0.6171 val_loss: 0.6449 val_accuracy: 0.8461 lr: 8e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 2/10\n","time: 146.9s loss: 1.1326 accuracy: 0.8024 val_loss: 0.5865 val_accuracy: 0.8449 lr: 7.759e-05\n","\n","EPOCH 3/10\n","time: 149.8s loss: 1.1024 accuracy: 0.8255 val_loss: 0.5494 val_accuracy: 0.8764 lr: 7.064e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 4/10\n","time: 145.3s loss: 1.0835 accuracy: 0.8423 val_loss: 0.5335 val_accuracy: 0.8804 lr: 6e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 5/10\n","time: 144.0s loss: 1.0690 accuracy: 0.8522 val_loss: 0.5417 val_accuracy: 0.8752 lr: 4.695e-05\n","\n","EPOCH 6/10\n","time: 139.1s loss: 1.0592 accuracy: 0.8607 val_loss: 0.5341 val_accuracy: 0.8819 lr: 3.305e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 7/10\n","time: 141.4s loss: 1.0467 accuracy: 0.8709 val_loss: 0.5291 val_accuracy: 0.8911 lr: 2e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 8/10\n","time: 134.9s loss: 1.0356 accuracy: 0.8811 val_loss: 0.5201 val_accuracy: 0.8892 lr: 9.358e-06\n","\n","EPOCH 9/10\n","time: 143.0s loss: 1.0292 accuracy: 0.8889 val_loss: 0.5195 val_accuracy: 0.8887 lr: 2.412e-06\n","\n","EPOCH 10/10\n","time: 140.0s loss: 1.0275 accuracy: 0.8873 val_loss: 0.5323 val_accuracy: 0.8854 lr: 8e-05\n","#### FOLD 3 OOF Accuracy = 0.891\n","WARNING:tensorflow:TPU system grpc://10.119.160.210:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.119.160.210:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.119.160.210:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.119.160.210:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","FOLD: 4\n","TRAIN: [ 0  2  3 ... 46 47 48] VALID: [ 1  5  6 12 17 23 24 37 40 49]\n","\n","EPOCH 1/10\n","time: 212.9s loss: 1.3156 accuracy: 0.6136 val_loss: 0.6121 val_accuracy: 0.8598 lr: 8e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_3.h5\"\n","\n","EPOCH 2/10\n","time: 154.2s loss: 1.1378 accuracy: 0.7952 val_loss: 0.5219 val_accuracy: 0.8738 lr: 7.759e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_3.h5\"\n","\n","EPOCH 3/10\n","time: 149.1s loss: 1.1093 accuracy: 0.8186 val_loss: 0.5942 val_accuracy: 0.8530 lr: 7.064e-05\n","\n","EPOCH 4/10\n","WARNING:tensorflow:5 out of the last 80 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:5 out of the last 80 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 154.1s loss: 1.0885 accuracy: 0.8376 val_loss: 0.5188 val_accuracy: 0.8878 lr: 6e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_3.h5\"\n","\n","EPOCH 5/10\n","WARNING:tensorflow:6 out of the last 81 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:6 out of the last 81 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 142.6s loss: 1.0733 accuracy: 0.8508 val_loss: 0.5084 val_accuracy: 0.8873 lr: 4.695e-05\n","\n","EPOCH 6/10\n","WARNING:tensorflow:7 out of the last 82 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:7 out of the last 82 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 144.3s loss: 1.0615 accuracy: 0.8591 val_loss: 0.5207 val_accuracy: 0.8897 lr: 3.305e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_3.h5\"\n","\n","EPOCH 7/10\n","WARNING:tensorflow:8 out of the last 83 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:8 out of the last 83 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 140.5s loss: 1.0479 accuracy: 0.8709 val_loss: 0.5178 val_accuracy: 0.8873 lr: 2e-05\n","\n","EPOCH 8/10\n","WARNING:tensorflow:9 out of the last 84 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:9 out of the last 84 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 143.9s loss: 1.0387 accuracy: 0.8793 val_loss: 0.5092 val_accuracy: 0.8909 lr: 9.358e-06\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_3.h5\"\n","\n","EPOCH 9/10\n","WARNING:tensorflow:10 out of the last 85 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:10 out of the last 85 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 142.3s loss: 1.0313 accuracy: 0.8851 val_loss: 0.5189 val_accuracy: 0.8902 lr: 2.412e-06\n","\n","EPOCH 10/10\n","WARNING:tensorflow:11 out of the last 86 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 86 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 142.6s loss: 1.0291 accuracy: 0.8886 val_loss: 0.5319 val_accuracy: 0.8883 lr: 8e-05\n","#### FOLD 4 OOF Accuracy = 0.891\n","WARNING:tensorflow:TPU system grpc://10.119.160.210:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.119.160.210:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.119.160.210:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.119.160.210:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","FOLD: 5\n","TRAIN: [ 1  2  4 ... 45 48 49] VALID: [ 0  3  9 19 21 36 39 44 46 47]\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f9dab94ee18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","EPOCH 1/10\n","time: 214.2s loss: 1.3109 accuracy: 0.6141 val_loss: 0.5972 val_accuracy: 0.8653 lr: 8e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 2/10\n","time: 154.6s loss: 1.1383 accuracy: 0.7963 val_loss: 0.5884 val_accuracy: 0.8556 lr: 7.759e-05\n","\n","EPOCH 3/10\n","time: 149.4s loss: 1.1071 accuracy: 0.8217 val_loss: 0.5696 val_accuracy: 0.8738 lr: 7.064e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 4/10\n","time: 155.5s loss: 1.0855 accuracy: 0.8395 val_loss: 0.5357 val_accuracy: 0.8859 lr: 6e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 5/10\n","time: 143.2s loss: 1.0743 accuracy: 0.8493 val_loss: 0.5416 val_accuracy: 0.8845 lr: 4.695e-05\n","\n","EPOCH 6/10\n","time: 143.7s loss: 1.0609 accuracy: 0.8595 val_loss: 0.5229 val_accuracy: 0.8816 lr: 3.305e-05\n","\n","EPOCH 7/10\n","time: 142.0s loss: 1.0471 accuracy: 0.8709 val_loss: 0.5237 val_accuracy: 0.8857 lr: 2e-05\n","\n","EPOCH 8/10\n","time: 145.8s loss: 1.0376 accuracy: 0.8795 val_loss: 0.5183 val_accuracy: 0.8866 lr: 9.358e-06\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 9/10\n","time: 142.7s loss: 1.0310 accuracy: 0.8858 val_loss: 0.5189 val_accuracy: 0.8906 lr: 2.412e-06\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 10/10\n","time: 143.6s loss: 1.0291 accuracy: 0.8877 val_loss: 0.5331 val_accuracy: 0.8819 lr: 8e-05\n","#### FOLD 5 OOF Accuracy = 0.891\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"NQyHtXnRCaO5","papermill":{"duration":0.130935,"end_time":"2021-01-20T23:41:32.592224","exception":false,"start_time":"2021-01-20T23:41:32.461289","status":"completed"},"tags":[]},"source":["## Model loss graph"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:41:32.862698Z","iopub.status.busy":"2021-01-20T23:41:32.861475Z","iopub.status.idle":"2021-01-20T23:41:35.936240Z","shell.execute_reply":"2021-01-20T23:41:35.935506Z"},"id":"_7pUdch3CaO6","papermill":{"duration":3.212527,"end_time":"2021-01-20T23:41:35.936368","exception":false,"start_time":"2021-01-20T23:41:32.723841","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1612111814269,"user_tz":-540,"elapsed":8756312,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"066e1ba6-096b-4860-9c69-901be5cde0c7"},"source":["for fold, history in enumerate(history_list):\n","    print(f'\\nFOLD: {fold+1}')\n","    plot_metrics(history)"],"execution_count":21,"outputs":[{"output_type":"stream","text":["\n","FOLD: 1\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 2 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","FOLD: 2\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 2 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","FOLD: 3\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 2 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","FOLD: 4\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 2 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","FOLD: 5\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 2 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"ImheYrtKCaO7","papermill":{"duration":0.140565,"end_time":"2021-01-20T23:41:36.235070","exception":false,"start_time":"2021-01-20T23:41:36.094505","status":"completed"},"tags":[]},"source":["# Model evaluation\n","\n","Now we can evaluate the performance of the model, first, we can evaluate the usual metrics like, `accuracy`, `precision`, `recall`, and `f1-score`, `scikit-learn` provides the perfect function for this `classification_report`.\n","\n","We are evaluating the model on the `OOF` predictions, it stands for `Out Of Fold`, since we are training using `K-Fold` our model will see all the data, and the correct way to evaluate each fold is by looking at the predictions that are not from that fold.\n","\n","## OOF metrics"]},{"cell_type":"markdown","metadata":{"id":"I_QvO8rPCaO7","papermill":{"duration":0.142773,"end_time":"2021-01-20T23:41:36.524904","exception":false,"start_time":"2021-01-20T23:41:36.382131","status":"completed"},"tags":[]},"source":["#### I am still having some problems to get the real model `OOF` scores while using `TPU Pods`, so the results here and the confusion matrix are just placeholders."]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:41:36.817847Z","iopub.status.busy":"2021-01-20T23:41:36.816550Z","iopub.status.idle":"2021-01-20T23:41:36.871365Z","shell.execute_reply":"2021-01-20T23:41:36.870279Z"},"id":"q7TfhkICCaO7","papermill":{"duration":0.205034,"end_time":"2021-01-20T23:41:36.871548","exception":false,"start_time":"2021-01-20T23:41:36.666514","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1612111814270,"user_tz":-540,"elapsed":8756306,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"c391bdf9-efb0-4c45-aee7-d2b3f09c05f3"},"source":["y_true = np.concatenate(oof_labels)\n","y_true = np.argmax(y_true, axis=-1)\n","y_pred = np.concatenate(oof_pred)\n","\n","print(classification_report(y_true, y_pred, target_names=CLASSES))"],"execution_count":22,"outputs":[{"output_type":"stream","text":["                              precision    recall  f1-score   support\n","\n","    Cassava Bacterial Blight       0.66      0.67      0.67      1086\n","Cassava Brown Streak Disease       0.83      0.82      0.82      2189\n","        Cassava Green Mottle       0.84      0.78      0.81      2386\n","      Cassava Mosaic Disease       0.95      0.97      0.96     13158\n","                     Healthy       0.75      0.74      0.74      2576\n","\n","                    accuracy                           0.89     21395\n","                   macro avg       0.81      0.80      0.80     21395\n","                weighted avg       0.89      0.89      0.89     21395\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"pIAJafCnCaO7","papermill":{"duration":0.1407,"end_time":"2021-01-20T23:41:37.153525","exception":false,"start_time":"2021-01-20T23:41:37.012825","status":"completed"},"tags":[]},"source":["# Confusion matrix\n","\n","Let's also take a look at the confusion matrix, this will give us an idea about what classes the model is mixing or having a hard time."]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:41:37.451948Z","iopub.status.busy":"2021-01-20T23:41:37.451220Z","iopub.status.idle":"2021-01-20T23:41:37.902193Z","shell.execute_reply":"2021-01-20T23:41:37.902770Z"},"id":"dw2F8Wk2CaO7","papermill":{"duration":0.608362,"end_time":"2021-01-20T23:41:37.902957","exception":false,"start_time":"2021-01-20T23:41:37.294595","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":732},"executionInfo":{"status":"ok","timestamp":1612111814648,"user_tz":-540,"elapsed":8756678,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"3fe6172e-9e06-4906-debd-9bdf800d74a1"},"source":["fig, ax = plt.subplots(1, 1, figsize=(20, 12))\n","cfn_matrix = confusion_matrix(y_true, y_pred, labels=range(len(CLASSES)))\n","cfn_matrix = (cfn_matrix.T / cfn_matrix.sum(axis=1)).T\n","df_cm = pd.DataFrame(cfn_matrix, index=CLASSES, columns=CLASSES)\n","ax = sns.heatmap(df_cm, cmap='Blues', annot=True, fmt='.2f', linewidths=.5).set_title('Train', fontsize=30)\n","plt.show()"],"execution_count":23,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAABLIAAALLCAYAAADt4avKAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdeXxM9/7H8fdkQZIJid4Iak8IfkWUFrWEKLUl9qVa2t62uqGondquWopStNXqorVftURi6SKIbtTScqsJolTstWSbSDLJ/P6YayoSS69I5tTr+XjM48GZT875fifncRyf+Xy+x2Sz2WwCAAAAAAAAnJxLYQ8AAAAAAAAAuB0ksgAAAAAAAGAIJLIAAAAAAABgCCSyAAAAAAAAYAgksgAAAAAAAGAIJLIAAAAAAABgCCSyAAAA7nFr1qxRUFCQgoKCtGbNmsIeDgAAwA25FfYAAAAA/g4SEhLUsmXLfNnX1KlT1aVLl3zZFwAAwN8JFVkAAAAAAAAwBJPNZrMV9iAAAACMLi0tTd9+++0N3//hhx+0ePFiSVKDBg3Ut2/fG8bWrFlTZcuWzfcxAgAAGB2thQAAAPnAw8NDjz766A3fT0pKcvy5bNmyN40FAABA3mgtBAAAAAAAgCGQyAIAAHACeT058MCBAxozZoxatWql4OBgBQUFaefOnY6fsdls2r17t2bPnq2+ffuqSZMmeuCBBxQcHKzQ0FANHjxY0dHR/9Oxr3f1/T59+kiSLBaLPvroI3Xp0kUPPfSQgoOD1b59e82aNUuJiYn58IkAAADkRmshAACAE/rggw80Z84cZWVl3TBm9OjReSaeMjMzdfLkSZ08eVIbN25U06ZNNWfOHJnN5nwZ24kTJ/Tiiy/qyJEjObYfOXJER44c0YYNG/TZZ5+pXLly+XI8AACAq0hkAQAAOJmNGzdqx44d8vb2VqdOnfTAAw/IxcVFsbGx8vb2dsRduXJFRYoU0cMPP6xatWqpQoUK8vDw0MWLF3Xs2DGtX79ely9f1o4dOzR8+HC9++67dzy2lJQU9evXT7/99ptatmyppk2bqkSJEkpISNDy5ct16tQpnTx5UiNGjNDSpUvv+HgAAADXIpEFAADgZHbs2KEqVapo0aJF8vf3d2wPDw/PEffEE09o4sSJKl68eJ77GTx4sEaNGqXNmzdry5Yt2rVrlx5++OE7GtvBgwfl7u6u9957Ty1atMjxXvfu3dWtWzclJCRo9+7d2r9/v2rXrn1HxwMAALgWa2QBAAA4GZPJpNmzZ+dIYuWlfv36N0xiSZKnp6feeOMNeXp6SpIiIiLyZXwvvfRSriSWJPn6+urFF190/H3Hjh35cjwAAICrSGQBAAA4mfr166t69er5si+z2axq1apJkvbv33/H+3N1ddWTTz55w/cbNmzo+HN8fPwdHw8AAOBatBYCAAA4mXr16t12bEZGhjZu3Kjo6GjFxsbqjz/+kMVikc1myxV75syZOx5bpUqVVKJEiRu+f20VGU8vBAAA+Y1EFgAAgJO5VUvhVXFxcRo4cKCOHTt2W/EpKSl3MCo7X1/fm75fpEgRx58zMjLu+HgAAADXIpEFAADgZIoVK3bLmMuXL+uZZ57RhQsXJEllypRR8+bNVaVKFZUsWVJFixaVyWSSJM2ZM0eHDx9Wdnb2HY/NxYWVKQAAQOEhkQUAAGBAS5YscSSxOnfurMmTJ8vNLe9bu/fee68ghwYAAHDX8JUaAACAAX3//feSJDc3N40ePfqGSSxJOnXqVEENCwAA4K4ikQUAAGBAf/zxhyTJx8dHxYsXv2HcwYMHdfHixYIaFgAAwF1FIgsAAMCAPDw8JEkXLly46SLu77zzTkENCQAA4K4jkQUAAGBAtWrVkiTZbDbNmTMn1/tXt3/99dcFPTQAAIC7hsXeAQAADKh3795avXq1srKytHjxYsXGxqpVq1by8/PT6dOnFRUVpYMHDyowMFBFixbVL7/8UthDBgAAuGMksgAAAAyoRo0aGjt2rP71r38pOztbP/74o3788cccMQEBAXr33Xc1duzYQholAABA/iKRBQAAYFC9e/dWzZo19cknn2jPnj26fPmyihcvrgoVKqhNmzbq2bOnYy0tAACAvwOTzWazFfYgAAAAAAAAgFthsXcAAAAAAAAYAoksAAAAAAAAGAKJLAAAAAAAABgCiSwAAAAAAAAYAoksAAAAAAAAGIJbYQ8AAAAAAAAAN+dRt3+hHj9t3/xCPf5VJLJwTwmesKWwhwDckZ8mtNTZpMzCHgZwR/yLu0uSLBm2Qh4JcGc8i5gkSZfTsgp5JMCd8fFw1c8nkgt7GMAdqVPeu7CHgAJCayEAAAAAAAAMgYosAAAAAAAAZ2eiFkmiIgsAAAAAAAAGQSILAAAAAAAAhkBrIQAAAAAAgLMzmQp7BE6BiiwAAAAAAAAYAhVZAAAAAAAAzo7F3iVRkQUAAAAAAACDIJEFAAAAAAAAQ6C1EAAAAAAAwNmx2LskKrIAAAAAAABgEFRkAQAAAAAAODsWe5dERRYAAAAAAAAMgkQWAAAAAAAADIHWQgAAAAAAAGfHYu+SqMgCAAAAAACAQVCRBQAAAAAA4OxY7F0SFVkAAAAAAAAwCBJZAAAAAAAAMARaCwEAAAAAAJwdi71LoiILAAAAAAAABkFFFgAAAAAAgLNjsXdJVGQBAAAAAADAIEhkAQAAAAAAwBBoLQQAAAAAAHB2LPYuiYosAAAAAAAAGASJLAAAAAAAABgCrYUAAAAAAADOjqcWSqIiCwAAAAAAAAZBRRYAAAAAAICzY7F3SVRkAQAAAAAAwCBIZAEAAAAAAMAQaC0EAAAAAABwdiz2LomKLAAAAAAAABgEFVkAAAAAAADOjoosSVRkAQAAAAAAwCBIZAEAAAAAAMAQaC0EAAAAAABwdi6mwh6BU6AiCwAAAAAAAIZARRYAAAAAAICzY7F3SVRkAQAAAAAAwCBIZAEAAAAAAMAQaC0EAAAAAABwdiYWe5eoyAIAAAAAAIBBUJEFAAAAAADg7FjsXRIVWQAAAAAAADAIElkAAAAAAAAwBFoLAQAAAAAAnB2LvUuiIgsAAAAAAAAGQUUWAAAAAACAs2Oxd0lUZAEAAAAAAMAgSGQBAAAAAADAEGgtBAAAAAAAcHYs9i6JiiwAAAAAAAAYBIksAAAAAAAAGAKthQAAAAAAAM6OpxZKoiILAAAAAAAABkFFFgAAAAAAgLNjsXdJVGQBuIXiHm56q2ctfT+6uTYOekRta/nfMLZ6GW999MyD+m50iLYMbareDcpLkkqXKKrvRofkeP00oaX6NKpQUNPAPS4pMVFjhg1U66YPqXtYK321eUOecTabTe/Ne0sdHm2sDo821nvz3pLNZpMk/bxvjx5r9lCOV7OHHtC26K8Kciq4xyUmXtaQV/ur0cN11bZ1qDZtiMwzzmaz6e23Zqp5kwZq3qSB3n5rpuNclqR/TXhdncLa6MHaNbR+3ZqCGj7gkJh4WcMHD1BIw3rq2LalvtgYlWeczWbT/Dmz1CqkkVqFNNL8ObNynMtXbYyMUIPgmopY8/ndHjrgkJKUqBnjh6pPhyZ6uXcHfbNlc55x//lptya+9oKeCg/RK0+E5Xo/7pefNeqVvuob1kxDn++l2AM/3e2hA4ZmuIqszMxMvfvuu9q4caOKFCkiV1dXNWzYUK+99prc3d0Le3i3Zd68eVq2bJlKlSolm80mDw8PTZw4UdWrV/+f9peQkKBvv/1WPXv2/J9+fsuWLdq9e7dGjBhx07h58+bJYrHkGdenTx+dOnVKZrNZmZmZCggI0JQpU+Tt7a01a9Zo27Ztmjt3rg4cOKBFixZp1qxZt5xT165dtXPnzlzvJSUlaeXKlXr++ef/2kTxPxnVLkiZWTaFztyhoNJmzesdrENnUhR/PjVHnI+nu959MlgzNx/SVwfPyd3VRf7Fi0qSziSm65Ep2x2xZX2KKXLgI9ry67kCnQvuXbPfnCw3N3et+2K7jhyK1YhBLyuwapAqBwTmiFu/dpW+2Ratj5eulslk0pD+z6ts2fvVsWtP1albT1/E/OiI3bdnl0YO6a8GjRoX9HRwD5v6xiS5u7try7ZvFBcbq4GvvKBqQdUVEFg1R9zqVSu1devXWvl5hEwmk17s90+VLVdO3Xv0kiRVC6qu1m3a6e3ZMwtjGoBmTJ0sd3d3bYqO0aG4WA0Z8JKqVgtSlevO5bWr/63tW7doyb/XyiSTBrz0rMref7+6dO/liElKStSijz5Qleuu6cDd9uG86XJzc9fCVV/q2JFDmjrmVVUMqKrylQJyxBUrVkwt2oSrcYvHtHb5JzneS0lK1PSxQ/T8oFFq0KSFvtn6haa/PljzFkfI7F28IKcDGIbhKrJGjRqlI0eOaPXq1YqMjNTnn3+uypUrKyMjo7CH9pd06tRJERERWr9+vcLDwzVz5v9+I3ny5EmtXLnyf/pZq9Wqli1b3jKJdTvGjh2riIgIbdiwQa6urlq+fHmumFq1at0yiXUrSUlJ+vDDD+9oH7g9xdxd9GjNUnpna7zSMrL00++J2h53Xu3rlM4V26dRBX135II2HjirzCybLBlZ+u0PS577DatTRnuPX9apy1fu9hQApaVZtD36Kz334gB5enqqdvCDatysub7YmLuSZXNUhHo+8ZRK+ZeWXyl/9XziKW2Kishzv5uj1qt5aGt5eHje7SkAkqQ0i0VbvvpKL/cfKE9PL9V9sJ5CmocqKnJ9rtjI9evUp+8z8i9dWqX8/dXnqWcUGbHW8X7Px59Qg4aNVLRo0YKcAiDJfl3e+vWXeuEV+7kcXLeemoa0yLPCcOP6CPXu87T8/e3n8hN9nlHU+nU5Yt6dO1s9Hn9SPj6+BTUFQFfS0rRzR7R6PvOiinl4qnqtYNV/pJlivtqYKzaw+gNq1qq9SpW5P9d7cQf3y6fkfWoU8qhcXF3V7NF2Kl7CV7u+iS6IacBoTC6F+3IShqrIOnbsmL7++mtt375dZrNZkuTm5uaoRIqLi9PEiROVlpam9PR09ejRQ08//bQkaeXKlVq0aJGKFCmi7OxszZkzR5UrV9akSZP0ww8/qEiRIvL09NSKFStktVr1wgsv6NKlS0pPT1ft2rU1ceJEFSlSRK1bt9bcuXMd1VNLlizRL7/8oqlTp2r69OnatWuXMjMz5evrqylTpuj++3NfrK6XkpKiEiVKSNJNjy1J77//vqKiomQymeTp6ally5Zp0qRJSkhIUMeOHVWxYkXNnTtXR48e1ZQpU3Tp0iVlZmbqqaeeUteuXSVJQUFB6t+/v7Zt26amTZuqQoUKjoqp8+fPa8iQIUpNTVV6erpCQkI0fPjwv/R7slqtunLlimNO19q5c6emT5+uNWvWOD6/zz77TN7e3goJCdHSpUtzVGHNnj1b27dvV1pamt544w3Vr19fkyZNUnJysjp27CgPDw+tWLHiL40Pt6/ifZ6yZtv0+4U0x7ZDZ1NUr6JPrtha5YrryNlUffpsPZUv6akDCYmaujFOZxLTc8V2qFNaC2OO3c2hAw4nfj8uV1c3la9YybEtoGqQft67O1fssaPxCqwW5Ph7YNUg/Xb0SK64tDSLtkV/qWlvzb8rYwbycvz4Mbm5uapipcqObdWCgrRn94+5Yo/GH1G1oOo54uKPHC6QcQK38vvxY3J1c1OFa67LVasFad+e3Nflo0ePqGpQUI643+L/vC7/cmC/fj34i4aPHqctX+bd1gXcDacTjsvV1VVly1V0bKtYpZoO7t/7l/d1fbusTTb9/lv8HY8R+LsyVCLr4MGDqlixYp4JEkm6//77Hcmq1NRUde/eXU2bNlVAQIDefPNNbdq0SaVKlVJGRoaysrIUGxurnTt3auPGjXJxcVFiYqIkydXVVTNnzpSvr69sNptGjBih1atX6/HHH1enTp20du1ajRo1SpK0Zs0ax5+ff/55R2XTqlWrNHPmTM2ePTvPsa5bt07fffedEhMTZbVatXjx4lsee+3atYqOjtby5ctlNpt16dIlubi4aNy4cTmSQ1arVUOHDtWMGTMUEBCglJQUde3aVcHBwQoIsJe5Fi1aVKtXr3bM4arixYtrwYIF8vLyUmZmpp599lnFxMSoWbNmt/z9TJ48WXPmzNHp06dVuXJlde7c+abxsbGxev/99xUREaGSJUtq8uTJOd6/fPmygoODNXjwYK1fv14zZ87UihUrNG7cOHXt2lUREXlXSSD/eBZxU2q6Nce2lCtWeRXNfenwL15MNcp468XP9unwuVQNahWoaV0f0NMf78kRV7eCj+4zF9FXB2krRMFIs1jk5eWVY5vZ7C2LJTV3bJpFXv/9okSSvMzeSrNYZLPZZLpmcc2YrV+rhI+vgh986O4NHLiOxWKRl5c5xzaz2VupqbnPZYvFIrPZO0ecJY9zGSgMlhtdl/M4l9OuO5e9zGbHuZydna03p/5LQ0eOlYuL81QK4N5w5UqaPDxzXpM9vcy6ksf9xc1Uq1FLly6c1zfRm9Ww2aP6Jnqzzp5KUEY6nQvIA/+GSzJYIutWrly5ogkTJiguLk4mk0nnzp1TbGysAgIC1LBhQ40cOVItWrRQ8+bNVb58eZUvX15Wq1VjxoxRgwYN1KJFC0lSdna2Pv74Y8XExCg7O1uJiYkqVqyYJHtLYI8ePTRs2DDFx8crKSlJ9evXlyTFxMRo2bJlslgsslqtNxzn1f1cTXqtW7dOgwcP1rp162567K1bt+rxxx93VKP5+uZdPn3s2DHFx8dryJAhjm2ZmZk6evSoI5F1oyRTVlaW3nzzTe3bt082m01//PGHYmNjbyuRNXbsWLVo0UJZWVkaP368ZsyYoTFjxtwwfteuXQoJCVHJkiUlSd26dVNk5J8l5Z6eno7fSXBwsKZPn37LMSB/WTJyJ628iuZObknSlcwsRf96Wb+cSpYkvb/tqLaPCJG5qKtS0rMccWHBpbXl4HmlZWTl2gdwN3h4eub6j35qaoo8Pb1yx3rkjLWkpsjD0zPXf/w3R61Xm3ZhJARQoDw9PZWampJjW0pqSq6EQF6xqSkp8szjXAYKg+eNrst5nMsenp5KTbnmXE5NdZzLq/+9XIFVq6lW7Tp3fczA9YoV81CaJec1Oc2SqmJ53F/cjHcJHw2fNEuL339bH817U3XqN1StBx9WSb8bP2AJuNcZ6quLmjVr6vjx447Kqeu99dZb8vPz09q1a7V+/XrVrl1b6en2tqb58+dr0KBBSktLU9++fbV9+3Z5e3trw4YNateuneLi4tS+fXudP39ekZGR2rNnj5YuXarIyEj17t3bsQZX2bJlFRgYqJiYGK1du1adO3eWyWTSyZMnNXXqVM2aNUtRUVGaMmXKba/b1aZNG/3666+6ePHiTY99u2w2m3x9fRUREeF4RUdHq1WrVo4YT8+813T55JNPlJSUpFWrVikyMlKPPvqo4zO8Xa6urmrVqpW+++67v/Rz17vaTilJLi4ut0wOIv8dv2CRm4tJFUp6OLZVK23OtdC7JB0+m6Jri6JzP09IKurmolY1/bX+59P5P1jgBspXqKisLKtO/H7csS3+cJwqVcm9KHClKgGKPxTn+PuRw3GqfF3c2TOn9dPeH/VY+/C7N2ggDxUrVpLVmqXjx485th2Ki1OVgKq5YqsEBOpQXOyfcYfici0IDxSWChUrKctq1e/XnMuHD8XluVh7lSqBOnzNdfnwoVjHgzp+3PmDtkdvUduWTdW2ZVPt/3mf3n7rTc2YOjnXfoD8VqZcRWVlZel0wu+ObcfjD6l8xSp/eV8169TT1Hc/0ydrozVg5CSd/P2YAoP+Lz+HC/ytGCqRValSJYWGhmrcuHFK+e83M1lZWVq1apVSU1OVnJys0qVLy83NTYcOHdLu3fY+e6vVqhMnTqh27drq16+fGjdu7EgcpaWlqWnTpho6dKi8vb114sQJJScny9fXV2azWcnJyYqKyvk44M6dO2vVqlWKiopyVDalpKTI3d1dfn5+ys7O/kvrNu3cuVM+Pj7y8fG56bFbtGih5cuXO+Z+6dIlSZLZbHZsk6TKlSurWLFiWrfuz4Uw4+Pjc8TcSHJysvz8/FS0aFGdPXtWW7Zsue15XD+nSpUq3TTm4YcfVkxMjC5evChJWrt27U3jrzKbzbpy5QqJrQJwJTNbW349r5daVFExdxcFly+h5kF+2vDzmVyxET+dVmh1PwWVNsvNxaR+zSpr7/HLOaqxQmv4KflKpn787VJBTgP3OA8PTzVr8ag+fn++0tIsOvDzXn2zfasea5f78ddt2odr5bJPdf7cWf1x/pxWLvlUbTt0zBHz5aZI/V/tYN1frkJBTQGQZK9MCX20ld57Z67SLBb9tG+vtm/dog5huZOqHcI7aclni3Tu7FmdO3dWiz/9RGEd/6zGzszMUHp6umw2m6xWq9LT05WdnV2Q08E9zMPDU81bttIH79mvyz/v26uYbdFq2z73dbldWLiWL/lU586e1flz57Tss0XqEN5JkjRu0hStXBupJSvXaMnKNapR8wE998LLeqn/qwU9JdyDinl4qEGTFlr56QJdSUtT7H9+0o/fbVezVu1yxWZnZysjI11ZWVbZbDZlZKTLmpnpeP+3w7GyWq2ypKZo8ftv6x+l/BX8UKOCnA6MgsXeJRmwtXDatGl655131LVrV7m7uys7O1shISEqUqSIXnrpJQ0fPtzxJMOHHrKvXZKdna2RI0cqOTlZJpNJZcqU0WuvvaZTp07p9ddfl9VqVVZWlpo1a6bg4GBVrVpVW7ZsUZs2bXTfffepXr16OaqSWrdurUmTJqlWrVoqW7asJPsC6m3atFG7du3k6+urkJAQRyItL1fXyLLZbHJzc9Pbb78tFxcXderU6YbH7tSpk86ePauePXvKzc1Nnp6eWrp0qYKCglS5cmV16NBBVapU0dy5c7VgwQJNmTJFH330kbKzs3Xfffdpzpw5t/x8+/Tpo1dffVUdOnSQv7+/GjW6/Qvo1TWyrFarypQpo4kTJ940vnr16nruuefUq1cvmc1mNWzYUN7e3jf9GUny8fFRWFiYwsLCVKJECRZ7v8umbIjVxI41tXVYM11Oy9SUDbGKP5+quhV89M6TdfTIlO2SpB9/u6R5W+I1r3cdFXN31b7fL2vU6v/k2FdYnTKKyiMJBtxtQ0a8rmn/el0dW4eoeIkSGjLydVUOCNTP+/Zo+Ksv6osY+2LZ4V166NTJBD39uP0//B06dlV4lx459vXFhkj16vN0QU8BkCSNHjtOE14fo9DmjeVTwkejx45XQGBV7d2zW/1f6qfvdtkXGe7WvadOJpxQ9y72JFfnrt3UrXtPx35e6vesY5H4n3/ap39NHKeFH3+q+g81KPhJ4Z40fPTrmjx+rNq0aKoSPiU0YvQ4VQmsqn17d2vwKy9o2/f2NTY7d+upkwkJeqK7/UuF8M7d1Lmb/Vz2Ll48xz7d3d3l5WWW+TbuJ4H88NzAkXp35iQ9372VzN4l9Pyro1S+UoB+PbBPU0YN1OKoHZKkX/fv1cShLzp+7sl2jVWz9oOa8NYHkqSIf3+mfTu/lSQFP/SIhk74359oD9wLTLbrH5EAFKCUlBTHml/z5s3T8ePHNXPm3btwB0/43yrMAGfx04SWOpuUeetAwIn5F3eXJFkyuAWBsXkWsa85djmNdR9hbD4ervr5RHJhDwO4I3XK//2T2B5h7xbq8dMiXy7U419luIos/L3MmjVLe/fuVWZmpsqXL69JkyYV9pAAAAAAAICTIpGFQjV+/PjCHgIAAAAAADAIElkAAAAAAADOzmQq7BE4BedZdh4AAAAAAAC4CSqyAAAAAAAAnJ2JWiSJiiwAAAAAAAAYBIksAAAAAAAAGAKthQAAAAAAAM6Oxd4lUZEFAAAAAAAAg6AiCwAAAAAAwNmx2LskKrIAAAAAAABgECSyAAAAAAAAYAi0FgIAAAAAADg7FnuXREUWAAAAAAAADIJEFgAAAAAAAAyB1kIAAAAAAAAnZ6K1UBIVWQAAAAAAADAIKrIAAAAAAACcHBVZdlRkAQAAAAAAwBBIZAEAAAAAAMAQaC0EAAAAAABwdnQWSqIiCwAAAAAAAAZBRRYAAAAAAICTY7F3OyqyAAAAAAAAYAgksgAAAAAAAGAItBYCAAAAAAA4OVoL7ajIAgAAAAAAgCFQkQUAAAAAAODkqMiyoyILAAAAAAAAhkAiCwAAAAAAAIZAayEAAAAAAICTo7XQjoosAAAAAAAAGAIVWQAAAAAAAM6OgixJVGQBAAAAAADAIEhkAQAAAAAAwBBoLQQAAAAAAHByLPZuR0UWAAAAAAAADIGKLAAAAAAAACdHRZYdFVkAAAAAAAAwBBJZAAAAAAAAMARaCwEAAAAAAJyc0VoLf/vtN40cOVKXL1+Wj4+Ppk+frkqVKuWIuXDhgkaNGqXTp0/LarWqQYMGGjt2rNzcbpyuoiILAAAAAAAA+Wr8+PHq3bu3vvjiC/Xu3Vvjxo3LFbNgwQIFBAQoMjJS69ev1y+//KIvv/zypvslkQUAAAAAAIB8c+HCBR08eFAdOnSQJHXo0EEHDx7UxYsXc8SZTCalpqYqOztbGRkZyszMlL+//033TWshAAAAAACAkyvs1sKkpCQlJSXl2l68eHEVL148x7bTp0/L399frq6ukiRXV1eVKlVKp0+fVsmSJR1xL7/8sgYMGKAmTZooLS1NTzzxhOrVq3fTcVCRBQAAAAAAgJv69NNP1bJly1yvTz/99H/e5+bNmxUUFKRvvvlGMTEx2r17tzZv3nzTn6EiCwAAAAAAwNkV8lrvTz31lDp37pxr+/XVWJJUpkwZnT17VllZWXJ1dVVWVpbOnTunMmXK5IhbsmSJpkyZIhcXF3l7eys0NFQ7d+5UmzZtbjgOKrIAAAAAAABwU8WLF1e5cuVyvfJKZN13332qUaOGoqKiJElRUVGqUaNGjrZCSSpXrpxiYmIkSRkZGfr+++9VtWrVm46DRBYAAAAAAADy1YQJE7RkyRI99thjWrJkiSZOnChJev7553XgwAFJ0ujRo7Vnzx6FhYWpU6dOqlSpknr06HHT/dJaCAAAAAAA4OQKexkeZJ4AACAASURBVLH3vyogIECrVq3KtX3hwoWOP1eoUEGffPLJX9ovFVkAAAAAAAAwBCqyAAAAAAAAnJzRKrLuFiqyAAAAAAAAYAgksgAAAAAAAGAItBYCAAAAAAA4OVoL7ajIAgAAAAAAgCFQkQUAAAAAAODsKMiSREUWAAAAAAAADIJEFgAAAAAAAAyB1kIAAAAAAAAnx2LvdlRkAQAAAAAAwBBMNpvNVtiDAAAAAAAAwI2Vfv7zQj3+mYXdCvX4V9FaiHvKJUtWYQ8BuCO+nq4q8fjiwh4GcEcSl/eRJKVm8F0ajM2riL3Fg/sLGJ2vp6vOJ1sLexjAHfHzJr1xr6C1EAAAAAAAAIZAyhIAAAAAAMDJsdi7HRVZAAAAAAAAMAQSWQAAAAAAADAEWgsBAAAAAACcHK2FdlRkAQAAAAAAwBCoyAIAAAAAAHB2FGRJoiILAAAAAAAABkEiCwAAAAAAAIZAayEAAAAAAICTY7F3OyqyAAAAAAAAYAhUZAEAAAAAADg5KrLsqMgCAAAAAACAIZDIAgAAAAAAgCHQWggAAAAAAODkaC20oyILAAAAAAAAhkBFFgAAAAAAgLOjIEsSFVkAAAAAAAAwCBJZAAAAAAAAMARaCwEAAAAAAJwci73bUZEFAAAAAAAAQ6AiCwAAAAAAwMlRkWVHRRYAAAAAAAAMgUQWAAAAAAAADIHWQgAAAAAAACdHa6EdFVkAAAAAAAAwBCqyAAAAAAAAnBwVWXZUZAEAAAAAAMAQSGQBAAAAAADAEGgtBAAAAAAAcHZ0FkqiIgsAAAAAAAAGQSILAAAAAAAAhkBrIQAAAAAAgJPjqYV2VGQBAAAAAADAEKjIAgAAAAAAcHJUZNlRkQUAAAAAAABDIJEFAAAAAAAAQ6C1EAAAAAAAwMnRWWhHRRYAAAAAAAAMgYosAAAAAAAAJ8di73ZUZAEAAAAAAMAQSGQBAAAAAADAEGgtBAAAAAAAcHJ0FtpRkQUAAAAAAABDoCILAAAAAADAybHYux0VWQAAAAAAADAEElkAAAAAAAAwBFoLAQAAAAAAnBydhXZUZAEAAAAAAMAQqMgCAAAAAABwci4ulGRJVGQBAAAAAADAIEhkAQAAAAAAwBBoLQQAAAAAAHByLPZuR0UWAAAAAAAADIGKLAAAAAAAACdnoiRLEhVZAAAAAAAAMAgSWQAAAAAAADAEWgsBAAAAAACcHJ2FdlRkAbipxMTLGjFkgJo3qqdObVvqi01RecbZbDbNf3uWWjdvpNbNG2n+27Nks9lyxW2MjFDDujUVsebzuz10wMHXq4iWDAnRqU8e14G5ndXtkUp5xhVxc9HsZxvo8IJuOrawh1YMbaEyvh6O9+b3a6QDczsr4eNe2jG1vR6tU7YAZwHYr8mvvdpfjzxcV+1ah2rThsg842w2m95+a6ZaNGmgFk0a6O23ZjquyceP/abBA15WaLNGat64gV5+4Vkd++1oQU4DyLf7i4Z1a6p5o3pq8Yj99cbE1wtqCoCSEi9r1NCBerRJfXXt8Ki+3Hzj8/jdubPUruUjatfyEb0798/z+Od9e9Sqaf0cryb1/0/btnxZkFMBDIWKLAA3NXPqZLm5u2vjlhgdiovVawNfUtVqQaoSUDVH3LrV/1bM1i1asnKtZDJp4IvPqmzZ+9Wley9HTFJSoj79+ANVCQgs6GngHjfznw8r05qtqi+uUq1Kvvr38FD95/dLik1IzBH3UtvqeqjqP/TIiCglWTL09nMNNePph/Xk7O1yc3VRwoVUtZ/0pU5cSFXr4Pu16NVmemR4pH7/I7WQZoZ7zbQ3JsnN3V1fb/tGcbGxevWVF1QtqLoCAnNek1evWqltW7/Wis8jZDKZ9FK/f+r+cuXUrUcvJScnK6RFqCZMniJPTy8tXPCuhgx8RWsiNxXSrHAvys/7i8Ur16h8hYoFPQVAs6ZPlru7u9Z/uV2HD8Vq+KsvK7Bq9Vz3uhFrVmnHtmgtWrZGJpNJg195TmXLllOnbj1Vp249fbVjtyN27+5dGjHkFTV4pElBTwcwjFtWZGVmZurtt9/WY489prCwMHXq1EnTpk1TZmZmQYwvX8ybN0+NGjVSx44dFR4erp49eyo2Nrawh6XExEQNGTJEHTp0UFhYmDp27Kjvv/9ekrRz50598803+X7MhIQENWjQ4LbiatasqY4dOyosLExt2rTR2LFjdebMGUfMmDFjtHv37pvsBUaXlmbR1i1f6oWXB8rT00vBdeupaUgLbYrKXQGwMTJCvfs8rVL+pVWqlL9693lGGyLX5Yh5b+5sdX/8SZXw8S2oKQDyLOqm8IcraPK/f1JqulU/xJ3Xpj0J6tWkSq7Yin5mRe8/rfOJV5Sema01PxxX9XIlJEmWdKumrd6v3/9Ilc0mfbHvpI6fT1FwlfsKekq4R6VZLNry1Vd6ub/9mlz3wXpq1jxUGyLX54qNWr9OT/Z9Rv6lS6uUv7/6PPWM1keslSQ9UKu2OnXpphIlfOTu7q4n+j6lY8d+0+XLlwp6SrhH5ff9BVAY0tIs2h79lZ57cYA8Pb1UJ7iemjRroS825r4mb94QoV5PPqVS/qXlV8pfvZ54Whuj8j6PN2+IUIuWreXh4Xm3pwADMplMhfpyFrdMZI0aNUpHjhzR6tWrFRkZqc8//1yVK1dWRkZGQYwv33Tq1EkRERFav369wsPDNXPmzDzjrFZrgY1pzpw58vf3V2RkpCIjI7Vo0SJVrGj/NmnXrl369ttvb/izBTFOb29vRUREKDIyUuvXr5efn5969bJ/kytJb7zxhurXr3/Xx4HC8/vxY3J1c1OFipUc26pWC9LRo0dyxR49ekSB1YJyxP0W/2fcL//Zr18P/qIu3Xre1TED1wss4y1rlk3xZ5Id2/5z/JKql/PJFbt42xE1qOan0r4e8ijiqh6NK+urn0/luV+/EsUUWLq4fk24fNfGDlzr+PFjcnNzVcVKlR3bqgUFKT7+cK7Yo/FHVC2oeo64o0dyx0nS3t279Y9/+MmHLxlQQPLz/kKSXnq2r9o92lQjXhuoU6dO3rVxA9c6cfy4XF1znscB1YL0Wx7n8W/xRxRY7c9rcuAN4q4medu073hXxgz8Xdw0kXXs2DF9/fXXmjx5ssxmsyTJzc1NPXv2lJeXl+Li4tS7d2917txZ7dq106JFixw/u3LlSrVt29ZR0RMfH6/s7GxNmDBBbdq0UXh4uHr1spcEW61WPfvss+rSpYvat2+vUaNGORJlrVu3zlE9tWTJEo0aNUqSNH36dHXt2lXh4eF66qmndPLk7f3DlZKSohIl7N+wX61Qmj59ujp37qxVq1bp+PHjeuqppxQWFqbOnTsrJiZGkrRixQpNnDhRkrR//34FBQVp//79kqQJEyZo5cqVkqSgoCAtWLBAXbt2VcuWLfXFF1/kOY4zZ87I39/fkdn09fVV2bJlFRcXpxUrVmjdunXq2LGjPvjggzzHee7cOQ0cOFDdunVTWFiYFixY4Nj37Xw2GRkZGjRokKZNm5bnWkbXKlKkiF599VX5+/tr/Xr7twx9+vTR1q1bJeX9+5ako0eP6rnnnnOMZfXq1Y59vvbaa+rSpYvCwsL0yiuvKDEx0fEzPXv2VHh4uDp06KCPPvrIMd7p06erW7duCg8P17Bhw5SaSjvP3ZRmscjLyyvHNi+ztyx5fO5pFovMZu9r4syyWCyy2WzKysrSjCn/0tCRY+XiwtJ8KFheRd2VnJazijgpLUNmj9zd9fGnk3XygkVx73ZTwse9FHR/Cb25en+uODdXkz58pYmWx8Tr8KmkuzZ24FoWi0VeXuYc28w3uCZbrrsmm83ejmvytc6eOaNpUyZpyLARd2fQQB7y6/5Ckt778DOt3fiVVq7dID+/Uho68KUC/WIa9660NIu8zDnPY7PZLEuqJc/Yq/+fluzne1oe1+Tt0V/Lx8dXdes9dHcGDcOjIsvupmtkHTx4UBUrVnQkfa53//33a9GiRSpSpIhSU1PVvXt3NW3aVAEBAXrzzTe1adMmlSpVShkZGcrKylJsbKx27typjRs3ysXFxZG4cHV11cyZM+Xr6yubzaYRI0Zo9erVevzxx9WpUyetXbvWkbxas2aN48/PP/+8Royw33itWrVKM2fO1OzZs/Mc67p16/Tdd98pMTFRVqtVixcvdrx3+fJl1apVy7Gv7t27q0ePHurevbuOHDmiJ554Qps2bVKjRo0cybrvv/9edevW1Q8//KDatWvr+++/1z//+U/HPs1ms1avXq09e/Zo0KBBeuyxx3KNqW/fvho4cKCioqJUt25dhYaGqlGjRgoKClKvXr1ksVgcY0pISMg1zmeeeUYvv/yyHnroIWVkZOjpp59WrVq11Lhx41t+NpcvX9aAAQPUqlUr9e3b92anQQ61atXS4cO5v9HN6/dttVo1dOhQzZgxQwEBAUpJSVHXrl0VHBysgIAAjRkzRiVLlpQkzZ49WwsXLtTQoUO1bNkyhYaG6oUXXpAkx3ny4YcfytvbW59/bl8kfMaMGfrggw80ePDg2x4//hoPT89cycLUlBR5Xnfz+WdsiuPvltRUeXp6ymQyafW/lyuwWjU9ULvOXR8zcL3U9Ex5e7jn2Obt4a6UtNz/0Zn5z4dVxN1FlZ5bqdR0q14N+z99PrKlWr7+59pBJpP0wctNlGHN1tBFu+76+IGrPK+7zkpSamre1+TrY1NSUhzX5KsuXbyol194Vt179labdh3u3sCB6+TX/YUk1a1n7w5wdy+iwcNGqWWTh3Xst6MKrFrtLs4AkDw8PJWact15nJoqT6/cLYH22JRr4lLkcd01WZI2bYhQm/bhTpUwAJzRHS32fuXKFU2YMEFxcXEymUw6d+6cYmNjFRAQoIYNG2rkyJFq0aKFmjdvrvLly6t8+fKyWq0aM2aMGjRooBYtWkiSsrOz9fHHHysmJkbZ2dlKTExUsWLFJNlbAnv06KFhw4YpPj5eSUlJjna2mJgYLVu2TBaL5ZbfvHTq1MmR2Fm3bp0GDx6sdevsfclFixZV27ZtJdlv9H799Vd17dpVkhQYGKgaNWrop59+UmhoqNLT03XmzBl9//33Gjx4sBYsWKCwsDBlZmaqQoUKjuO1a9dOkhQcHKxz584pPT1dRYsWzTGmRo0aaevWrdq5c6cj4fXss8+qX79+ec7h2nFaLBbt2rVLFy9edLyfmpqq+Ph4NW7c+KafTUZGhnr37q0BAwY49nen8vp9HzlyRPHx8RoyZIgjLjMzU0ePHlVAQICjbTEzM1MWi0WVKlWSJD300EOaMWOG0tLS1KBBAzVs2FCSFB0drZSUFEeFW0ZGhqpXr55rLMg/FSpWUpbVqt+PH3OUTR85FKcqVXIv1l6lSqAOH4rT/z1QW5J0+FCsKv93ocvdu37Qvj279d039urGpMREHYr7VYcPxWroyLEFMxncs46cTpabq0lVSnvr6H/bCx+o4KvYPFoCa1UsqX+t3KdLqfaq4A++iNXYHsEq6V1UF5PTJUnz+zWSX4li6j49Wtasm1ezAvmpYsVKslqzclyTD8XFKeC6xbElqUpAoA7FxeqBWvZr8qFDcapyzYLwSYmJevmFZxXSPFTP9XuxQMYPXJVf9xd5MZl0y04DID+Ur1hRWVlWnfj9uONhA0cOxalyHudx5YBAHTkcp5r/PY/zijt75rR+2vOjho8ef/cHDxjcTXt8atasqePHjzsqYq731ltvyc/PT2vXrtX69etVu3Ztpaf/90Z//nwNGjRIaWlp6tu3r7Zv3y5vb29t2LBB7dq1U1xcnNq3b6/z588rMjJSe/bs0dKlSxUZGanevXs7WgvLli2rwMBAxcTEaO3atercubNMJpNOnjypqVOnatasWYqKitKUKVNue92uNm3a6Ndff3UkgTw8PG47692wYUNt3bpVFy5cUIMGDXT+/Hlt27Yt1wLqV5NWrq6ukm68ppXZbFbLli01fPhwjR8/XpGReT9G+/pxZmdny2Qy6fPPP1dERIQiIiL09ddfq2/fvrf8bNzd3VWnTh1FR0crKyvrtuZ91YEDB1S1au4b5rx+3zabTb6+vo7xRUREKDo6Wq1atdLu3bu1fPlyffjhh4qMjNSgQYMcY3zssce0dOlSVahQQQsXLtSwYcMk2W9Kxo8f79jXpk2bbliBh/zh4eGp5qGttPC9+UpLs+jnn/YqZnu02nYIyxXbtkO4li/5VOfOndX5c+e0bPEitQ/rJEl6fdIUrVgTqcUr1mjxijWqUfMBPdvvZb34yqsFPSXcgyzpVkXuOqEx3evIs6ibGlTzU7v65bXim6O5YvfG/6HHm1ZRcQ93ubma9FyrIJ26aHEksWY/20BB95dQrxlbdSXzr10/gTvl4emp0Edb6b135irNYtFP+/Zq+9Ytah8Wniu2Q3gnLflskc6dPavz585qyaefKLxjZ0n2L+1eefE51Qmuq4GDXyvoaQD5dn9xNP6wDsX9qqysLFksqZr71pvyK+WvypVzP8wDyG8eHp4KadFKHy6Yp7Q0i/b/tFffbI/WY+1yX5PbtAvXyqWf6fy5s/rj/DmtWLpI7Tp0yhHzxcZIPVA7WPeXq5Dr54GrTKbCfTmLmyayKlWqpNDQUI0bN04p/y2FzMrK0qpVq5Samqrk5GSVLl1abm5uOnTokOMJdlarVSdOnFDt2rXVr18/NW7c2JE4SktLU9OmTTV06FB5e3vrxIkTSk5Olq+vr8xms5KTkxUVFZVjHFfXhIqKilLnzn/ehLm7u8vPz0/Z2dlasWLFbU96586d8vHxkY9P7oV+zWazatSoobVr7U/2iY+PV2xsrIKDgyXZE1kLFy5U3bp1JUkPPvigFi5cqEaNGt328a/69ttvHZ+rzWbTwYMHVa5cOcc4ri6qnhez2ax69erpgw8+cGw7ffq0zp8/f8vPxmQyacqUKTKbzRo8ePBtPYEyIyND8+fP15kzZxQenvPifKPfd+XKlVWsWDFH5Ztk/zxTUlKUlJQks9ksHx8fZWRk5Fg76/jx4/Lz81OXLl30yiuv6MCBA5Kk0NBQLVq0SFeuXJFkPweursWFu2fY6NeVnn5FbUObatyooRo+epyqBFTVT3t3q8Uj9Rxxnbv1VJNmzfVk9456onu4Hmkaos7/Xdjd27u47vuHn+Pl5u4uLy+zzN7eNzoskK9e+3inirm76ciC7vpoQFMN+WinYhMS1SiolE5+8ucj3Mcu3aMrmdnaO7uT4t/voVbB9+uJt7ZJksr/w0v/fLSaalUsqUMLuunkJ7108pNe6t648g2OCuS/UWPHKf1Kulo2b6zRw1/TqLHjFRBYVXv37Fbjhx90xHXt3lPNmrdQjy7h6t45XE2ahahrd/s1eeuWr/TLfw5ofcRaNX74Qcfr9Om8H2wA3A35cX9x8cIFjR3xmlo2eVhdOzym06dOaubb78rN3f1GhwXy1WsjxyojPV1hrZppwphhem3U66oSEKif9+1Rq6Z/PhSrY9ceatw0RH17dVKfnh31SONm6ti1R459bd6wXm1Z5B24LSbbLWpvMzIy9M4772jz5s1yd3dXdna2QkJCNGTIEB0+fFjDhw+XyWRS5cqVlZqaqvbt26tDhw56+umnlZycLJPJpDJlymjatGk6deqUXn/9dVmtVmVlZalJkyYaMWKEUlNTNWDAAJ05c0b33XefAgMDlZ6ermnTpkmS0tLS1KRJE9WqVSvHgvKTJ09WdHS0fH19FRISonXr1ik6OjrXHObNm6dly5apVKlSstlscnNz0/Dhw9WwYUMlJCSoa9eu2rlzpyP++PHjGjdunC5evCg3NzcNHjxYzZo1kySdPXtWzZo105w5c9S2bVtt3LhRgwcP1o4dO1SqVClJ9sXe9+7d61jE8vq/X/Xxxx9r7dq1jvLnihUrauzYsSpTpoxOnDih/v37S5Lat2+vdu3a5Rrn+fPnNXXqVMeaVV5eXnrjjTcUEBBww8/m+vlOnz5d8fHxmjdvXo7Wx4SEBLVu3VpVq1ZVVlaWMjMzVb9+ffXv319lypSRZF/s/Z///KcaN26c5+/b19dXx44d05QpU3T69GllZ2frvvvu05w5c+Tt7a1hw4bpl19+ka+vr+rXr68DBw5o8eLFWrBggSIjI+Xu7i6TyaRBgwYpJCREmZmZmj9/vrZs2eJYbK5///5q3br1zU7hHC5ZqKCAsfl6uqrE44tvHQg4scTlfSRJqRm0/8DYvIrYv57m/gJG5+vpqvPJLJIPY/PzvqOVkwyh7sTc+Y6CtG98aKEe/6pbJrKAvxNuNGF0JLLwd0AiC38XJLLwd0EiC38HJLLuPmdJZN20tRAAAAAAAABwFn//lCUAAAAAAIDBOdOC64WJiiwAAAAAAAAYAhVZAAAAAAAATs5ESZYkKrIAAAAAAABgECSyAAAAAAAAYAi0FgIAAAAAADg5OgvtqMgCAAAAAACAIVCRBQAAAAAA4ORY7N2OiiwAAAAAAAAYAoksAAAAAAAAGAKthQAAAAAAAE6OzkI7KrIAAAAAAABgCCSyAAAAAAAAYAi0FgIAAAAAADg5nlpoR0UWAAAAAAAADIGKLAAAAAAAACdHQZYdFVkAAAAAAAAwBBJZAAAAAAAAMARaCwEAAAAAAJwci73bUZEFAAAAAAAAQ6AiCwAAAAAAwMlRkGVHRRYAAAAAAAAMgUQWAAAAAAAADIHWQgAAAAAAACfHYu92VGQBAAAAAADAEKjIAgAAAAAAcHIUZNlRkQUAAAAAAABDIJEFAAAAAAAAQ6C1EAAAAAAAwMmx2LsdFVkAAAAAAAAwBCqyAAAAAAAAnBwVWXZUZAEAAAAAAMAQSGQBAAAAAADAEGgtBAAAAAAAcHJ0FtpRkQUAAAAAAABDoCILAADg/9m78/iY7v2P4+/JJpkkCGIPISFobVXl1hJ0oSSS2GmLLlq7FrW0tbeW1lZbe9tfW1x1S0SE0A1tXVrcoq1bTRBbqpooJctElkl+f4xOxYRqLZnD63kfHvc6850z3zO+Nzn55P35DgAAgJNjs3cbElkAAAAAAAAwBApZAAAAAAAAMARaCwEAAAAAAJwcnYU2JLIAAAAAAABgCBSyAAAAAAAAYAi0FgIAAAAAADg5PrXQhkQWAAAAAAAADIFEFgAAAAAAgJMzWiDr6NGjGjdunM6dO6fSpUtr1qxZCgwMdBi3adMmvfnmmyooKJDJZNL777+vcuXKXfG8FLIAAAAAAABwQ02aNEl9+vRRRESE4uLiNHHiRC1fvrzQmP3792vRokVatmyZ/P39lZ6eLg8Pj6uel9ZCAAAAAAAA3DBnzpzRgQMHFBYWJkkKCwvTgQMHdPbs2ULjli5dqieffFL+/v6SJF9fX5UoUeKq5yaRBQAAAAAA4ORcirm3MC0tTWlpaQ7HS5YsqZIlSxY6durUKVWoUEGurq6SJFdXV5UvX16nTp1SmTJl7OOSkpJUtWpVPfroo7JYLHrooYc0aNCgq25sTyELAAAAAAAAV7Vs2TItWrTI4fjQoUM1bNiwv3VOq9WqxMREvf/++8rJydHTTz+typUrKzIy8orPoZAFAAAAAADg5Ip7s/d+ffspKirK4fjlaSxJqlSpklJSUmS1WuXq6iqr1arU1FRVqlSp0LjKlSurQ4cO8vDwkIeHhx544AF9//33Vy1ksUcWAAAAAAAArqpkyZKqWrWqw5+iCllly5ZV3bp1FR8fL0mKj49X3bp1C7UVSra9s7Zv366CggLl5uZq586dqlOnzlXnQSELAAAAAAAAN9TkyZO1YsUKtW/fXitWrNCUKVMkSQMGDND+/fslSZ06dVLZsmXVsWNHRUZGKjg4WN26dbvqeU0FBQUFN332gJP4zWIt7ikA18XP7KpSvf9V3NMArsv5fz8uScrM4RYExubtYevx4P4CRudndtXp9LzingZwXfx9b/+dk9ov2VWsr//J4GbF+vq/I5EFAAAAAAAAQ7j9S5YAAAAAAAAG51LMm707CxJZAAAAAAAAMAQKWQAAAAAAADAEWgsBAAAAAACcnMlEb6FEIgsAAAAAAAAGQSILdxQ/s2txTwG4buf//XhxTwG4Ibw9+K0ibg/cX+B24O/Lj4aAsyOQZUMiCwAAAAAAAIZA2R13FEtOQXFPAbguZg+T0rPzi3sawHXxLWH7PVqFp6OLeSbA9Un5v+6SpGO/XijmmQDXJ7Ccp37NyCvuaQDXpZwP5Y07Bf/SAAAAAAAATs4kegslWgsBAAAAAABgECSyAAAAAAAAnJwLgSxJJLIAAAAAAABgEBSyAAAAAAAAYAi0FgIAAAAAADg5k4neQolEFgAAAAAAAAyCQhYAAAAAAAAMgdZCAAAAAAAAJ0dnoQ2JLAAAAAAAABgCiSwAAAAAAAAn50IkSxKJLAAAAAAAABgEhSwAAAAAAAAYAq2FAAAAAAAATo7OQhsSWQAAAAAAADAEElkAAAAAAABOzkQkSxKJLAAAAAAAABgEhSwAAAAAAAAYAq2FAAAAAAAATo7OQhsSWQAAAAAAADAEElkAAAAAAABOzoVIliQSWQAAAAAAADAIClkAAAAAAAAwBFoLAQAAAAAAnByNhTYksgAAAAAAAGAIJLIAAAAAAACcnInN3iWRyAIAAAAAAIBBUMgCAAAAAACAIdBaCAAAAAAA4ORc6CyURCILAAAAAAAABkEhCwAAAAAAAIZAayEAAAAAAICT41MLbUhkAQAAAAAAwBBIZAEAAAAAADg5Alk2JLIAAAAAAABgCBSyAAAAAAAAYAi0FgIAAAAAADg5Nnu3IZEFAAAAAAAAQyCRBQAAAAAA4ORcCGRJIpEFAAAAAAAAg6CQBQAAAAAAAEOgtRAAAAAAAMDJsdm7DYksAAAAAAAAGAKJLAAAAAAAACdHHsuGRBYAAAAAAAAMgUIWAAAAAAAADIHWQgAAAAAAACfnwmbvkkhkolOFCAAAIABJREFUAQAAAAAAwCBIZAEAAAAAADg5Alk2JLIAAAAAAABgCBSyAAAAAAAAYAi0FgIAAAAAADg5E72FkkhkAQAAAAAAwCBIZAEAAAAAADg5Alk2JLIAAAAAAABgCBSyAAAAAAAAYAi0FgIAAAAAADg5F3oLJZHIAgAAAAAAgEGQyAJwVefPn9OUiS/r6693qHRpPw0f8bwe6RTuMK6goEAL5s1R7NpoSVJUl+4a/vwomUwmHT92VPPmvK7vvtunfGu+7rr7bo0Z95ICa9S81ZeDO9T58+c0bdLL2vnVVyrtV1pDh49Uh05hDuMKCgq0cP4cxa1dI0mK6NJNw56zreNzv/2mkSOG6PjRI7Lm56tGjZoaMWqMGjW+51ZfDu5gpb3dNa9fU7W5q4LOZGRresx+rd2d7DBu5YiWal7L3/53dzcXJf2SrjaTP5Uk3RVQStN7N1a9qqWVcSFXy7cd0bz4H2/ZdQBpaec1b8Yk7dn9tUqV8tMTA4er3cMdHcZ9u2e3Pnj/nzp8MEG+viW1POYj+2PnfjujN+e/pu/37dGFC1kKrBmsZ4eNUp27GtzKS8EdLO38Oc2YOlG7d36lUqVLa+DQ5/TwI0XfX7y5cK42rIuRJIVHdtWgYSNlupiusVqtevefixQfFyuLJVNVA6pp4T/fl69vyVt6PYBR3BGFrNzcXC1ZskSbNm2Sh4eHXF1d1bx5c40aNUru7u7FPb1rtn37di1ZskQpKSkqVaqUXF1d1bt3b3Xp0qVY5rN27VqNHz9eEydO1KOPPirJ9kX6wQcfVEZGhnbt2nXV5//000/asWOHevbsaT+2dOlShYeHq2zZspKkhQsXymKxaOzYsTfvQnBVM16dKnd3d235YrsSExI0fMizqh1SR0HBtQqNi4lepc8/36xVa+JkMpk08JknVblqVXXv0Uvp6ekKbdtOU16ZLrPZW2+/tUTPDx+i2A0fXeFVgRtr1qvT5O7urk+/+I8OJiRoxNCBqhUS4rCO165ZrS+2btHK6HUymUwa8uxTqlylqrr16CUvs1kTp7yqatWry2Qy6cvPt2jksMH69IvtcnO7I76dwgnM7HOPcq35umvket0dUFofDG+lH346r8Sf0wqN6/PG9kJ/X/tCqLb/mGr/+5sDmuujfScV9foXCijnrQ1j2+pA8jl98t2pW3IdwOI50+Xm5q5VGz5X0qEETXhhmGoG11ZgzeBC4zy9vNQ+LFJts7P14fJ3Cz2WZclS7bp36Zlho1Xar4w+iY/VhBeGafmaj+RlNt/Ky8Edas6sV+Tm7q4Nn32pQ4kJemHEYAXXrqOaQYXXcdzaaG37YquW/XutTCaTnhv8tCpVrqqobrafg9795yLt/+5bvb10pSpUrKSjSYfl4VGiOC4JTo7OQps7orVw/PjxOnz4sGJiYrRhwwatWbNGNWrUUE5OTnFP7Zpt375dL774osaMGaMtW7Zo7dq1mjdvnk6dKvqGMy8v75bMq169elq3bp3977t27VKpUqWu6bknT57UqlWrCh1bvny5zpw5c0PniL8vy2LRls8+0+Chw2U2e6vxPU0U2qad4jesdxi7Yf06Pd73CVWoWFHlK1TQ4/2e0Ia4WEnS3fUbKKpLN5UqVVru7u56rG8/HTt2VOfO/XarLwl3oCyLRVs3f6aBQ2zruNE9TdS6TVttindcxxvXr9Nj/f5Yx4/27a/4i+u4RIkSCqxRQy4uLiooKJCLi6vS0s4r7fz5W31JuEOZPVzVqUlVzVz3P1myrdp9+Iw++e5ndf9H9as+L6CsWc1r+Sv66+OFjsXsPK78Aun46UztOvyrQipf2/dv4HpdyLJo+xeb1W/AEHmZzbq74T36R8tQbfkk3mFsnXr19WCHcFWsXNXhsUpVqqprr74qW85frq6u6hjRTXm5ufrpxLFbcBW402VlWfTFls80YNAwmc3eati4iVqGttUnGx3vLz6Kj1Pvx/qpfIWK8i9fQb0e669NG2w/Q6Wlndfqlf/S2JenqGKlyjKZTKoZXEslSlDIAq7ktv8V8rFjx7R582Z9+eWX8vHxkSS5ubnZU0CJiYmaMmWKsrKylJ2drR49eqh///6SpFWrVmnp0qXy8PBQfn6+5s+frxo1amjq1KnauXOnPDw8ZDab9eGHHyovL0/PPvusfvvtN2VnZ6tBgwaaMmWKPDw89PDDD2vBggWqU6eOJGnFihX64YcfNGPGDM2aNUu7d+9Wbm6u/Pz8NH36dFWpUsXhOhYvXqzBgwerUaNG9mNVq1bVkCFDJNnSTV27dlWXLl20c+dO9ejRQw888IBeeeUV/fzzz8rOzlanTp00cOBASdKRI0c0ffp0/fbbb8rNzVW/fv3UtWtXSVJISIief/55ffbZZzp37pzGjBmj9u3bF/n+BgQE6LffftPhw4cVHBys2NhYRUVFadGiRfYx27Zt09y5c2W1WlWmTBlNnTpV1atX19SpU/XTTz8pIiJC1atXV926dZWamqrhw4erRIkSmjNnjsPrvf322/r0009ltVpVoUIFTZs2Tf7+/g7jcGMcP35Mbm6uqh5Yw36sdkiI9nzzX4exR5IOq3ZInULjkg4fKvK8e7/5RuXK+at0ab8bP2ngMsePH5Pr5eu4dh3tLWIdJyUdVu3aIX+MC6mjI0mHC43p1TVCx44eVV5eriK7dFOZiwlS4GarWcFXedZ8HUnJsB/7Ifmc7g+5+vfB7v+orp2HTiv5jMV+7J3Nh9Tj/kDNXPc/VS/nrXtrltXijxNv2tyBS/2UfFyurm6qWi3QfqxGcIj2f/vNdZ036WCCcvNyVblqwHXOEPhzycdt67ha9UD7seBaIfp2r+P9xdGkwwqu9cd9cnDtEB09Yru/OHL4kFxd3fTFlk+1auVyeXv7qHvvx9S1R5+bfg0wHhORLEl3QCHrwIEDql69+hVTQlWqVLEXqzIzM9W9e3e1atVKQUFBeu211/TRRx+pfPnyysnJkdVqVUJCgnbt2qVNmzbJxcVF5y/+Jt7V1VWzZ8+Wn5+fCgoKNHbsWMXExKh3796KjIxUbGysxo8fL+mPljxJGjBggL1tLjo6WrNnz9a8efOKvI6JEyde9VrPnTun+vXr28/3xBNPaPDgwWratKlycnLUv39/1a9fX82aNdPo0aP1+uuvKygoSBkZGeratasaNWqkoKAgSZKPj49iYmK0Z88ePffcc1csZEmyX9/gwYO1Z88eDR482F7IOnPmjMaMGaMVK1YoODhY0dHRGj16tKKjozVx4kTNmjVLa9eutZ8rOjpaCxYsUO3atR1eJy4uTsnJyVq9erVcXFy0cuVKzZw5s8iCF24Mi8Uib2+fQsd8fHyVmZlZ5FgfH99C4ywWiwoKCgp9wU355RfNmD5VI1+gXRS3RpbFIh+HdeyjTIvjOs6yWOTj61to3OXr+MOYOGVnZ+vzLZuVl5t7cycPXMLb000ZFwonrtOzcuXtefXbuR73B2pe/IFCxz79/pQWPXWfBj1cW26uLpq9/gd9e4yULG6NLEuWzN7ehY55+/goy2K5wjP+XGZmhl6b9pIee2KgvC+5HwFuFkuWRd4+hdfx7/cNl8vKsthDFbZxvsq6eH+RmvKLMjLSlXziuNas/1TJycc1YuBTCqgWqPua33/TrwMwotu+kPVnLly4oMmTJysxMVEmk0mpqalKSEhQUFCQmjdvrnHjxqlt27Zq06aNAgICFBAQoLy8PL300ktq1qyZ2rZtK0nKz8/Xe++9p23btik/P1/nz5+Xp6enJFuhp0ePHnrhhReUlJSktLQ03XvvvZJsaaWVK1fKYrH8pXbA4cOH69ixYzpz5ox27Nghydb28sgjj0iyFRV2796ts2fP2p+TmZmppKQkVahQQUlJSRo5cqT9sdzcXB05csReyOrY0bbZZqNGjZSamqrs7Owrxls7dOigLl26KDAwUA8++KBcXV3tj3333XeqU6eOgoNtfeJdu3bVlClTlJGRUeS5rmbr1q363//+p6ioKEm2TREv/YaAG89sNiszs/C/VUZmhrwvu/ksamxmRobMZnOhItbZs2c16Nmn1KNnHz3S0XEjTOBm8DKblXHZOs7MzJS32XEde5nNhb4+ZWZmOqxjyfb1tkPHTuoW0Um169QplEYEbpbMC3nyuaxo5ePlrswLV75/uC+4rMqX9NSGPT/Zj5X2dteHz7XS+JX7tHbXCZUv5al3B/5Dp9OytfSLpJs2f+B3XmYvWS77pZglM+Nv72uVnX1Bk8YMV527GqhX36duxBSBP2X2Miszo/A6/v2+4XJeXpfdJ19c7yaTSSVK2H5mfGLAIJXw9FRwrRA90P4Rfb1jG4Us4Apu+0JWvXr1dPz4cZ0/f77IVNbcuXPl7++vmTNnys3NTU8++aSys7MlSYsWLdL+/fu1c+dO9e3bV5MnT1ZoaKg2btyoXbt26auvvtLs2bMVGxurHTt2aM+ePfrggw/k4+Ojt956S8eOHZMkVa5cWcHBwdq2bZt2796tqKgomUwmnTx5UjNmzNCaNWsUEBCgvXv3avTo0UVeR926dbV//37VrVtXkrRgwQJlZmbqnnv++LQsLy8v+w9b+fn5MplMWrNmjcOG9ocOHZKfn5/i4uKu+L79XrT6vSiVl5d3xUKWt7e3GjVqpNmzZ2v58uVXPOf1Kigo0KBBg9StW7eb9hoorHr1QOXlWXX8+DFVvxibPpiYqJpBtRzG1gwK1sHEBN1d3/ZJQQcPJhbaSDvt/HkNfvYphbZpp6efGXhL5g9ItnVszbPqxPFj9vj/wcQE1QwOdhgbFBSsQ5eu48QEhw1bL5WXl6eTPyVTyMItcSQlXW6uLqpR3kdHU20/EN1VtZTDRu+X6nl/oDbu/UmWbKv9WPVyPrLmF9j3zDr1W5bW/TdZD9avSCELt0TVgOqyWvN0Mvm4qgTY9ng7cvigqtcI+svnysnJ0ZRxz6mcfwWNGDPhRk8VuKKA6rZ1nHziuAKq2dbx4UOJqlHT8b6hRlCwDh9MVL27bfcXhw/+MS6olmMnikm0j6Fod8Qm59fgtn8fAgMD1a5dO02cONH+W3ar1aro6GhlZmYqPT1dFStWlJubmw4ePKhvvrH15ufl5Sk5OVkNGjTQM888oxYtWujHH3/U2bNnlZWVpVatWmn06NHy9fVVcnKy0tPT5efnJx8fH6Wnpys+vvBmlVFRUYqOjlZ8fLw9UZSRkSF3d3f5+/srPz9fH3744RWvY/DgwVq8eLG+//57+7GsrKwrjvfx8VGTJk309ttv24+dOnVKp0+fVo0aNeTp6Vlok/akpKS/lZL63YABAzRs2DCFhIQUOt6oUSMlJCQoKcl2YxwbG6t69erJx8dHPj4+Dq/p7e2t9PT0Il+jXbt2Wrlypb2dMycnRwkJCX97zvhzXmaz2j34kN5cvEBZFou+3bdXX36+RWHhnR3GhnWO1IrlS5WakqLU1BT9a9n7Co/4Y60PHvi0GjVqrBHPj7rVl4E7nJfZrLYPPqi3Fi/8Yx1/sVUdwxzXccfwCH3wr2VKTUnR6dRUfbD8fYVdXMf7v/tW3+7do9zcHF24cEFL33tHZ8/8qrvrN7zVl4Q7lCXHqk17f9LYiLtk9nBV0+Cy6tCoSqFN3C/l6e6izvcGaNVXxwodT0pJl8kkdbkvQCaT5F+yhCKaBujAT3xwAW4NTy+zWoQ+oOX/t0QXsiz64ft9+vo/X+iB9o5p7fz8fOVkZ8ual6eCggLlZGcr92Jbd15erl55eZQ8SnjqhZenycXltv/RBk7Ey8us0HYP6f/eWqisLIu+/3av/vPFVrXv5Hh/0aFTZ334wXKdTk3R6dOp+veKpeoYHilJqhpQTQ0bN9Hy995WTk6Ojh1N0uZPP1KLVm1u8RUBxnHbJ7IkaebMmVq8eLG6du0qd3d35efnKzQ0VB4eHho0aJDGjBlj/yTDpk2bSrJ90xw3bpzS09NlMplUqVIljRo1Sj///LMmTJigvLw8Wa1WtW7dWo0aNVKtWrW0ZcsWdejQQWXLllWTJk3syS5JevjhhzV16lTVr19flStXlmTbVL1Dhw7q2LGj/Pz8FBoaai+kXa5169aaOnWqpk+frtOnT6tcuXLy8PDQ1KlTr3jds2fP1owZMxQeHi7JViR69dVX5e/vr7feekvTp0/Xu+++q/z8fJUtW1bz58//2+9xcHCwvX3wUmXKlNFrr72m0aNHKy8vT2XKlNHrr79uv/4aNWooLCxMNWvW1IIFC9S3b1+9+OKL8vT0dNj7KjIyUufOndNjjz0myZbQ6t27t30TfdwcL748UZMnvKR2bVqodKnSevHlSQoKrqW9e77R0EHP6KvdeyVJ3br31MmfktW9i+2bd1TXburW3fahClu3fKYf/rdfSUmHtT7ujwJqTFy8KlWqfOsvCneccS9N1NSJL+uhNi1VqnRpjX/Jto737flGwwc/q//s2iNJ6npxHffqGiFJiujSVV0vruOc3BzNnjldJ39Klpubu4Jr1dL8RW/Jv3z5Yrsu3HnGfrBX8/s31Q/zOutsRo7GrtijxJ/T1KxWOf17RCvVHBprH/tI4yo6n5Wj7QmnC50j40KenlzylV7u2kCzHmuiC7lWffrdz5q38cdbfTm4gw0d/ZLmTp+kHmFtVbJUaQ0b/ZICawZr/7d79fLowYrbvFOStP/bPRoz7Gn788Lb3acGje/V64ve1YH932nXjm0qUcJTXTq0tI95ZfYS1W90j8NrAjfa6HEva/qUCQp7sLVKlSql0eMnqGZQsL7dt0ejhz2rzdttP9tFdu2hn08m6/GetuJVeGRXRXbtYT/PlOmva8bUCerY7n75lSmrAYOG6d77mhfLNcG5sdm7jamgoKCguCcB3CqWHJY7jM3sYVJ6dn5xTwO4Lr4lbKmJCk9HF/NMgOuT8n/dJUnHfr1QzDMBrk9gOU/9mnHt+/UCzqicz+2f0xm+rng7khZEOkeIhPwtAAAAAAAADOH2L1kCAAAAAAAYnAudhZJIZAEAAAAAAMAgSGQBAAAAAAA4ORJZNiSyAAAAAAAAYAgUsgAAAAAAAGAItBYCAAAAAAA4OZOJ3kKJRBYAAAAAAAAMgkQWAAAAAACAk2OzdxsSWQAAAAAAADAEClkAAAAAAAAwBFoLAQAAAAAAnBx7vduQyAIAAAAAAIAhkMgCAAAAAABwci5EsiSRyAIAAAAAAIBBUMgCAAAAAACAIdBaCAAAAAAA4ORIItnwPgAAAAAAAMAQKGQBAAAAAADAEGgtBAAAAAAAcHJ8aKENiSwAAAAAAAAYAoksAAAAAAAAJ+dCJEsSiSwAAAAAAAAYBIUsAAAAAAAAGAKthQAAAAAAAE6OzkIbElkAAAAAAAAwBBJZAAAAAAAATs6FRJYkElkAAAAAAAAwCApZAAAAAAAAMARaCwEAAAAAAJycC7u9SyKRBQAAAAAAAIMgkQUAAAAAAODkCGTZkMgCAAAAAACAIVDIAgAAAAAAgCHQWggAAAAAAODkXGgtlEQiCwAAAAAAAAZBIgsAAAAAAMDJmUQkSyKRBQAAAAAAAIOgkAUAAAAAAABDoLUQAAAAAADAybHZuw2JLAAAAAAAABgChSwAAAAAAAAYAq2FAAAAAAAATo7WQhsSWQAAAAAAADAEElkAAAAAAABOzmQikiWRyAIAAAAAAIBBUMgCAAAAAACAIdBaCAAAAAAA4OTY7N2GRBYAAAAAAAAMgUIWAAAAAACAkzOZivfPX3X06FH17NlT7du3V8+ePXXs2LErjj1y5IgaNmyoWbNm/el5KWQBAAAAAADghpo0aZL69OmjTz75RH369NHEiROLHGe1WjVp0iQ9+OCD13ReClkAAAAAAAC4Yc6cOaMDBw4oLCxMkhQWFqYDBw7o7NmzDmPffvtttWnTRoGBgdd0bjZ7BwAAAAAAcHIuf6e/7wZKS0tTWlqaw/GSJUuqZMmShY6dOnVKFSpUkKurqyTJ1dVV5cuX16lTp1SmTBn7uISEBG3fvl3Lly/XkiVLrmkeFLIAAAAAAABwVcuWLdOiRYscjg8dOlTDhg37y+fLzc3VhAkTNGPGDHvB61pQyAIAAAAAAHByLsUbyFK/fv0UFRXlcPzyNJYkVapUSSkpKbJarXJ1dZXValVqaqoqVapkH3P69GmdOHFCzzzzjCRb4qugoEAZGRmaNm3aFedBIQsAAAAAAABXVVQL4ZWULVtWdevWVXx8vCIiIhQfH6+6desWaiusXLmydu3aZf/7woULZbFYNHbs2Kuem83eAQAAAAAAcENNnjxZK1asUPv27bVixQpNmTJFkjRgwADt37//b5+XRBYAAAAAAICTK+a93v+yoKAgRUdHOxx/5513ihx/rftskcgCAAAAAACAIZDIAgAAAAAAcHIuMlgk6yahkIU7itmD/+PD+HxLEKbF7SHl/7oX9xSAGyKwnGdxTwG4buV8+NEQgDHw1Qp3lAt5xT0D4Pp4uklZucU9C+D6eLnb/tuSW1C8EwGuk9nd9gsyr8ZDi3kmwPXJ2reI+wsY3u/3F7j9UcgCAAAAAABwckbb7P1moT8FAAAAAAAAhkAiCwAAAAAAwMm5kMiSRCILAAAAAAAABkEhCwAAAAAAAIZAayEAAAAAAICTc2G3d0kksgAAAAAAAGAQFLIAAAAAAABgCLQWAgAAAAAAODk6C21IZAEAAAAAAMAQSGQBAAAAAAA4OTZ7tyGRBQAAAAAAAEOgkAUAAAAAAABDoLUQAAAAAADAydFZaEMiCwAAAAAAAIZAIgsAAAAAAMDJkUSy4X0AAAAAAACAIVDIAgAAAAAAgCHQWggAAAAAAODkTOz2LolEFgAAAAAAAAyCRBYAAAAAAICTI49lQyILAAAAAAAAhkAhCwAAAAAAAIZAayEAAAAAAICTc2Gzd0kksgAAAAAAAGAQJLIAAAAAAACcHHksGxJZAAAAAAAAMAQKWQAAAAAAADAEWgsBAAAAAACcHHu925DIAgAAAAAAgCGQyAIAAAAAAHByJiJZkkhkAQAAAAAAwCAoZAEAAAAAAMAQaC0EAAAAAABwciSRbHgfAAAAAAAAYAgUsgAAAAAAAGAItBYCAAAAAAA4OT610IZEFgAAAAAAAAyBRBYAAAAAAICTI49lQyILAAAAAAAAhkAhCwAAAAAAAIZAayEAAAAAAICTY7N3GxJZAAAAAAAAMAQSWQAAAAAAAE6OJJIN7wMAAAAAAAAMgUIWAAAAAAAADIHWQgAAAAAAACfHZu82JLIAAAAAAABgCCSyAAAAAAAAnBx5LBsSWQAAAAAAADAEClkAAAAAAAAwBFoLAQAAAAAAnBx7vduQyAIAAAAAAIAhkMgCAAAAAABwci5s9y6JRBYAAAAAAAAMgkIWAAAAAAAADIHWQgAAAAAAACfHZu82JLIAAAAAAABgCBSyAFzV+XPn9NzwIWp2byN1eLCtNsVvKHJcQUGB5s15Xa3vb6bW9zfTvDmvq6CgwP54wo8/qlf3LmrWpKF6de+ihB9/vFWXAOj8+XN6fvgQNW/aSI881FabNl55Hc+f+7pCWzRTaItmmj+38DqeOnmCIsLaq3H9Oopbt/ZWTR+wO3/+nEYOH6p/NG2sRx5qp4+uspbfmDtbbVo0U5sWzfTG3NmF1vK0yRMUGdZB99Svq/WsZRQDv5JmrZozQL9+NUeJm6aqZ4d7ixxXysdL70x9XMe3zNDxLTP00rMd7Y8FVPTT6R1zCv3J2rdIIx5vd6suA3c47i9wq5mK+T/OgtZCAFc1/ZWpcnd31+df7lBCwo8aNvhZ1a5TR8HBtQqNWxO9Sp9v3azotXGSyaSBTz+hKlWrqkfP3srNydFzwwbr0cf7qWfvPope/aGeGzZYGzZ9IncPj2K6MtxJZlxcx1u/3KHE39dxiOM6jrm4jlfH2NbxoAFPqEqVqures7ckqXZIHbXv0FFvzH29OC4DsK/lLV9uV2JCgoZfXMtBV1jLq2LiZDKZNHDAk6pcpaq69+wlybaWH+7QUW/MnV0clwFo/vgeysnNU/UHxqthSFWtXTBI3x/8ST8e+aXQuNdGd5XZ0111Ok2Uv5+vPvrnMJ04dVb/Wr9Tyb/8Jv8Wo+xjq1cuqx/WT1Ls5m9v9eXgDsX9BVA8DJfIys3N1RtvvKH27dsrPDxckZGRmjlzpnJzc4t7atds4cKFCgkJ0RdffGE/lpmZqcaNG6tLly435TUHDBigEydO/KXnhISEKDw8XOHh4Wrfvr1Gjhypw4cP2x9/4403tGnTphs9VTgRi8WizZ99qiHDRsjs7a17mtyr0LbtFL8+zmHshrh16tvvSVWoWFEVKlTQ4/2f0Pp1sZKk//53t/KseXqsbz95eHjo0cf6qqCgQLt37bzVl4Q7UNal69jsrcb33KvQNu20cYPjOl4ft06PX7qO+z2h9XGx9sd79X5UzZr/Qx4lStzKSwAk2dbyls8+0+Bhwy+u5SYKbdNO8RvWO4zdELdOj/d7QhUqVlT5i2t5wyVruefFtVyCtYxiYPb0UOQDjTRlyUZlZuXoq2+PaOOX+9Un7D6HsR1b3625Szcr60KuTpw6q6Xrvla/iOZFnvfRsPu0fe9hnTh19mZfAsD9BVCMDJfIGj9+vLKzsxUTEyMfHx/l5eUpJiZGOTk5cnd3L+7pXbO77rpLsbGxatOmjSTp448/Vo0aNW7a673zzjt/63kffvihvL29lZ+fr1WrVql3795au3atAgICNGLEiBs8Szib48ePyc3NVYGBf6zNkJA6+ua//3UYm3T4kGrXqVNoXNLhQxcfO6zatUNkumR3wlohITqcdFgtWrW+iVcA/LGOq1+yjmuH1NGebxzX8ZGkQwoJqVNo3O/rGChuRa/lkCus5cOqXWgth7CW4TRqVS+vvLx8HT6Raj+2/+BJtWwSXOT4S+8fTCaT6gVXLnKqGK8xAAAgAElEQVTco2H3acY7H9/YyQJXwP0FigObvdsYKpF17Ngxbd68Wa+88op8fHwkSW5uburZs6e8vb2VmJioPn36KCoqSh07dtTSpUvtz121apUeeeQRRUREKDw8XElJScrPz9fkyZPVoUMHde7cWb162eL2eXl5euqpp9SlSxd16tRJ48ePV05OjiTp4YcfVkJCgv28K1as0Pjx4yVJs2bNUteuXdW5c2f169dPJ0+evOK13HfffUpMTNT58+clSevWrVNUVFShMevWrbMnooYMGaIzZ85Ikvbu3auoqChFRESoU6dOio+PlyRt2LBB3bt3V2RkpCIjI/X111/bz9WuXTsdPHhQkpSSkqJhw4bZz/3Pf/7zT997FxcX9e7dWy1bttTKlSslSePGjdOKFSskSZs3b1Z4eLgiIiIUFhamXbt2SZJSU1M1fPhwdevWTeHh4Xrrrbfs57zS+3XmzBn179/fPr/p06fbn/P222+rW7duioqK0sCBA3X69Ok/nTv+viyLRd7ePoWO+fj4ymLJdBhrsVjk6/PHWB9fX1ksFhUUFMhiyZSPr2+h8b4+PrJkOp4HuNEsRa1jX19lFrH+LBaL/fvL7+N+X8dAcfvra9m30DjWMpyFj7mE0jIvFDp2PiNLvt6eDmM/++qARj/xkHzMJVQzoJz6RTSX2dPxl9ctGgepfNmSit2876bNG7gU9xdA8TFUIuvAgQOqXr26SpUqVeTjVapU0dKlS+Xh4aHMzEx1795drVq1UlBQkF577TV99NFHKl++vHJycmS1WpWQkKBdu3Zp06ZNcnFxsReVXF1dNXv2bPn5+amgoEBjx45VTEyMevfurcjISMXGxtqLV2vXrrX/7wEDBmjs2LGSpOjoaM2ePVvz5s0rcq4mk0kdO3bUxo0b1apVK1ksFtWuXdv++MGDBzV79mytXbtW5cuX1/z58zVt2jTNnz9f77zzjp566imFhYWpoKBA6enpkqSWLVsqLCxMJpNJR44cUf/+/bVt2zaH1x49erRCQ0O1cOFCSdLZs9cev27YsKF27NjhcHzBggWaOnWqGjduLKvVqqysLEnS2LFjNXjwYDVt2lQ5OTnq37+/6tevrxYtWlzx/dqwYYOqVatmL0T+/u8SFxen5ORkrV69Wi4uLlq5cqVmzpypOXPmXPP88dd4mc3KzMwodCwjM0Nms7fDWLPZrIyMP75xZ2ZkyGw2y2QyyWz2VmbGZefJyJTZ2/E8wI1mLmIdZ2ZkyLuI9Wc2m5WRWfQ6BopbUWs54ypr+dKxrGU4kwxLtkpeVrQq6eOp9MuKW5I06rU1mju2u/bHTdLZ85la/fEe9ejQxGHco+HNtG7Lt8rMyrlp8wYuxf0FUHwMVcj6MxcuXNDkyZOVmJgok8mk1NRUJSQkKCgoSM2bN9e4cePUtm1btWnTRgEBAQoICFBeXp5eeuklNWvWTG3btpUk5efn67333tO2bduUn5+v8+fPy9PT9s02MjJSPXr00AsvvKCkpCSlpaXp3nttn7Kybds2rVy5UhaLRXl5eX8636ioKI0ePVq//vqrIiMjCz22a9cuhYaGqnz58pKkXr16KSIiQpLUrFkzvfnmmzpx4oRatGihhg0bSpKSk5M1atQopaSkyM3NTb/++qtOnz4tf39/+3kzMzO1b98+vf/++/ZjZcqUueb3+Eq/NWjevLlmzJihhx9+WK1bt1bt2rVlsVi0e/fuQoWyzMxMJSUlqUWLFld8vxo2bKilS5dq1qxZuu+++9SyZUtJ0tatW/W///3PnlyzWq2FfrOBG6969UDl5Vl1/PgxVa8eKEk6mJigoGDH6H9QcC0dTExQ/QYNJEmJiQn2zYeDgoO1fNl7KigosH/DPnQwUb1697k1F4I72l9ZxzWDLq7j+g0uGVfLYRxQHIpey4mqWcQarRkUrIOJCbrbvpYTWctwGoeOp8rNzUVB1fyVdMKWrq9fu4p+PHLKYexvaRY98dIy+9+nDA3XNz8cLzTGs4S7ujzYWD1H/b2tNIC/g/sLFAcXJ/rkwOJkqNbCevXq6fjx4/aEzuXmzp0rf39/xcbGav369WrQoIGys7MlSYsWLdJzzz2nrKws9e3bV19++aV8fX21ceNGdezYUYmJierUqZNOnz6tDRs2aM+ePfrggw+0YcMG9enTx95aWLlyZQUHB2vbtm2KjY1VVFSUTCaTTp48qRkzZmjOnDmKj4/X9OnT7c+5koCAAHl4eGj16tUKCwu75vehf//+evPNN1WmTBlNmzbNnvoaOXKk+vTpo40bNyo2Nlaurq72679R9u/fr1q1HL/ovvjii5o2bZrc3d01YsQIrV69Wvn5+TKZTFqzZo3i4uIUFxenzZs3q2/fvld9vxo3bqzY2FjdfffdiouLU9++fSXZimiDBg2ynys+Pl4ffvjhDb0+FGY2m/XAQw9pycIFslgs2rd3j77YukVhnSMcxoZ1jtC/lr+vlJQUpaamaPnS99U50lZ0bNr0Prm6uGrliuXKycnRvz+wtaTe16zozVqBG8nLbNYDDz6kNxctUNbv6/jzLeoU7riOwztHaMWyS9bxsvfVOeKPtu/c3BxlZ2eroKBAeXl5ys7OVn5+/q28HNzBvMxmtbtkLX+7d6++/HyLwsI7O4wN6xypFcuWKvXiWv7XsvcVzlqGk7BcyFHc1u80cVAnmT099I+GNRUW2kAr43c7jK1RtZzKlPKWi4tJD7eopye7tNDMy/bBimjbUOfSLfryvwdv1SUA3F8AxchQhazAwEC1a9dOEydOVMbFNiWr1aro6GhlZmYqPT1dFStWlJubmw4ePKhvvvlGkm3Pq+TkZDVo0EDPPPOMWrRooR9//FFnz55VVlaWWrVqpdGjR8vX11fJyclKT0+Xn5+ffHx8lJ6ebt+D6ndRUVGKjo5WfHy8PR2UkZEhd3d3+fv7Kz8//5oLLCNHjtTo0aPl5+dX6HizZs305Zdf2veAWr16te6//35J0tGjR1WtWjX16tVLffv21f79+yVJ6enpqlq1qiTZN8C/nLe3txo3blxo/7BraS3Mz8/X6tWr9Z///Ee9e/d2ePzIkSMKCQlRv3791LlzZ+3fv18+Pj5q0qSJ3n77bfu4U6dO6fTp01d9v5KTk+Xj42Pfn+yHH35Qfn6+2rVrp5UrV9oLmTk5OYX2K8PN8dLLk5SdfUFtW9+vcS+M0ksTJis4uJb27vlGze9tbB/XvUcvhYa2VbfIcHWNCFfr1qHq3sO275y7h4fmLVysDevj1LL5vVoXG6N5CxfL3cOjuC4Ld5gXJ0zShewLaht6v8aPGaUXL1nH/2j6xzru1qOXWrdpq+5R4eoWGa5WrUPV7eI6lqSBA55SsyYN9N23+zRt8gQ1a9KgyE1dgZvlxQkTlZ2drXahLS6u5UkKuriW7296j31ctx49L67lzuoe2fniWu5pf3zQgKfUvEnDi2t5opo3aai9rGXcQiOmr5JXCXed2DpDy2b014jpq/TjkV/UonGQTu/4Y9uIe+oG6JvoF3V6+xxNHdZZT7y0TD8e+aXQuR4Nb6aVGx2LYMDNxv0FbjWTqXj/OAtTgcF2mMvJydHixYv18ccfy93dXfn5+QoNDdXIkSN16NAhjRkzRiaTSTVq1FBmZqY6deqksLAw9e/fX+np6TKZTKpUqZJmzpypn3/+WRMmTFBeXp6sVqtatmypsWPHKjMzU8OGDdMvv/yismXLKjg4WNnZ2Zo5c6YkKSsrSy1btlT9+vULFYReeeUVbd26VX5+fgoNDdW6deu0detWh2tYuHChLBaLfX+o3+3atUuzZs3S2rVrJdk2e3/33Xcl2dJbU6dOVbly5TR16lTt2rVL7u7u8vDw0Msvv6wGDRpo3bp1WrBggUqVKqVWrVpp1apViomJUdWqVdWuXTu99dZbql27tlJSUjRlyhSdOHFCLi4uCgsL0zPPPOMwz5CQEPu+XTk5OapXr56GDBmi4Itx2XHjxunuu+/WY489piFDhuj48eNydXVVyZIl9eqrr6patWo6ffq0ZsyYoUOHbJ/K4e3trVdffVVBQUFXfL9iYmK0dOlSubi4KD8/X08++aS9YLh06VLFxMRIsiW0evfurUcfffSa18+FP+/4BJyap5uUlVvcswCuj9fFfZotuYa6BQEcmN1td/VejYcW80yA65O1bxH3FzA8L8fPgbjtfHKgeD/srH09/z8fdAsYrpAFXA8KWTA6Clm4HVDIwu2CQhZuFxSycDugkHXzOUsh67ba7B0AAAAAAOB25EztfcXJUHtkAQAAAAAA4M5FIgsAAAAAAMDJmUQkSyKRBQAAAAAAAIOgkAUAAAAAAABDoLUQAAAAAADAybnQWSiJRBYAAAAAAAAMgkQWAAAAAACAk2OzdxsSWQAAAAAAADAEClkAAAAAAAAwBFoLAQAAAAAAnJyJzkJJJLIAAAAAAABgECSyAAAAAAAAnBybvduQyAIAAAAAAIAhUMgCAAAAAACAIdBaCAAAAAAA4ORc6CyURCILAAAAAAAABkEhCwAAAAAAAIZAayEAAAAAAICT41MLbUhkAQAAAAAAwBBIZAEAAAAAADg5E4EsSSSyAAAAAAAAYBAUsgAAAAAAAGAItBYCAAAAAAA4OToLbUhkAQAAAAAAwBBIZAEAAAAAADg5F3Z7l0QiCwAAAAAAAAZBIQsAAAAAAACGQGshAAAAAACAk6Ox0IZEFgAAAAAAAAyBRBYAAAAAAICzI5IliUQWAAAAAAAADIJCFgAAAAAAAAyB1kIAAAAAAAAnZ6K3UBKJLAAAAAAAABgEiSwAAAAAAAAnZyKQJYlEFgAAAAAAAAyCQhYAAAAAAAAMgdZCAAAAAAAAJ0dnoQ2JLAAAAAAAABgCiSwAAAAAAABnRyRLEoksAAAAAAAAGASFLAAAAAAAABgCrYUAAAAAAABOzkRvoSQSWQAAAAAAADAIClkAAAAAAAAwBFoLAQAAAAAAnJyJzkJJJLIAAAAAAABgECSyAAAAAAAAnByBLBsSWQAAAAAAADAEClkAAAAAAAAwBFoLAQAAAAAAnB29hZJIZAEAAAAAAMAgSGQBAAAAAAA4OZPBIllHjx7VuHHjdO7cOZUuXVqzZs1SYGBgoTGLFy/Wpk2b5OLiInd3dz3//PNq1arVVc9LIQsAAAAAAAA31KRJk9SnTx9FREQoLi5OEydO1PLlywuNadCggZ588kl5eXkpISFBjz32mLZv3y5PT88rnpfWQgAAAAAAANwwZ86c0YEDBxQWFiZJCgsL04EDB3T27NlC41q1aiUvLy9JUkhIiAoKCnTu3LmrnptEFgAAAAAAgJMzFXNnYVpamtLS0hyOlyxZUiVLlix07NSpU6pQoYJcXV0lSa6uripfvrxOnTqlMmXKFHn+devWqVq1aqpYseJV50EhCwAAAAAAAFe1bNkyLVq0yOH40KFDNWzYsOs69+7du/XGG2/ovffe+9OxFLIAAAAAAACcXHFv9d6vXz9FRUU5HL88jSVJlSpVUkpKiqxWq1xdXWW1WpWamqpKlSo5jN23b59eeOEFLVmyRDVr1vzTeVDIwh3FkxWP24CXe3HPALgxzO7FfTsG3BhZ+xx/Ow0YDfcXAP5MUS2EV1K2bFnVrVtX8fHxioiIUHx8vOrWrevQVvj999/r+eef14IFC3TXXXdd07lNBQUFBX959gAAAAAAALhlvjuRXqyv37Ca718an5SUpHHjxiktLU0lS5bUrFmzVLNmTQ0YMEDDhw9X/fr11bVrV508eVIVKlSwP++1115TSEjIFc9LIQt3lF/O5xb3FIDrUrGUu85k5hX3NIDrUtbbFo/9zWIt5pkA18fPbNvANiWN+wsYW4WS7qo+fENxTwO4LscXhBf3FG6675KLuZAV8NcKWTeLS3FPAAAAAAAAALgW7BgEAAAAAADg5EzFvt27cyCRBQAAAAAAAEOgkAUAAAAAAABDoLUQAAAAAADAyZnoLJREIgsAAAAAAAAGQSILAAAAAADAyRHIsiGRBQAAAAAAAEOgkAUAAAAAAABDoLUQAAAAAADA2dFbKIlEFgAAAAAAAAyCQhYAAAAAAAAMgdZCAAAAAAAAJ2eit1ASiSwAAAAAAAAYBIksAAAAAAAAJ2cikCWJRBYAAAAAAAAMgkIWAAAAAAAADIHWQgAAAAAAACdHZ6ENiSwAAAAAAAAYAoksAAAAAAAAZ0ckSxKJLAAAAAAAABgEhSwAAAAAAAAYAq2FAAAAAAAATs5Eb6EkElkAAAAAAAAwCBJZAAAAAAAATs5EIEsSiSwAAAAAAAAYBIUsAAAAAAAAGAKthQAAAAAAAE6OzkIbElkAAAAAAAAwBBJZAAAAAAAAzo5I1v+3d9/RURXvH8c/CwmBJEgTESQgEBJBpSiQ0CUoPaTQi10UUIgU6UWKdFQCSFNBpNdAwE79AQIqFvQrAYJAUAnVkEbq/P4IuSYkAUQDWXi/zuEccnf23pnd596dnfvMrCQysgAAAAAAAGAnGMgCAAAAAACAXWBqIQAAAAAAQB5nY26hJDKyAAAAAAAAYCcYyAIAAAAAAIBdYGohAAAAAABAHmdjZqEkMrIAAAAAAABgJ8jIAgAAAAAAyONIyEpDRhYAAAAAAADsAgNZAAAAAAAAsAtMLQQAAAAAAMjrmFsoiYwsAAAAAAAA2AkysgAAAAAAAPI4GylZksjIAgAAAAAAgJ1gIAsAAAAAAAB2gamFAAAAAAAAeZyNmYWSyMgCAAAAAACAnSAjCwAAAAAAII8jISsNGVkAAAAAAACwCwxkAQAAAAAAwC4wtRAAAAAAACCvY26hJDKyAAAAAAAAYCfIyAIAAAAAAMjjbKRkSSIjCwAAAAAAAHaCgSwAAAAAAADYBaYWAgAAAAAA5HE2ZhZKIiMLAAAAAAAAdoKMLAAAAAAAgDyOhKw0DGQBuKZLUVGaPH6kvt33tYoULaoevV/XUy1aZylnjNG8We9o84a1kqTWfu30ymv9ZLuS/3rgm316L3iafj91UkWKFFPXZ19U24AOt7QtuHtdivpLE8aO0v6v96hI0aLq1ed1NWvZJks5Y4zeC35boSFpcezr3069+/a34jglJUXvz52lzRvWKy4uVg+4ldOs+QtVuPA9t7Q9uHtFRf2lCWNGat/Xe1S0aFH16ttPzXOI5dnBb2vj+jWSpLYB7fVqhlj2rllVBQsWsqYoPNm8lYaPHnfL2gGk9y++2ZvWv3j51Zz7F3Ov6l/0vNK/+PH77zQoqGem8vHx8Ro7+R094fPULWkH7m5FnB01pUt1NXqopC7EJmpK6CFt+O73LOU+6uml2pWKW3875s+nY2di1HzSjkzlvNxLaFXfepr5+WFN2xyW6/UH7BUDWbgmHx8fzZ07Vx4eHta2wMBADR48WF5eXje1T09PTx04cEAuLi5atGiRfH19VaJECUnSzJkzFRcXp8GDB/8n9ce/987U8XJ0dNT6z3bo6OFDGtKvt9wre6pCJfdM5ULXr9auHVv1wdK1stlsGtCnh0qXeUB+7TopOTlJIwYFqWef/vIN6KBDv/6sfr1eUNWHH5W7x0O3qWW4m0ybNF6ODo7a9NUOHQk7pIFBveXu8ZAqXhXHG9au1v9t36rFK9bJZrMpqNdLKvNAWQW07yRJen/uLB388QfNW7RM95curWPhR1WggNPtaBLuUtMmjpeDo6M+2bJTh8MOaUDfXqrs4amKlSpnKheydpV2btuiJSvXSzab+vZ8UWXKPKDADp2tMh+vXCe3cuVvdRMASdI7U8bLwcFRIZ+n9S8Gv559/2Lj+tXatX2rPrzSv+j/Wg+VudK/qF7zcX2+8xur7Pff7deQ/q/Jq279W90c3KXGdXhUSSmpenz4F6patogWvlJH//s9SkdOx2Qq9+zcfZn+XtGnrvYcOZdpm0M+m0YHPqwDxy/mer0Be8caWbitFi9erPPnz9/uaiAH8fFx2rn1S734Sh85OzurWo3HVK/RE/ri09AsZT/bvEEduz2r+0rdr5L3lVKnrs/qs80bJKXddY2NjVGzVr6y2WyqUvVRlXuwoo7/duxWNwl3ofj4OG3f8qV69O4jZ2cXVa/5uBo0aqLPNm/MUvaTTRvUufvfcdzl6ef0ycYQSdKlS1FatexjDRk5RqXLlJHNZlMl98pycmIgC7dGfHyctm35Qq/07itnZxfVqPm4GjZuok83Zb0mfxK6QV2ffk73lbpf991XSl2ffl6bQ0NuQ62BrOLj47Rj65d6qeff/Yv6jZ7Q559k07/YtEGdMvYvuj2rTzdtyHa/n23aqCd8mqlQIefcbgKgQgXyq2X10pq+OUxxiSn69tgFffVzpAJrl73m88oWL6Q6lUpo3f5Tmbb38Kmk/zt0VuGRMTk8E0hb7P12/ssrGMjCTYuJidHw4cPVvn17+fr6avz48UpJSZEkffjhh2rXrp38/f3VqVMn/frrr1meP2fOHJ05c0Z9+/aVn5+fjh49KkmKjIxUjx491KJFC7388suKj49XQkKCGjRooDNnzljPHz9+vObOnXtrGnuXijh5QvnzO8it/IPWNvfKnvrt2NEsZY8fC5d7ZU/r70oZyhUvca+aNmulT0NDlJKSop9/+kGRp/9UtRo1c70NwMkTJ5TfwUHlMsRxZQ9P/RaeNY5/O3ZUlTNkCbp7/B3H4UeOKH9+B23b8oXaPNVInfxbae3KZblefyDdyRPHs43lY9lck48dOyp3D89M5a6O+V4vPqNWTzbU4AF99ccfWafCALklu/5FpcqeOp5T/yJDLOfUD4mPj9P2rV+oRZu2uVJn4GoV73NRSqrRb2djrW2//h4lj9KFr/m8wDpltT/8vE5diLe2PVCskDp6u2nGZ4dzrb7AnYSBLFxX+kBT+r/w8HBJ0sSJE1W7dm2tWbNGGzZs0IULF7R2bdr6Bf7+/lq7dq1CQkIUFBSk0aNHZ9lvr169dN999yk4OFgbNmyQu3taKvnPP/+s6dOn69NPP1VycrJCQ0Pl5OQkf39/rVq1SpIUGxurzZs3q0MH1ljKTfFxcXJxccm0zcW1sOLjYrOWjY+Ti6ur9bera2HFx8XJGCNJatq8lT76YI6eavCY+r7yrF7q1Vf3lSqduw0AlFMcuyouLi77slfFcdyVOD575rRiYqIVceKE1oZ+obemvKMP5r2n/Xv35HobACnna3JcbDbX5Lg4uboWzlDO1YplSZrz/mKt/+RLrVy/WSVL3qeBfXspOTk5dxsAXJFdLKddb6/fv3C5qn+Rbue2r1SkaDHVeKx27lQauIpzAQdFX07KtO1SfLJcnK69ek+72m5asy8i07Y32z9iZXYBuD7WyMJ1BQcHZ1kjS5K2bt2qn376SQsXLpQkXb58WaVKlZKUNhg1b948RUVFyWaz6fjx4zd8vAYNGuiee9IWTq5WrZpOnjwpSerWrZu6deumnj17auPGjapfv761thZyRyFnZ8Ve9QUpLjZGhZxdspYt5Jzpy1RsbIwKOTvLZrPpxPFjGjv8DY2b/K5qedXVqYgTGtL/Vd17b0nVbdA419uBu1t2cRwbGytn56xTTwo5Oysu9u+U/tiYGDlfiWMnp4KSpOd79JJTwYJy9/DUk81b6utdO1XHu17uNgJQDrEcEyNnl2yuyc7Ois0Qy3FXYj59sfeaj9eSJDk6FlC/N4aqaYM6Ov7bMblX9siyL+C/lv11OUbOOfQvMpaNy9C/yOizTRvV4soSBsCtEJeYrMIFHTNtK1zQQbEJOd8UqFWxuEre46RPfvjT2tb0kVJydXLQpu//yLW64k7CNU5iIAv/gjFG7733ntzc3DJtT0xMVFBQkJYsWaKHH35YkZGRatSo0Q3vN+N6M/nz51dCQoIkqXTp0nrkkUe0ZcsWLVu2TGPHjv1vGoIcuZUrr5SUZJ06eUJlrywIfPRwmCpUdM9S9sGKlXT0SJiqPPxoWrkjf5f7LfyoypYrrzpXFl8tV76C6tZvpH1f72IgC7muXPnySklOVsTJE9bC1kcPh2VZUFiSKlR015HDYar6SLW/y12J40pXvuBn+o7EFybcQuXKP6iU5GSdPHHcml549HCYKmZzTa54JZYfvhLLRw4fyjbm09lsypLhAuSW9P5Fxuty+JEwPZhD/yL8cJiqZtO/SBd5+k/9cOAbDRw2KvcrD1xx7Eys8uez6cGSLjp+ZXphlQfu0eE/o3N8Tvs6ZfXZj39myryq73GvHi1XRN+MT/ulzXsKOirFGHmWuUc9FnyT066AuxpTC3HTfHx8NH/+fGtdrAsXLigiIkKJiYlKTk5W6dJp08aWLct5DRkXFxdFR+d8sb9a9+7dNWHCBDk4OKhmTdZXym2FCjmrUZMn9cH8WYqPj9PBHw9o985tatbSN0vZ5q3aatWyj3T2TKTOnT2jVUs/UovWfpKkyp4P6feIEzrwzT4ZY/T7qZP6etcOVXTnzj9yX6FCzmrs85QWzJmp+Pg4/fTDAf3fjq1q0TrrOiot27TViiWLdfZMpM6ePaPlSxapVVt/SVJZt3KqXvNxffTBfCUmJur4sXB99fmnqt/wiVvcItytChVy1hM+T2nBnLRr8o8/HNDOHVvVsk3Wa3LLNm21fMlHOnMmUmfPnNGyjxeptW9aLB8LP6LDYb8qJSVFcXGxCn57ikreV0oVKlS81U3CXSq9f/HhvL/7F7t2bFPzVlljuUXrtlqZoX+xcslHatnGL1OZLz4N1cPVauiBsuVuVRMAxSem6LMf/1T/Vp4qVCC/alUopqcevV/rvjmVbXknx3xqXbNMlmmF0zcfUpNx29Rq8k61mrxTX/58Wsv3nNTApT/cimbAzrDYexoGsnDThg0bpnz58snPz0++vr566aWXFBkZKVdXV/Xt21ft27dXYGBgttN30j3zzDMaNmxYpsXer6VOnTpycnJS165d/8um4IYlDhoAABypSURBVBr6DRqpxMsJ8m/eWGNHDFK/wSNVoZK7fvz+O7Vo/Pc6FG0DO6pegyf0fNcAPdfFX971G6ltYEdJ0gNly2nQiHEKnj5RLZt4Kajn82rU5Cm18Wt3u5qFu8wbQ0coISFBrZs20uhhb+iNoSNVsZK7fjjwnZrWr2WV82/XUQ0aNVb3jv7q3sFP9Ro0kn+7jtbjYydO1ek//1DLJvU0MKi3Xu7VR7W8vG9Hk3CXemPYSCUkXFZLn4YaNXSgBg0bpYqVKuuHA9+qSb3HrXIB7TupQaMn1L2Dn7p1aKt6DRsroH0nSdKF8+c1YvAANW1QR+3aNNeff/yuaTPek4OjY06HBf5z/QePVEJCgvyaNdaY4YPUf8jf/YvmjTL3L+o3fELPdQnQs539VbfB3/2LdJ9vDs325gSQ20asPqiCjvl14K1mCn72cY1YdVBHTseodsXi+t/UlpnKNn/0fl2KT9KeI5l/sT02IUVnoxOsf5eTUhWfmKyouMzrbwH4m82QRw47EhERoS5duujLL79UoUKF/vHzT0fxgQD7dn8RR52PZUFm2LcSLmkrG1yMY1Fb2LdizvklSZGX6F/AvpW6x1Hl+4be7moA/8qJ4KxZnXea3/9KvK3Hf6Bogdt6/HSskQW7MWPGDK1du1ZDhgy5qUEsAAAAAADsVR6a3XdbMZAFuxEUFKSgoKDbXQ0AAAAAAHCbMJAFAAAAAACQx+WlBddvJxZ7BwAAAAAAgF1gIAsAAAAAAAB2gamFAAAAAAAAeZyN5d4lkZEFAAAAAAAAO0FGFgAAAAAAQF5HQpYkMrIAAAAAAABgJxjIAgAAAAAAgF1gaiEAAAAAAEAex8zCNGRkAQAAAAAAwC6QkQUAAAAAAJDH2UjJkkRGFgAAAAAAAOwEA1kAAAAAAACwC0wtBAAAAAAAyONsLPcuiYwsAAAAAAAA2AkysgAAAAAAAPI6ErIkkZEFAAAAAAAAO8FAFgAAAAAAAOwCUwsBAAAAAADyOGYWpiEjCwAAAAAAAHaBgSwAAAAAAADYBaYWAgAAAAAA5HE25hZKIiMLAAAAAAAAdoKMLAAAAAAAgDzOxnLvksjIAgAAAAAAgJ1gIAsAAAAAAAB2gamFAAAAAAAAeRyLvachIwsAAAAAAAB2gYEsAAAAAAAA2AUGsgAAAAAAAGAXGMgCAAAAAACAXWCxdwAAAAAAgDyOxd7TkJEFAAAAAAAAu0BGFgAAAAAAQB5nEylZEhlZAAAAAAAAsBMMZAEAAAAAAMAuMLUQAAAAAAAgj2Ox9zRkZAEAAAAAAMAukJEFAAAAAACQx5GQlYaMLAAAAAAAANgFBrIAAAAAAABgF5haCAAAAAAAkNcxt1ASGVkAAAAAAACwEwxkAQAAAAAAwC4wtRAAAAAAACCPszG3UBIZWQAAAAAAALATZGQBAAAAAADkcTYSsiSRkQUAAAAAAAA7wUAWAAAAAAAA7AJTCwEAAAAAAPI4ZhamISMLAAAAAAAAdoGMLAAAAAAAgLyOlCxJZGQBAAAAAADATjCQBQAAAAAAALvA1EIAAAAAAIA8zsbcQklkZAEAAAAAAMBOkJEFAAAAAACQx9lIyJJERhYAAAAAAADshM0YY253JQAAAAAAAIDrISMLAAAAAAAAdoGBLAAAAAAAANgFBrIAAAAAAABgFxjIAgAAAAAAgF1gIAsAAAAAAAB2gYEsAAAAAAAA2AUGsgAAAAAAAGAXGMgCAAAAAACAXWAgCwAAAAAAAHaBgSzgP5CUlKQZM2aoefPm8vX1lb+/vyZNmqSkpKTbXbUbNnPmTNWtW1d+fn5q27atOnXqpEOHDt30/k6dOqWVK1fe9PO3bNmiyZMnX7fczJkzcyz39NNPq2nTpvLz81OrVq3Up08fRUdHS5LWrVunvn37SpIOHjyoAQMGXPdYp06dkpeXV7aPXbp0SQsWLLjuPnILMZh7oqKi1L9/f7Vp00a+vr7y8/PT119/LUnat2+fdu3a9Z8f81qxdnW5qlWrys/PT76+vmrRooVGjBih06dPW2WGDx+ub7/99j+vo726E84VSdq1a5e6du2qpk2bKjAwUB06dNC6detuW33WrVsnT09PLV261NpmjFHTpk1vOJav/sxYtGiRzp8/b/19rev9nepOiNeZM2fK09NT27dvt7bFxsaqZs2aCgwMzJVj9ujRQydPnvxHz/H09JSvr698fX3VvHlz9e/fX0ePHrUenzFjhj755JP/uqrIw3x8fHT48OFM2wIDA7Vv376b3qenp6diY2MlcY0D/g2H210B4E4wdOhQJSQkaO3atXJ1dVVycrLWrl2rxMREOTo63u7q3TB/f38NHjxYkrR06VJNmzZN77///k3t6/fff9fKlSvVqVOnf/zc5ORkNW3aVE2bNr2pY2c0YsQINWnSRMYY9evXT8uXL9fLL7+cqcyjjz6q6dOn/6vjXLp0Se+//7569Ojxr/Zzs+62GExOTpaDw635CHv33XdVqlQpTZ8+XTabTRcvXlR8fLwkaf/+/YqLi1ODBg2yfe6tqGfhwoW1YcMGSVJiYqLmzJmjzp07KzQ0VIULF9Zbb72Vq8e3N3fCubJr1y4NGzZMwcHBqlGjhqS0gaD0OLjarTpfqlatqpCQEHXr1k1S2kBvkSJFFBMTc93nZveZsXjxYtWrV08lSpTItTrndXdCvErSww8/rPXr1+uJJ56QJH322WeqUKFCrh3vZm8srVixQi4uLkpNTdXKlSvVpUsXrVu3Tm5ubgoKCvqPa4m7Hdc44OYxkAX8S8ePH9dXX32lHTt2yNXVVZLk4OBgdcbDwsI0ZswYxcfHKyEhQR07dtRzzz0nSVq5cqUWLVqkAgUKKDU1Ve+++64qVKigsWPHau/evSpQoICcnZ21YsUKJScn65VXXtHFixeVkJCgatWqacyYMSpQoICaNWum4OBgPfTQQ5KkJUuW6JdfftHEiRM1efJk7d+/X0lJSSpWrJgmTJigBx544LrtiomJUZEiRSTpmseWpHnz5mnTpk2y2WxydnbWsmXLNHbsWJ06dUp+fn4qX768goODdezYMU2YMEEXL15UUlKSnn32WbVr105S2h2q1157Tdu3b1fDhg1Vrlw5bd++XcHBwTp79qz69++v2NhYJSQkqHHjxho0aNA/ep+Sk5N1+fJlq00Z7du3T5MnT7ayGZYsWaLFixercOHCaty4sZYuXZrp7ts777yjHTt2KD4+Xm+99ZZq1aqlsWPHKjo6Wn5+fipUqJBWrFjxj+r3b9wNMXjq1Cm1a9dOgYGB2rt3rzp27Kh69epp1KhRunDhghwcHNSvXz81atRIK1asUFhYmEaPHq2ffvpJHTp00OrVq1WtWjW9+eabqlKlijp16iRPT0/169dPX375pf766y8NGjRIzZs3z1KP06dPy8vLSzabTZJUrFgxFStWTGFhYVqxYoVSU1O1Z88etW7dWq1atcpSz6ZNm2r8+PH6448/lJCQoNatW6tnz56SdEOvTWJiogYNGqT7779fgwcPtuqRnQIFCigoKEh79uzRxo0b1a1bNz399NN64YUX1KRJk2zf70qVKl3z3BwwYIB+++03JSUlqVy5cpowYYKKFCmiY8eOaejQoYqPj1dqaqoCAgL04osvKjExUe+8846++eYbJSYmytPTU2+++aZcXFyu+57ntjvlXJk9e7Z69+5tDWJJUtmyZfXqq69Kyv58uVYcXu/afCPniSS5ubnp4sWLOnr0qNzd3bV+/XoFBARo1qxZVpmdO3fq7bffVkpKiooXL66xY8eqfPnyWT4zqlSpojNnzqhv375ycnLK9mbD/Pnz9cUXXyglJUWlSpXSuHHjVLJkyX8UE3nZnRKvklSnTh1t375dUVFRKlKkiEJCQhQQEKD169dbZUJCQvTBBx9IksqVK6exY8eqRIkSOnDggMaNG6fU1FQlJyerV69eatOmjUJDQ7V48WIrO23w4MGqW7eupLRMmrlz58rDw0ORkZEaP368jh8/Lklq06aNXnnllWu+9vny5VOXLl20f/9+LVu2TIMHD9aQIUP0yCOPqHv37vrqq680Y8YM5cuXTykpKRo5cqS8vLx05syZf3y9P3/+vAYMGGBl5tStW1fDhg2TdOfHuD2LiYnRxIkTFRYWpoSEBHl5eWno0KHKnz+/PvzwQ23evFkpKSlycnKy+h4ZzZkzJ9trXGRkpHr06KGIiAiVK1fOirOmTZtq3bp1uu+++yRJ48eP17333mvFF3DXMQD+lc2bN5u2bdvm+Hh0dLRJSEgwxhgTExNjWrZsaY4ePWqMMeaxxx4zkZGRxhhjEhISTFxcnPnll19MixYtTEpKijHGmL/++ssYY0xqaqq5cOGC9f833njDLFu2zBhjzOzZs82ECROsYwYEBJj9+/cbY4w5f/68tX3VqlXm9ddfz7aewcHBxtvb27Rt29Y0btzY1K9f3xw7duy6x163bp3p2LGjiY6ONsYYq9zevXtNQECAtf+kpCQTEBBgtT06Oto0a9bM+tvDw8PMmzfPKr927VrTp08fY4wxly9fNjExMcYYYxITE83TTz9tduzYYdV70qRJ2bape/fuxsfHx7Rt29bUrl3bdOzY0XovMu4/Y11//fVX06BBA+t1GzdunKlTp44xxpiIiAjj4eFhtm7daowxZsOGDaZTp07WY+nlbrW7IQbTX/vNmzdb5du3b29WrVpljDHmyJEjpk6dOub8+fPm+PHjpnnz5sYYY+bOnWs6depkxVazZs3MiRMnjDFpMffxxx8bY4z59ttvTYMGDbKt1549e0ytWrVMu3btzPjx482ePXsy1Tlj/GVXz+eee856LRISEkyXLl3Mrl27rvnapMfTxYsXTffu3c1HH32Ubd1yirtx48aZ0aNHG2PSzoP0mM3u/b7euZmxjm+//baZOnWqdYy5c+daj6XHyezZs83s2bOt7VOmTDFvv/12tvW/1e6Uc6VatWrmf//7X47t+CdxeCPX5hs5T9KvqWvWrDFTpkwxMTExpmnTpub48eNWjJ47d854eXmZI0eOWG1s3769MSbrZ4YxxjRp0sSEhYVZf2c830JCQsyIESOs137p0qWmf//+Ob4m9uhOidf0923GjBlm6dKl5uTJkyYwMDDTex4WFmbq169v1fmdd94xQUFBxhhjevbsaUJDQ636RUVFGWPS+hupqanGGGPCw8NNw4YNrWNmjJ3u3bubBQsWWI9lrHdGHh4eVl8j3cKFC81LL71kjDFm8ODB1rng6+trDhw4YIwxJjk52eoD3cz1fuHChWbkyJHWY+nvy90Q43ldkyZNTPPmzU3btm2tf9WqVTN79+41w4YNM+vXrzfGGJOSkmL69etnVq5caYzJ/F7v3r3bdOjQwfo7Y5xld4176qmnTFRUlElNTTXPP/+8tc+pU6eamTNnGmPSzndvb29z7ty53H0BgDyMjCwgl12+fFlvvvmmwsLCZLPZdObMGR06dEiVKlWSt7e3hgwZoiZNmuiJJ56Qm5ub3NzclJycrOHDh8vLy0tNmjSRJKWmpurDDz/Uzp07lZqaqqioKBUsWFBS2nSsjh076o033lB4eLguXbqkWrVqSUq7+71s2TLFxcUpOTn5mnXNOK0rJCRE/fr1U0hIyDWPvW3bNnXp0sW6W1ysWLFs9338+HGFh4erf//+1rakpCQdO3ZMlSpVkiQFBARk+9yUlBRNmTJF33//vYwxOnfunA4dOqRGjRpd9/VPn1qYkpKi0aNHa+rUqRo+fHiO5ffv36/GjRurePHikqT27dsrNDTUetzZ2dl6T2rUqGEXaxncCTEoSU5OTmrZsqWktDuhv/76q5U14u7uripVquiHH36Qj4+PEhISdPr0aX399dfq16+f5s6dK19fXyurKF2rVq0kpb2XZ86cUUJCgpycnDLVqW7dutq2bZv27dun7777Tq+//rpefPHFLFNU02WsZ1xcnPbv368LFy5Yj8fGxio8PFz169e/5muTmJiorl27qk+fPtb+/q3s3u+jR49e89zcsGGDQkNDlZSUpLi4OD344IOSpNq1a2vq1KmKj4+Xl5eXvL29JUlbt25VTEyMPv/8c6sd6dkceZ09nSsZ9e3bV8ePH9f58+e1e/duSTceh6VKlbrutflGzpN0LVq0UGBgoB588EE9+eSTyp8/v/XYjz/+qIceekju7u6SpHbt2mnMmDE3NPXwalu3btXPP/9sfW6kpKRYn0N3C3uL14CAAA0cOFDnzp2Tv79/psf27dunxo0bW9kmnTt3lp+fnyTJy8tLc+bM0cmTJ1W/fn1Vr15dkhQREaEBAwYoMjJSDg4OOnfunM6ePZspYyk2Nlbff/+9Fi5caG1L/3y/EcaYbLd7e3tr4sSJatasmRo1aiQPD4+bvt5Xr15dixYt0uTJk1WnTh1rqjoxnjcEBwfLw8PD+jt9XbetW7fqp59+smLr8uXLKlWqlCTp559/1rx58xQVFSWbzWZlA96IBg0a6J577pEkVatWzVrrrVu3burWrZt69uypjRs3qn79+kxJxF2NgSzgX6patapOnDhhpctf7e2331bJkiU1adIkOTg46IUXXlBCQoIkadasWTp48KD27t2rZ555Rm+++aYaN26szZs3a9++fdqzZ4+mTZum9evXa/fu3fruu++0dOlSubq6au7cudYHY5kyZeTu7q6dO3dq//79CggIkM1m0++//66JEydqzZo1cnNz04EDBzRw4MAbaleLFi00ePBgXbhwQTt37szx2DfKGKNixYrluIaLlDZIlJ2FCxfq0qVLWr16tZycnDRy5EjrNbxR+fPn11NPPaUpU6b8o+ddLX06pZQ29eCffNnMLXdDDEpSoUKFrjmtLiNvb29t27ZN58+fl5eXl8aNG6ft27dnWXQ6/ct4+pft5OTkbL+gu7q6Wuu2PfLII5ozZ06OA1kZ65mamiqbzaY1a9ZkWc/meq+No6Ojqlevrq1bt6pZs2aZBgSu5+DBg2rbtm2W7dm932XKlMnx3Pz222+1fPlyrVixQsWLF1doaKhWrVolSWrevLlq1Kih3bt3a8GCBVq7dq2mTZsmY4xGjx5tTfHJS+6Uc6VKlSo6ePCgNVUlODhYsbGxeuyxx6wyNxqHR44cue61+UbPE0lycXFRjRo1NG3aNC1evDjHff5bxhj16tVL7du3z7Vj3G53Srymc3NzU4ECBbRq1SqFhoZmWUQ7J88995x8fHy0Z88ejRs3TvXr11e/fv3Uv39/DRkyRE8++aRSU1NVvXr1f9w3uJ6DBw+qcuXKWbYPGzZMYWFh2rt3r4KCgvT888+rVatWN3W9r1mzptavX689e/Zow4YNmj9/vpYvX35XxLg9M8bovffek5ubW6btiYmJCgoK0pIlS/Twww8rMjLyhm68pst4bc2fP78V06VLl9YjjzyiLVu2WEt4AHczfrUQ+JcefPBB+fj4aNSoUdZd5ZSUFK1evVqxsbGKjo7W/fffLwcHBx0+fNj69bDk5GRFRESoWrVqevnll1W/fn39+uuvunDhguLj49WwYUMNHDhQhQsXVkREhKKjo1WsWDG5uroqOjpamzZtylSPgIAArV69Wps2bbLu3sXExMjR0VElS5ZUamrqP1q3ad++fSpatKiKFi16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\n","text/plain":["<Figure size 1440x864 with 2 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"AaZVX_ZhCaO7","papermill":{"duration":0.14275,"end_time":"2021-01-20T23:41:38.189478","exception":false,"start_time":"2021-01-20T23:41:38.046728","status":"completed"},"tags":[]},"source":["# Visualize predictions\n","\n","Finally, it is a good practice to always inspect some of the model's prediction by looking at the data, this can give an idea if the model is getting some predictions wrong because the data is really hard, of if it is because the model is actually bad.\n","\n","\n","### Class map\n","```\n","0: Cassava Bacterial Blight (CBB)\n","1: Cassava Brown Streak Disease (CBSD)\n","2: Cassava Green Mottle (CGM)\n","3: Cassava Mosaic Disease (CMD)\n","4: Healthy\n","```\n","\n","\n","## Train set"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:41:38.486711Z","iopub.status.busy":"2021-01-20T23:41:38.478610Z","iopub.status.idle":"2021-01-20T23:42:07.973278Z","shell.execute_reply":"2021-01-20T23:42:07.973946Z"},"id":"ExEWWtxyCaO8","papermill":{"duration":29.642469,"end_time":"2021-01-20T23:42:07.974121","exception":false,"start_time":"2021-01-20T23:41:38.331652","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1MCRHv28k0YPW7pxNfUN65YOtwFZCipRV"},"executionInfo":{"status":"ok","timestamp":1612111833518,"user_tz":-540,"elapsed":8775541,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"18429ce6-fcef-41f9-ef88-612acec12e5a"},"source":["train_dataset = get_dataset(TRAINING_FILENAMES, ordered=True)\n","x_samp, y_samp = dataset_to_numpy_util(train_dataset, 18)\n","y_samp = np.argmax(y_samp, axis=-1)\n","\n","x_samp_1, y_samp_1 = x_samp[:9,:,:,:], y_samp[:9]\n","samp_preds_1 = model.predict(x_samp_1, batch_size=9)\n","display_9_images_with_predictions(x_samp_1, samp_preds_1, y_samp_1)\n","\n","x_samp_2, y_samp_2 = x_samp[9:,:,:,:], y_samp[9:]\n","samp_preds_2 = model.predict(x_samp_2, batch_size=9)\n","display_9_images_with_predictions(x_samp_2, samp_preds_2, y_samp_2)"],"execution_count":24,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:42:08.485006Z","iopub.status.busy":"2021-01-20T23:42:08.479584Z","iopub.status.idle":"2021-01-20T23:42:08.490084Z","shell.execute_reply":"2021-01-20T23:42:08.489432Z"},"id":"h9CeTJAYKYQd","papermill":{"duration":0.271568,"end_time":"2021-01-20T23:42:08.490212","exception":false,"start_time":"2021-01-20T23:42:08.218644","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1612111833885,"user_tz":-540,"elapsed":8775902,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"33081195-c660-4d08-84dd-b36d78d85093"},"source":["\n","save_data=True# You can immediately create a kaggle dataset from your models\n","if COLAB and save_data:\n","  \n","    import json\n","\n","\n","    \n","    data = {\"title\": \"Cassava Leaf Disease\", \n","        \"id\": \"aikhmelnytskyy/CassavaLeafDisease\", \n","        \"licenses\": [\n","                     {\n","                         \"name\": \"CC0-1.0\"\n","                      }\n","                     ]}\n","    \n","\n","    # for kaggle api Connection\n","    \n","    !kaggle datasets init -p /content/drive/MyDrive/Colab Notebooks/Cassava/\n","    \n","    with open(\"/content/drive/MyDrive/Colab Notebooks/Cassava/dataset-metadata.json\", \"w\", encoding=\"utf-8\") as file:\n","        json.dump(data, file)\n","    \n","    #if new dataset\n","    !kaggle datasets create -p /content/drive/MyDrive/Models/Cassava/\n","    #If you’d like to upload a new version of an existing dataset\n","    #!kaggle datasets version -p /content/drive/MyDrive/Models/Cassava/ -m \"Your message here\""],"execution_count":25,"outputs":[{"output_type":"stream","text":["Traceback (most recent call last):\n","  File \"/usr/local/bin/kaggle\", line 5, in <module>\n","    from kaggle.cli import main\n","  File \"/usr/local/lib/python3.6/dist-packages/kaggle/__init__.py\", line 23, in <module>\n","    api.authenticate()\n","  File \"/usr/local/lib/python3.6/dist-packages/kaggle/api/kaggle_api_extended.py\", line 166, in authenticate\n","    self.config_file, self.config_dir))\n","OSError: Could not find kaggle.json. Make sure it's located in /root/.kaggle. Or use the environment method.\n","Traceback (most recent call last):\n","  File \"/usr/local/bin/kaggle\", line 5, in <module>\n","    from kaggle.cli import main\n","  File \"/usr/local/lib/python3.6/dist-packages/kaggle/__init__.py\", line 23, in <module>\n","    api.authenticate()\n","  File \"/usr/local/lib/python3.6/dist-packages/kaggle/api/kaggle_api_extended.py\", line 166, in authenticate\n","    self.config_file, self.config_dir))\n","OSError: Could not find kaggle.json. Make sure it's located in /root/.kaggle. Or use the environment method.\n"],"name":"stdout"}]}]}