{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.6"},"papermill":{"duration":2705.650201,"end_time":"2021-01-20T23:42:08.938285","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2021-01-20T22:57:03.288084","version":"2.1.0"},"colab":{"name":"Cassava - ResNet101","provenance":[{"file_id":"14lxnkhkxhL-leLaM7_ewQrCSbDr617ZZ","timestamp":1611576808109}],"collapsed_sections":[]},"accelerator":"TPU"},"cells":[{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:08.648534Z","iopub.status.busy":"2021-01-20T22:57:08.647654Z","iopub.status.idle":"2021-01-20T22:57:08.650554Z","shell.execute_reply":"2021-01-20T22:57:08.651069Z"},"papermill":{"duration":0.038327,"end_time":"2021-01-20T22:57:08.651252","exception":false,"start_time":"2021-01-20T22:57:08.612925","status":"completed"},"tags":[],"id":"BkVGwREBxGQy","executionInfo":{"status":"ok","timestamp":1611934676763,"user_tz":-540,"elapsed":439,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["EPOCHS = 10 \n","HEIGHT = 512\n","WIDTH = 512\n","HEIGHT_RS = 512\n","WIDTH_RS = 512\n","CHANNELS = 3\n","N_CLASSES = 5\n","N_FOLDS = 5\n","FOLDS_USED = 5\n","ES_PATIENCE = 5"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:08.738880Z","iopub.status.busy":"2021-01-20T22:57:08.723182Z","iopub.status.idle":"2021-01-20T22:57:11.217685Z","shell.execute_reply":"2021-01-20T22:57:11.216355Z"},"id":"YZBauHrJCkn7","papermill":{"duration":2.537229,"end_time":"2021-01-20T22:57:11.217823","exception":false,"start_time":"2021-01-20T22:57:08.680594","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611934684354,"user_tz":-540,"elapsed":8020,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"3a9b46d2-43c4-4c91-e8dd-6cf25e3ccaf6"},"source":["import os\n","\n","models_path=''\n","\n","COLAB=True\n","import gc\n","!pip install fsspec\n","!pip install gcsfs \n","!pip install --upgrade --force-reinstall --no-deps kaggle\n","\n","from google.colab import drive\n","drive.mount('/content/drive')\n","%cd '/content/drive/MyDrive/Colab Notebooks/Cassava/'\n","\n","#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n","\n","database_base_path = 'gs://kds-0ec1dec9f628bce2bc810157442805632bd221934a9e1921da420af8/'\n","GCS_PATH = 'gs://kds-97ffa76638f61f952661d26d7752f59abdf8f804f1e4794ab6b2e297'\n","GCS_PATH_EXT = 'gs://kds-e707b2c823f5ab0df2845ed8abcbed536d27e188731770fde8a6a95b'\n","GCS_PATH_CLASSES = 'gs://kds-df6e525a58ba9104b570dd12c9abca118c8a509b740d9164e4cd4de3'\n","GCS_PATH_EXT_CLASSES = 'gs://kds-7e729109c97bb2badcc4d6ec847c47b388513403e0c35cfc68b5ae02'\n","\n","\n","# \n","#This is a path to a dataset that changes over time, so you need to constantly update it. To update the path just run the code: \n","#GCS_DS_PATH = KaggleDatasets (). Get_gcs_path ()\n","#print (GCS_PATH)......\n","models_path='/content/drive/MyDrive/Colab Notebooks/Cassava/model/'# I created a folder called Models/Cassava on my Google Drive"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: fsspec in /usr/local/lib/python3.6/dist-packages (0.8.5)\n","Requirement already satisfied: gcsfs in /usr/local/lib/python3.6/dist-packages (0.7.1)\n","Requirement already satisfied: google-auth-oauthlib in /usr/local/lib/python3.6/dist-packages (from gcsfs) (0.4.2)\n","Requirement already satisfied: decorator in /usr/local/lib/python3.6/dist-packages (from gcsfs) (4.4.2)\n","Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from gcsfs) (2.23.0)\n","Requirement already satisfied: fsspec>=0.8.0 in /usr/local/lib/python3.6/dist-packages (from gcsfs) (0.8.5)\n","Requirement already satisfied: google-auth>=1.2 in /usr/local/lib/python3.6/dist-packages (from gcsfs) (1.17.2)\n","Requirement already satisfied: aiohttp in /usr/local/lib/python3.6/dist-packages (from gcsfs) (3.7.3)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.6/dist-packages (from google-auth-oauthlib->gcsfs) (1.3.0)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests->gcsfs) (1.24.3)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->gcsfs) (3.0.4)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->gcsfs) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests->gcsfs) (2020.12.5)\n","Requirement already satisfied: rsa<5,>=3.1.4; python_version >= \"3\" in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.2->gcsfs) (4.7)\n","Requirement already satisfied: setuptools>=40.3.0 in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.2->gcsfs) (51.3.3)\n","Requirement already satisfied: cachetools<5.0,>=2.0.0 in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.2->gcsfs) (4.2.1)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.2->gcsfs) (0.2.8)\n","Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.2->gcsfs) (1.15.0)\n","Requirement already satisfied: async-timeout<4.0,>=3.0 in /usr/local/lib/python3.6/dist-packages (from aiohttp->gcsfs) (3.0.1)\n","Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.6/dist-packages (from aiohttp->gcsfs) (1.6.3)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.6/dist-packages (from aiohttp->gcsfs) (5.1.0)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.6/dist-packages (from aiohttp->gcsfs) (20.3.0)\n","Requirement already satisfied: idna-ssl>=1.0; python_version < \"3.7\" in /usr/local/lib/python3.6/dist-packages (from aiohttp->gcsfs) (1.1.0)\n","Requirement already satisfied: typing-extensions>=3.6.5 in /usr/local/lib/python3.6/dist-packages (from aiohttp->gcsfs) (3.7.4.3)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.6/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib->gcsfs) (3.1.0)\n","Requirement already satisfied: pyasn1>=0.1.3 in /usr/local/lib/python3.6/dist-packages (from rsa<5,>=3.1.4; python_version >= \"3\"->google-auth>=1.2->gcsfs) (0.4.8)\n","Processing /root/.cache/pip/wheels/3a/d1/7e/6ce09b72b770149802c653a02783821629146983ee5a360f10/kaggle-1.5.10-cp36-none-any.whl\n","Installing collected packages: kaggle\n","  Found existing installation: kaggle 1.5.10\n","    Uninstalling kaggle-1.5.10:\n","      Successfully uninstalled kaggle-1.5.10\n","Successfully installed kaggle-1.5.10\n","Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","/content/drive/MyDrive/Colab Notebooks/Cassava\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:11.294556Z","iopub.status.busy":"2021-01-20T22:57:11.290187Z","iopub.status.idle":"2021-01-20T22:57:11.298693Z","shell.execute_reply":"2021-01-20T22:57:11.298011Z"},"id":"5V15UaoACh-M","papermill":{"duration":0.051661,"end_time":"2021-01-20T22:57:11.298873","exception":false,"start_time":"2021-01-20T22:57:11.247212","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1611934684355,"user_tz":-540,"elapsed":8015,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["if COLAB:# Prepare the kaggle.json file for use \n","    from google.colab import files\n","    if not os.path.exists('/content/drive/MyDrive/Colab Notebooks/.kaggle/kaggle.json'):\n","        !mkdir ~/content/drive/MyDrive/Colab Notebooks/.kaggle/\n","        if not os.path.exists('/content/drive/MyDrive/Colab Notebooks/.kaggle/kaggle.json'):\n","            files.upload()\n","            !cp kaggle.json ~/content/drive/MyDrive/Colab Notebooks/.kaggle/\n","        else:\n","            !cp '/content/drive/MyDrive/Colab Notebooks/' ~/.kaggle/  \n","        !chmod 600 ~/content/drive/MyDrive/Colab Notebooks/.kaggle/kaggle.json\n"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:11.368941Z","iopub.status.busy":"2021-01-20T22:57:11.367797Z","iopub.status.idle":"2021-01-20T22:57:11.371432Z","shell.execute_reply":"2021-01-20T22:57:11.370752Z"},"id":"urYjsB4IV-t5","papermill":{"duration":0.04238,"end_time":"2021-01-20T22:57:11.371550","exception":false,"start_time":"2021-01-20T22:57:11.329170","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1611934709503,"user_tz":-540,"elapsed":33157,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["if COLAB:# force TF to 2.2\n","    !pip install -q tensorflow~=2.2.0 tensorflow_gcs_config~=2.2.0\n","    \n","    import requests\n","    import os\n","    import tensorflow as tf\n","    resp = requests.post(\"http://{}:8475/requestversion/{}\".format(os.environ[\"COLAB_TPU_ADDR\"].split(\":\")[0], tf.__version__))\n","    if resp.status_code != 200:\n","      print(\"Failed to switch the TPU to TF {}\".format(version))"],"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DJLH967uCaOv","papermill":{"duration":0.029839,"end_time":"2021-01-20T22:57:11.431128","exception":false,"start_time":"2021-01-20T22:57:11.401289","status":"completed"},"tags":[]},"source":["## Dependencies"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:21.982695Z","iopub.status.busy":"2021-01-20T22:57:21.981961Z","iopub.status.idle":"2021-01-20T22:57:29.891530Z","shell.execute_reply":"2021-01-20T22:57:29.890624Z"},"id":"-iMoIRz7CaOw","papermill":{"duration":7.952124,"end_time":"2021-01-20T22:57:29.891659","exception":false,"start_time":"2021-01-20T22:57:21.939535","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1611934710315,"user_tz":-540,"elapsed":33963,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["import math, os, re, warnings, random, time\n","import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","from matplotlib import pyplot as plt\n","\n","from sklearn.model_selection import KFold\n","from sklearn.metrics import classification_report, confusion_matrix\n","import tensorflow as tf\n","import tensorflow.keras.layers as L\n","import tensorflow.keras.backend as K\n","from tensorflow.keras import optimizers, Sequential, losses, metrics, Model\n","from tensorflow.keras.callbacks import EarlyStopping\n","\n","def seed_everything(seed=0):\n","    random.seed(seed)\n","    np.random.seed(seed)\n","    tf.random.set_seed(seed)\n","    os.environ['PYTHONHASHSEED'] = str(seed)\n","    os.environ['TF_DETERMINISTIC_OPS'] = '1'\n","\n","seed = 0\n","seed_everything(seed)\n","warnings.filterwarnings('ignore')"],"execution_count":5,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Z-146lSGCaOx","papermill":{"duration":0.030316,"end_time":"2021-01-20T22:57:29.954488","exception":false,"start_time":"2021-01-20T22:57:29.924172","status":"completed"},"tags":[]},"source":["### Hardware configuration\n","\n","Note that we have `32` cores, this is because the `TPU v2 Pod` have more cores than a single `TPU v3` which has `8` cores."]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:30.071569Z","iopub.status.busy":"2021-01-20T22:57:30.035804Z","iopub.status.idle":"2021-01-20T22:57:34.008561Z","shell.execute_reply":"2021-01-20T22:57:34.010162Z"},"id":"cCFwEwkVCaOy","papermill":{"duration":4.024986,"end_time":"2021-01-20T22:57:34.010410","exception":false,"start_time":"2021-01-20T22:57:29.985424","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611934737061,"user_tz":-540,"elapsed":60703,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"9c242b25-27a3-4974-c423-c1d989b8fb48"},"source":["# TPU or GPU detection\n","# Detect hardware, return appropriate distribution strategy\n","try:\n","    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n","    print(f'Running on TPU {tpu.master()}')\n","except ValueError:\n","    tpu = None\n","    print ('tpu',tpu)\n","\n","if tpu:\n","    tf.config.experimental_connect_to_cluster(tpu)\n","    tf.tpu.experimental.initialize_tpu_system(tpu)\n","    strategy = tf.distribute.experimental.TPUStrategy(tpu)\n","else:\n","    strategy = tf.distribute.get_strategy()\n","\n","AUTO = tf.data.experimental.AUTOTUNE\n","REPLICAS = strategy.num_replicas_in_sync\n","print(f'REPLICAS: {REPLICAS}')"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Running on TPU grpc://10.103.163.186:8470\n","INFO:tensorflow:Initializing the TPU system: grpc://10.103.163.186:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.103.163.186:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Found TPU system:\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Found TPU system:\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Cores: 8\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Cores: 8\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Workers: 1\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Workers: 1\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Cores Per Worker: 8\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Cores Per Worker: 8\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:CPU:0, CPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:CPU:0, CPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:XLA_CPU:0, XLA_CPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:XLA_CPU:0, XLA_CPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:CPU:0, CPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:CPU:0, CPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:0, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:0, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:1, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:1, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:2, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:2, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:3, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:3, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:4, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:4, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:5, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:5, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:6, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:6, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:7, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:7, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU_SYSTEM:0, TPU_SYSTEM, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU_SYSTEM:0, TPU_SYSTEM, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:XLA_CPU:0, XLA_CPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:XLA_CPU:0, XLA_CPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["REPLICAS: 8\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"NK8TAx9JCaOz","papermill":{"duration":0.035404,"end_time":"2021-01-20T22:57:34.088585","exception":false,"start_time":"2021-01-20T22:57:34.053181","status":"completed"},"tags":[]},"source":["# Model parameters"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:34.155750Z","iopub.status.busy":"2021-01-20T22:57:34.154661Z","iopub.status.idle":"2021-01-20T22:57:34.160980Z","shell.execute_reply":"2021-01-20T22:57:34.160280Z"},"papermill":{"duration":0.040682,"end_time":"2021-01-20T22:57:34.161109","exception":false,"start_time":"2021-01-20T22:57:34.120427","status":"completed"},"tags":[],"id":"hyxJUKF-xGQ2","executionInfo":{"status":"ok","timestamp":1611934737065,"user_tz":-540,"elapsed":60699,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["BATCH_SIZE = 8 * REPLICAS\n","LEARNING_RATE = 1e-5 * REPLICAS"],"execution_count":7,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UmwrOwlYCaOz","papermill":{"duration":0.031304,"end_time":"2021-01-20T22:57:34.223728","exception":false,"start_time":"2021-01-20T22:57:34.192424","status":"completed"},"tags":[]},"source":["# Load data"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:34.290296Z","iopub.status.busy":"2021-01-20T22:57:34.289242Z","iopub.status.idle":"2021-01-20T22:57:35.971447Z","shell.execute_reply":"2021-01-20T22:57:35.971977Z"},"id":"UxM4MGNGCaO0","papermill":{"duration":1.717316,"end_time":"2021-01-20T22:57:35.972129","exception":false,"start_time":"2021-01-20T22:57:34.254813","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":238},"executionInfo":{"status":"ok","timestamp":1611934738484,"user_tz":-540,"elapsed":62111,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"dfc7b092-30df-4cdd-b618-f5c985079679"},"source":["def count_data_items(filenames):\n","    n = [int(re.compile(r'-([0-9]*)\\.').search(filename).group(1)) for filename in filenames]\n","    return np.sum(n)\n","\n","\n","train = pd.read_csv(f'{database_base_path}train.csv')\n","print(f'Train samples: {len(train)}')\n","\n","FILENAMES_COMP = tf.io.gfile.glob(GCS_PATH + '/*.tfrec')\n","FILENAMES_2019 = tf.io.gfile.glob(GCS_PATH_EXT + '/*.tfrec')\n","\n","FILENAMES_COMP_CBB = tf.io.gfile.glob(GCS_PATH_CLASSES + '/CBB*.tfrec')\n","FILENAMES_COMP_CBSD = tf.io.gfile.glob(GCS_PATH_CLASSES + '/CBSD*.tfrec')\n","FILENAMES_COMP_CGM = tf.io.gfile.glob(GCS_PATH_CLASSES + '/CGM*.tfrec')\n","FILENAMES_COMP_CMD = tf.io.gfile.glob(GCS_PATH_CLASSES + '/CMD*.tfrec')\n","FILENAMES_COMP_Healthy = tf.io.gfile.glob(GCS_PATH_CLASSES + '/Healthy*.tfrec')\n","\n","FILENAMES_2019_CBB = tf.io.gfile.glob(GCS_PATH_EXT_CLASSES + '/CBB*.tfrec')\n","FILENAMES_2019_CBSD = tf.io.gfile.glob(GCS_PATH_EXT_CLASSES + '/CBSD*.tfrec')\n","FILENAMES_2019_CGM = tf.io.gfile.glob(GCS_PATH_EXT_CLASSES + '/CGM*.tfrec')\n","FILENAMES_2019_CMD = tf.io.gfile.glob(GCS_PATH_EXT_CLASSES + '/CMD*.tfrec')\n","FILENAMES_2019_Healthy = tf.io.gfile.glob(GCS_PATH_EXT_CLASSES + '/Healthy*.tfrec')\n","\n","\n","TRAINING_FILENAMES = (FILENAMES_COMP + \n","                      FILENAMES_2019 + \n","                      (2 * FILENAMES_COMP_CBB) + \n","                      (2 * FILENAMES_2019_CBB) + \n","                      (2 * FILENAMES_COMP_CBSD) + \n","                      (2 * FILENAMES_2019_CBSD) + \n","                      (2 * FILENAMES_COMP_CGM) + \n","                      (2 * FILENAMES_2019_CGM) + \n","                      (2 * FILENAMES_COMP_Healthy) + \n","                      (2 * FILENAMES_2019_Healthy))\n","\n","NUM_TRAINING_IMAGES = count_data_items(TRAINING_FILENAMES)\n","\n","print(f'GCS: train images: {NUM_TRAINING_IMAGES}')\n","display(train.head())\n","\n","CLASSES = ['Cassava Bacterial Blight', \n","           'Cassava Brown Streak Disease', \n","           'Cassava Green Mottle', \n","           'Cassava Mosaic Disease', \n","           'Healthy']"],"execution_count":8,"outputs":[{"output_type":"stream","text":["Train samples: 21397\n","GCS: train images: 48081\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>image_id</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1000015157.jpg</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1000201771.jpg</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>100042118.jpg</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1000723321.jpg</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1000812911.jpg</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         image_id  label\n","0  1000015157.jpg      0\n","1  1000201771.jpg      3\n","2   100042118.jpg      1\n","3  1000723321.jpg      1\n","4  1000812911.jpg      3"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"BZIhYsg_CaO1","papermill":{"duration":0.032803,"end_time":"2021-01-20T22:57:36.037731","exception":false,"start_time":"2021-01-20T22:57:36.004928","status":"completed"},"tags":[]},"source":["# Augmentation"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:36.106682Z","iopub.status.busy":"2021-01-20T22:57:36.105973Z","iopub.status.idle":"2021-01-20T22:57:36.133193Z","shell.execute_reply":"2021-01-20T22:57:36.133788Z"},"id":"Wwh329L6CaO1","papermill":{"duration":0.063522,"end_time":"2021-01-20T22:57:36.133965","exception":false,"start_time":"2021-01-20T22:57:36.070443","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1611934738484,"user_tz":-540,"elapsed":62105,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["def data_augment(image, label):\n","    p_rotation = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_spatial = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_rotate = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_pixel_1 = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_pixel_2 = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_pixel_3 = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_shear = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_crop = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_cutout = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    \n","    # Shear\n","    if p_shear > .2:\n","        if p_shear > .6:\n","            image = transform_shear(image, HEIGHT, shear=20.)\n","        else:\n","            image = transform_shear(image, HEIGHT, shear=-20.)\n","            \n","    # Rotation\n","    if p_rotation > .2:\n","        if p_rotation > .6:\n","            image = transform_rotation(image, HEIGHT, rotation=45.)\n","        else:\n","            image = transform_rotation(image, HEIGHT, rotation=-45.)\n","            \n","    # Flips\n","    image = tf.image.random_flip_left_right(image)\n","    image = tf.image.random_flip_up_down(image)\n","    if p_spatial > .75:\n","        image = tf.image.transpose(image)\n","        \n","    # Rotates\n","    if p_rotate > .75:\n","        image = tf.image.rot90(image, k=3) # rotate 270º\n","    elif p_rotate > .5:\n","        image = tf.image.rot90(image, k=2) # rotate 180º\n","    elif p_rotate > .25:\n","        image = tf.image.rot90(image, k=1) # rotate 90º\n","        \n","    # Pixel-level transforms\n","    if p_pixel_1 >= .4:\n","        image = tf.image.random_saturation(image, lower=.7, upper=1.3)\n","    if p_pixel_2 >= .4:\n","        image = tf.image.random_contrast(image, lower=.8, upper=1.2)\n","    if p_pixel_3 >= .4:\n","        image = tf.image.random_brightness(image, max_delta=.1)\n","        \n","    # Crops\n","    if p_crop > .6:\n","        if p_crop > .9:\n","            image = tf.image.central_crop(image, central_fraction=.5)\n","        elif p_crop > .8:\n","            image = tf.image.central_crop(image, central_fraction=.6)\n","        elif p_crop > .7:\n","            image = tf.image.central_crop(image, central_fraction=.7)\n","        else:\n","            image = tf.image.central_crop(image, central_fraction=.8)\n","    elif p_crop > .3:\n","        crop_size = tf.random.uniform([], int(HEIGHT*.6), HEIGHT, dtype=tf.int32)\n","        image = tf.image.random_crop(image, size=[crop_size, crop_size, CHANNELS])\n","            \n","    image = tf.image.resize(image, size=[HEIGHT, WIDTH])\n","\n","    if p_cutout > .5:\n","        image = data_augment_cutout(image)\n","        \n","    return image, label"],"execution_count":9,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"r4Hg1nKgCaO1","papermill":{"duration":0.033215,"end_time":"2021-01-20T22:57:36.199741","exception":false,"start_time":"2021-01-20T22:57:36.166526","status":"completed"},"tags":[]},"source":["## Auxiliary functions"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:36.295009Z","iopub.status.busy":"2021-01-20T22:57:36.289488Z","iopub.status.idle":"2021-01-20T22:57:36.318353Z","shell.execute_reply":"2021-01-20T22:57:36.317633Z"},"id":"-DueNRgfCaO1","papermill":{"duration":0.08607,"end_time":"2021-01-20T22:57:36.318490","exception":false,"start_time":"2021-01-20T22:57:36.232420","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1611934738736,"user_tz":-540,"elapsed":62353,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["# data augmentation @cdeotte kernel: https://www.kaggle.com/cdeotte/rotation-augmentation-gpu-tpu-0-96\n","def transform_rotation(image, height, rotation):\n","    # input image - is one image of size [dim,dim,3] not a batch of [b,dim,dim,3]\n","    # output - image randomly rotated\n","    DIM = height\n","    XDIM = DIM%2 #fix for size 331\n","    \n","    rotation = rotation * tf.random.uniform([1],dtype='float32')\n","    # CONVERT DEGREES TO RADIANS\n","    rotation = math.pi * rotation / 180.\n","    \n","    # ROTATION MATRIX\n","    c1 = tf.math.cos(rotation)\n","    s1 = tf.math.sin(rotation)\n","    one = tf.constant([1],dtype='float32')\n","    zero = tf.constant([0],dtype='float32')\n","    rotation_matrix = tf.reshape(tf.concat([c1,s1,zero, -s1,c1,zero, zero,zero,one],axis=0),[3,3])\n","\n","    # LIST DESTINATION PIXEL INDICES\n","    x = tf.repeat( tf.range(DIM//2,-DIM//2,-1), DIM )\n","    y = tf.tile( tf.range(-DIM//2,DIM//2),[DIM] )\n","    z = tf.ones([DIM*DIM],dtype='int32')\n","    idx = tf.stack( [x,y,z] )\n","    \n","    # ROTATE DESTINATION PIXELS ONTO ORIGIN PIXELS\n","    idx2 = K.dot(rotation_matrix,tf.cast(idx,dtype='float32'))\n","    idx2 = K.cast(idx2,dtype='int32')\n","    idx2 = K.clip(idx2,-DIM//2+XDIM+1,DIM//2)\n","    \n","    # FIND ORIGIN PIXEL VALUES \n","    idx3 = tf.stack( [DIM//2-idx2[0,], DIM//2-1+idx2[1,]] )\n","    d = tf.gather_nd(image, tf.transpose(idx3))\n","        \n","    return tf.reshape(d,[DIM,DIM,3])\n","\n","def transform_shear(image, height, shear):\n","    # input image - is one image of size [dim,dim,3] not a batch of [b,dim,dim,3]\n","    # output - image randomly sheared\n","    DIM = height\n","    XDIM = DIM%2 #fix for size 331\n","    \n","    shear = shear * tf.random.uniform([1],dtype='float32')\n","    shear = math.pi * shear / 180.\n","        \n","    # SHEAR MATRIX\n","    one = tf.constant([1],dtype='float32')\n","    zero = tf.constant([0],dtype='float32')\n","    c2 = tf.math.cos(shear)\n","    s2 = tf.math.sin(shear)\n","    shear_matrix = tf.reshape(tf.concat([one,s2,zero, zero,c2,zero, zero,zero,one],axis=0),[3,3])    \n","\n","    # LIST DESTINATION PIXEL INDICES\n","    x = tf.repeat( tf.range(DIM//2,-DIM//2,-1), DIM )\n","    y = tf.tile( tf.range(-DIM//2,DIM//2),[DIM] )\n","    z = tf.ones([DIM*DIM],dtype='int32')\n","    idx = tf.stack( [x,y,z] )\n","    \n","    # ROTATE DESTINATION PIXELS ONTO ORIGIN PIXELS\n","    idx2 = K.dot(shear_matrix,tf.cast(idx,dtype='float32'))\n","    idx2 = K.cast(idx2,dtype='int32')\n","    idx2 = K.clip(idx2,-DIM//2+XDIM+1,DIM//2)\n","    \n","    # FIND ORIGIN PIXEL VALUES \n","    idx3 = tf.stack( [DIM//2-idx2[0,], DIM//2-1+idx2[1,]] )\n","    d = tf.gather_nd(image, tf.transpose(idx3))\n","        \n","    return tf.reshape(d,[DIM,DIM,3])\n","\n","# CutOut\n","def data_augment_cutout(image, min_mask_size=(int(HEIGHT * .1), int(HEIGHT * .1)), \n","                        max_mask_size=(int(HEIGHT * .125), int(HEIGHT * .125))):\n","    p_cutout = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    \n","    if p_cutout > .85: # 10~15 cut outs\n","        n_cutout = tf.random.uniform([], 10, 15, dtype=tf.int32)\n","        image = random_cutout(image, HEIGHT, WIDTH, \n","                              min_mask_size=min_mask_size, max_mask_size=max_mask_size, k=n_cutout)\n","    elif p_cutout > .6: # 5~10 cut outs\n","        n_cutout = tf.random.uniform([], 5, 10, dtype=tf.int32)\n","        image = random_cutout(image, HEIGHT, WIDTH, \n","                              min_mask_size=min_mask_size, max_mask_size=max_mask_size, k=n_cutout)\n","    elif p_cutout > .25: # 2~5 cut outs\n","        n_cutout = tf.random.uniform([], 2, 5, dtype=tf.int32)\n","        image = random_cutout(image, HEIGHT, WIDTH, \n","                              min_mask_size=min_mask_size, max_mask_size=max_mask_size, k=n_cutout)\n","    else: # 1 cut out\n","        image = random_cutout(image, HEIGHT, WIDTH, \n","                              min_mask_size=min_mask_size, max_mask_size=max_mask_size, k=1)\n","\n","    return image\n","\n","def random_cutout(image, height, width, channels=3, min_mask_size=(10, 10), max_mask_size=(80, 80), k=1):\n","    assert height > min_mask_size[0]\n","    assert width > min_mask_size[1]\n","    assert height > max_mask_size[0]\n","    assert width > max_mask_size[1]\n","\n","    for i in range(k):\n","      mask_height = tf.random.uniform(shape=[], minval=min_mask_size[0], maxval=max_mask_size[0], dtype=tf.int32)\n","      mask_width = tf.random.uniform(shape=[], minval=min_mask_size[1], maxval=max_mask_size[1], dtype=tf.int32)\n","\n","      pad_h = height - mask_height\n","      pad_top = tf.random.uniform(shape=[], minval=0, maxval=pad_h, dtype=tf.int32)\n","      pad_bottom = pad_h - pad_top\n","\n","      pad_w = width - mask_width\n","      pad_left = tf.random.uniform(shape=[], minval=0, maxval=pad_w, dtype=tf.int32)\n","      pad_right = pad_w - pad_left\n","\n","      cutout_area = tf.zeros(shape=[mask_height, mask_width, channels], dtype=tf.uint8)\n","\n","      cutout_mask = tf.pad([cutout_area], [[0,0],[pad_top, pad_bottom], [pad_left, pad_right], [0,0]], constant_values=1)\n","      cutout_mask = tf.squeeze(cutout_mask, axis=0)\n","      image = tf.multiply(tf.cast(image, tf.float32), tf.cast(cutout_mask, tf.float32))\n","\n","    return image"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"id":"Kurk_4tMTDsf","executionInfo":{"status":"ok","timestamp":1611934738737,"user_tz":-540,"elapsed":62350,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["# Datasets utility functions\r\n","def decode_image(image_data):\r\n","    \"\"\"\r\n","        Decode a JPEG-encoded image to a uint8 tensor.\r\n","    \"\"\"\r\n","    image = tf.image.decode_jpeg(image_data, channels=3)\r\n","    return image\r\n","\r\n","def scale_image(image, label):\r\n","    \"\"\"\r\n","        Cast tensor to float and normalizes (range between 0 and 1).\r\n","    \"\"\"\r\n","    image = tf.cast(image, tf.float32)\r\n","    image /= 255.0\r\n","    return image, label\r\n","\r\n","def prepare_image(image, label):\r\n","    \"\"\"\r\n","        Resize and reshape images to the expected size.\r\n","    \"\"\"\r\n","    image = tf.image.resize(image, [HEIGHT_RS, WIDTH_RS])\r\n","    image = tf.reshape(image, [HEIGHT_RS, WIDTH_RS, 3])\r\n","    return image, label\r\n","\r\n","def read_tfrecord(example, labeled=True):\r\n","    \"\"\"\r\n","        1. Parse data based on the 'TFREC_FORMAT' map.\r\n","        2. Decode image.\r\n","        3. If 'labeled' returns (image, label) if not (image, name).\r\n","    \"\"\"\r\n","    if labeled:\r\n","        TFREC_FORMAT = {\r\n","            'image': tf.io.FixedLenFeature([], tf.string), \r\n","            'target': tf.io.FixedLenFeature([], tf.int64), \r\n","        }\r\n","    else:\r\n","        TFREC_FORMAT = {\r\n","            'image': tf.io.FixedLenFeature([], tf.string), \r\n","            'image_name': tf.io.FixedLenFeature([], tf.string), \r\n","        }\r\n","    example = tf.io.parse_single_example(example, TFREC_FORMAT)\r\n","    image = decode_image(example['image'])\r\n","    if labeled:\r\n","        label_or_name = tf.cast(example['target'], tf.int32)\r\n","        # One-Hot Encoding needed to use \"categorical_crossentropy\" loss\r\n","        label_or_name = tf.one_hot(tf.cast(label_or_name, tf.int32), N_CLASSES)\r\n","    else:\r\n","        label_or_name = example['image_name']\r\n","    return image, label_or_name\r\n","\r\n","def get_dataset(FILENAMES, labeled=True, ordered=False, repeated=False, \r\n","                cached=False, augment=False):\r\n","    \"\"\"\r\n","        Return a Tensorflow dataset ready for training or inference.\r\n","    \"\"\"\r\n","    ignore_order = tf.data.Options()\r\n","    if not ordered:\r\n","        ignore_order.experimental_deterministic = False\r\n","        dataset = tf.data.Dataset.list_files(FILENAMES)\r\n","        dataset = dataset.interleave(tf.data.TFRecordDataset, num_parallel_calls=AUTO)\r\n","    else:\r\n","        dataset = tf.data.TFRecordDataset(FILENAMES, num_parallel_reads=AUTO)\r\n","        \r\n","    dataset = dataset.with_options(ignore_order)\r\n","    \r\n","    dataset = dataset.map(lambda x: read_tfrecord(x, labeled=labeled), num_parallel_calls=AUTO)\r\n","    \r\n","    if augment:\r\n","        dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\r\n","        \r\n","    dataset = dataset.map(scale_image, num_parallel_calls=AUTO)\r\n","    dataset = dataset.map(prepare_image, num_parallel_calls=AUTO)\r\n","    \r\n","    if not ordered:\r\n","        dataset = dataset.shuffle(2048)\r\n","    if repeated:\r\n","        dataset = dataset.repeat()\r\n","        \r\n","    dataset = dataset.batch(BATCH_SIZE)\r\n","    \r\n","    if cached:\r\n","        dataset = dataset.cache()\r\n","    dataset = dataset.prefetch(AUTO)\r\n","    return dataset\r\n","\r\n","def unfreeze_model(model):\r\n","    # Unfreeze layers while leaving BatchNorm layers frozen\r\n","    for layer in model.layers:\r\n","        if not isinstance(layer, L.BatchNormalization):\r\n","            layer.trainable = True\r\n","        else:\r\n","            layer.trainable = False\r\n","                \r\n","def unfreeze_block(model, block_name=None, n_top=3):\r\n","    # Unfreeze layers while leaving BatchNorm layers frozen\r\n","    for layer in model.layers[:-n_top]:\r\n","        if isinstance(layer, L.BatchNormalization):\r\n","            layer.trainable = False\r\n","        else:\r\n","            if block_name and (block_name in layer.name):\r\n","                layer.trainable = True"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:36.487403Z","iopub.status.busy":"2021-01-20T22:57:36.486600Z","iopub.status.idle":"2021-01-20T22:57:36.530480Z","shell.execute_reply":"2021-01-20T22:57:36.531039Z"},"id":"gHAxNOInCaO2","papermill":{"duration":0.081913,"end_time":"2021-01-20T22:57:36.531213","exception":false,"start_time":"2021-01-20T22:57:36.449300","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1611934738975,"user_tz":-540,"elapsed":62584,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["# Visualization utility functions\n","np.set_printoptions(threshold=15, linewidth=80)\n","\n","def batch_to_numpy_images_and_labels(data):\n","    images, labels = data\n","    numpy_images = images.numpy()\n","    numpy_labels = labels.numpy()\n","    if numpy_labels.dtype == object: # binary string in this case, these are image ID strings\n","        numpy_labels = [None for _ in enumerate(numpy_images)]\n","    # If no labels, only image IDs, return None for labels (this is the case for test data)\n","    return numpy_images, numpy_labels\n","\n","def title_from_label_and_target(label, correct_label):\n","    if correct_label is None:\n","        return CLASSES[label], True\n","    correct = (label == correct_label)\n","    return \"{} [{}{}{}]\".format(CLASSES[label], 'OK' if correct else 'NO', u\"\\u2192\" if not correct else '',\n","                                CLASSES[correct_label] if not correct else ''), correct\n","\n","def display_one_flower(image, title, subplot, red=False, titlesize=16):\n","    plt.subplot(*subplot)\n","    plt.axis('off')\n","    plt.imshow(image)\n","    if len(title) > 0:\n","        plt.title(title, fontsize=int(titlesize) if not red else int(titlesize/1.2), color='red' if red else 'black', \n","                  fontdict={'verticalalignment':'center'}, pad=int(titlesize/1.5))\n","    return (subplot[0], subplot[1], subplot[2]+1)\n","\n","def display_batch_of_images(databatch, predictions=None):\n","    \"\"\"This will work with:\n","    display_batch_of_images(images)\n","    display_batch_of_images(images, predictions)\n","    display_batch_of_images((images, labels))\n","    display_batch_of_images((images, labels), predictions)\n","    \"\"\"\n","    # data\n","    images, labels = batch_to_numpy_images_and_labels(databatch)\n","    labels = np.argmax(labels, axis=-1)\n","    if labels is None:\n","        labels = [None for _ in enumerate(images)]\n","        \n","    # auto-squaring: this will drop data that does not fit into square or square-ish rectangle\n","    rows = int(math.sqrt(len(images)))\n","    cols = len(images)//rows\n","        \n","    # size and spacing\n","    FIGSIZE = 13.0\n","    SPACING = 0.1\n","    subplot=(rows,cols,1)\n","    if rows < cols:\n","        plt.figure(figsize=(FIGSIZE,FIGSIZE/cols*rows))\n","    else:\n","        plt.figure(figsize=(FIGSIZE/rows*cols,FIGSIZE))\n","    \n","    # display\n","    for i, (image, label) in enumerate(zip(images[:rows*cols], labels[:rows*cols])):\n","        title = '' if label is None else CLASSES[label]\n","        correct = True\n","        if predictions is not None:\n","            title, correct = title_from_label_and_target(predictions[i], label)\n","        dynamic_titlesize = FIGSIZE*SPACING/max(rows,cols)*40+3 # magic formula tested to work from 1x1 to 10x10 images\n","        subplot = display_one_flower(image, title, subplot, not correct, titlesize=dynamic_titlesize)\n","    \n","    #layout\n","    plt.tight_layout()\n","    if label is None and predictions is None:\n","        plt.subplots_adjust(wspace=0, hspace=0)\n","    else:\n","        plt.subplots_adjust(wspace=SPACING, hspace=SPACING)\n","    plt.show()\n","    \n","# Visualize model predictions\n","def dataset_to_numpy_util(dataset, N):\n","    dataset = dataset.unbatch().batch(N)\n","    for images, labels in dataset:\n","        numpy_images = images.numpy()\n","        numpy_labels = labels.numpy()\n","        break;  \n","    return numpy_images, numpy_labels\n","\n","def title_from_label_and_target(label, correct_label):\n","    label = np.argmax(label, axis=-1)\n","    correct = (label == correct_label)\n","    return \"{} [{}{}{}]\".format(label, str(correct), ', shoud be ' if not correct else '',\n","                                correct_label if not correct else ''), correct\n","\n","def display_one_flower_eval(image, title, subplot, red=False):\n","    plt.subplot(subplot)\n","    plt.axis('off')\n","    plt.imshow(image)\n","    plt.title(title, fontsize=14, color='red' if red else 'black')\n","    return subplot+1\n","\n","def display_9_images_with_predictions(images, predictions, labels):\n","    subplot=331\n","    plt.figure(figsize=(13,13))\n","    for i, image in enumerate(images):\n","        title, correct = title_from_label_and_target(predictions[i], labels[i])\n","        subplot = display_one_flower_eval(image, title, subplot, not correct)\n","        if i >= 8:\n","            break;\n","              \n","    plt.tight_layout()\n","    plt.subplots_adjust(wspace=0.1, hspace=0.1)\n","    plt.show()\n","\n","\n","# Model evaluation\n","def plot_metrics(history):\n","    fig, axes = plt.subplots(2, 1, sharex='col', figsize=(20, 8))\n","    axes = axes.flatten()\n","    \n","    axes[0].plot(history['loss'], label='Train loss')\n","    axes[0].plot(history['val_loss'], label='Validation loss')\n","    axes[0].legend(loc='best', fontsize=16)\n","    axes[0].set_title('Loss')\n","    axes[0].axvline(np.argmin(history['loss']), linestyle='dashed')\n","    axes[0].axvline(np.argmin(history['val_loss']), linestyle='dashed', color='orange')\n","    \n","    axes[1].plot(history['accuracy'], label='Train accuracy')\n","    axes[1].plot(history['val_accuracy'], label='Validation accuracy')\n","    axes[1].legend(loc='best', fontsize=16)\n","    axes[1].set_title('Accuracy')\n","    axes[1].axvline(np.argmax(history['accuracy']), linestyle='dashed')\n","    axes[1].axvline(np.argmax(history['val_accuracy']), linestyle='dashed', color='orange')\n","\n","    plt.xlabel('Epochs', fontsize=16)\n","    sns.despine()\n","    plt.show()"],"execution_count":12,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oCtCB3WdCaO2","papermill":{"duration":0.033127,"end_time":"2021-01-20T22:57:36.597612","exception":false,"start_time":"2021-01-20T22:57:36.564485","status":"completed"},"tags":[]},"source":["# Training data samples (with augmentation)"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:36.667226Z","iopub.status.busy":"2021-01-20T22:57:36.666549Z","iopub.status.idle":"2021-01-20T22:57:52.204000Z","shell.execute_reply":"2021-01-20T22:57:52.204539Z"},"id":"p8IMzXLRCaO2","papermill":{"duration":15.574028,"end_time":"2021-01-20T22:57:52.204708","exception":false,"start_time":"2021-01-20T22:57:36.630680","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"13gxhyT51WSPJUjqpQ_HbR0YUDQUdLD5m"},"executionInfo":{"status":"ok","timestamp":1611934757356,"user_tz":-540,"elapsed":80959,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"15a7e0ed-9ce9-4dc1-baca-af40e2595ae0"},"source":["train_dataset = get_dataset(FILENAMES_COMP, ordered=True, augment=True)\n","train_iter = iter(train_dataset.unbatch().batch(20))\n","\n","display_batch_of_images(next(train_iter))\n","display_batch_of_images(next(train_iter))"],"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"gfrU-uCiCaO3","papermill":{"duration":0.115332,"end_time":"2021-01-20T22:57:52.436099","exception":false,"start_time":"2021-01-20T22:57:52.320767","status":"completed"},"tags":[]},"source":["## Datasets distribution\n","\n","### Competition data"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:52.660179Z","iopub.status.busy":"2021-01-20T22:57:52.659360Z","iopub.status.idle":"2021-01-20T22:59:14.164307Z","shell.execute_reply":"2021-01-20T22:59:14.165290Z"},"id":"WJywiXKHCaO4","papermill":{"duration":81.617644,"end_time":"2021-01-20T22:59:14.165495","exception":false,"start_time":"2021-01-20T22:57:52.547851","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":502},"executionInfo":{"status":"ok","timestamp":1611934845545,"user_tz":-540,"elapsed":169140,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"21e37692-01b8-4ec3-e7c7-8e25badca3eb"},"source":["ds_comp = get_dataset(FILENAMES_COMP)\n","labels_comp = [target.numpy() for img, target in iter(ds_comp.unbatch())]\n","labels_comp = np.argmax(labels_comp, axis=-1)\n","\n","fig, ax = plt.subplots(1, 1, figsize=(18, 8))\n","ax = sns.countplot(y=labels_comp, palette='viridis')\n","ax.tick_params(labelsize=16)\n","\n","plt.show()"],"execution_count":14,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 1296x576 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"H03votk7CaO4","papermill":{"duration":0.11035,"end_time":"2021-01-20T22:59:14.384953","exception":false,"start_time":"2021-01-20T22:59:14.274603","status":"completed"},"tags":[]},"source":["### 2019 competition data"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:59:14.619739Z","iopub.status.busy":"2021-01-20T22:59:14.618979Z","iopub.status.idle":"2021-01-20T22:59:36.253576Z","shell.execute_reply":"2021-01-20T22:59:36.252814Z"},"id":"SfD2fI73CaO4","papermill":{"duration":21.757163,"end_time":"2021-01-20T22:59:36.253707","exception":false,"start_time":"2021-01-20T22:59:14.496544","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":502},"executionInfo":{"status":"ok","timestamp":1611934869590,"user_tz":-540,"elapsed":193177,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"22d1b1b7-94c3-460e-8304-da7e3d81a98f"},"source":["ds_2019 = get_dataset(FILENAMES_2019)\n","labels_2019 = [target.numpy() for img, target in iter(ds_2019.unbatch())]\n","labels_2019 = np.argmax(labels_2019, axis=-1)\n","\n","fig, ax = plt.subplots(1, 1, figsize=(18, 8))\n","ax = sns.countplot(y=labels_2019, palette='viridis')\n","ax.tick_params(labelsize=16)\n","\n","plt.show()"],"execution_count":15,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1296x576 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"ZXY3rsY4CaO4","papermill":{"duration":0.112402,"end_time":"2021-01-20T22:59:36.476696","exception":false,"start_time":"2021-01-20T22:59:36.364294","status":"completed"},"tags":[]},"source":["### Dataset oversampled"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:59:36.715120Z","iopub.status.busy":"2021-01-20T22:59:36.714385Z","iopub.status.idle":"2021-01-20T23:02:43.355083Z","shell.execute_reply":"2021-01-20T23:02:43.355614Z"},"id":"PRXTNO7RCaO5","papermill":{"duration":186.766033,"end_time":"2021-01-20T23:02:43.355778","exception":false,"start_time":"2021-01-20T22:59:36.589745","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":502},"executionInfo":{"status":"ok","timestamp":1611935092370,"user_tz":-540,"elapsed":415950,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"5e7ce533-b388-4026-eb38-56ec28991adb"},"source":["FILENAMES_COMP_OVER = (FILENAMES_COMP + \n","                       FILENAMES_2019 + \n","                       (2 * FILENAMES_COMP_CBB) + \n","                       (2 * FILENAMES_2019_CBB) + \n","                       (2 * FILENAMES_COMP_CBSD) + \n","                       (2 * FILENAMES_2019_CBSD) + \n","                       (2 * FILENAMES_COMP_CGM) + \n","                       (2 * FILENAMES_2019_CGM) + \n","                       (2 * FILENAMES_COMP_Healthy) + \n","                       (2 * FILENAMES_2019_Healthy))\n","\n","ds_comp = get_dataset(FILENAMES_COMP_OVER)\n","labels_comp = [target.numpy() for img, target in iter(ds_comp.unbatch())]\n","labels_comp = np.argmax(labels_comp, axis=-1)\n","\n","fig, ax = plt.subplots(1, 1, figsize=(18, 8))\n","ax = sns.countplot(y=labels_comp, palette='viridis')\n","ax.tick_params(labelsize=16)\n","\n","plt.show()"],"execution_count":16,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1296x576 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"HvXRzhofCaO5","papermill":{"duration":0.112509,"end_time":"2021-01-20T23:02:43.580615","exception":false,"start_time":"2021-01-20T23:02:43.468106","status":"completed"},"tags":[]},"source":["### Learning rate schedule\n","\n","We are going to use a `cosine learning rate schedule with a warm-up phase`, this may be a good idea since we are using a pre-trained model, the warm-up phase will be useful to avoid the pre-trained weights degradation resulting in catastrophic forgetting, during the schedule the learning rate will slowly decrease to very low values, this helps the model to land on more stable weights."]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:02:43.808753Z","iopub.status.busy":"2021-01-20T23:02:43.807680Z","iopub.status.idle":"2021-01-20T23:02:47.940826Z","shell.execute_reply":"2021-01-20T23:02:47.939748Z"},"id":"I9cuJCl1CaO5","papermill":{"duration":4.248898,"end_time":"2021-01-20T23:02:47.940988","exception":false,"start_time":"2021-01-20T23:02:43.692090","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":422},"executionInfo":{"status":"ok","timestamp":1611935133934,"user_tz":-540,"elapsed":457506,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"d43584bb-03d4-4f91-e6de-6ff55cf43aa8"},"source":["lr_start = 1e-8\n","lr_min = 1e-8\n","lr_max = LEARNING_RATE\n","num_cycles = 1.\n","warmup_epochs = 1\n","hold_max_epochs = 0\n","total_epochs = EPOCHS\n","warmup_steps = warmup_epochs * (NUM_TRAINING_IMAGES//BATCH_SIZE)\n","total_steps = total_epochs * (NUM_TRAINING_IMAGES//BATCH_SIZE)\n","\n","@tf.function\n","def lrfn(step):\n","    if step < warmup_steps:\n","        lr = (lr_max - lr_start) / warmup_steps * step + lr_start\n","    else:\n","        progress = (step - warmup_steps) / (total_steps - warmup_steps)\n","        lr = lr_max * (0.5 * (1.0 + tf.math.cos(np.pi * ((num_cycles * progress) % 1.0))))\n","        if lr_min is not None:\n","            lr = tf.math.maximum(lr_min, float(lr))\n","\n","    return lr\n","\n","\n","# rng = [i for i in range(total_epochs)]\n","rng = [i for i in range(total_steps)]\n","y = [lrfn(tf.cast(x, tf.float32)) for x in rng]\n","\n","sns.set(style='whitegrid')\n","fig, ax = plt.subplots(figsize=(20, 6))\n","plt.plot(rng, y)\n","\n","print(f'{total_steps} total steps and {NUM_TRAINING_IMAGES//BATCH_SIZE} steps per epoch')\n","print(f'Learning rate schedule: {y[0]:.3g} to {max(y):.3g} to {y[-1]:.3g}')"],"execution_count":17,"outputs":[{"output_type":"stream","text":["7510 total steps and 751 steps per epoch\n","Learning rate schedule: 1e-08 to 8e-05 to 1e-08\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x432 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"OMIrA5jxCaO5","papermill":{"duration":0.112158,"end_time":"2021-01-20T23:02:48.166235","exception":false,"start_time":"2021-01-20T23:02:48.054077","status":"completed"},"tags":[]},"source":["# Model"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:02:48.402810Z","iopub.status.busy":"2021-01-20T23:02:48.402111Z","iopub.status.idle":"2021-01-20T23:02:48.406439Z","shell.execute_reply":"2021-01-20T23:02:48.405740Z"},"id":"pRksD6K6CaO5","papermill":{"duration":0.126526,"end_time":"2021-01-20T23:02:48.406566","exception":false,"start_time":"2021-01-20T23:02:48.280040","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1611935133935,"user_tz":-540,"elapsed":457500,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["from tensorflow.keras.applications import ResNet101\n","def model_fn(input_shape, N_CLASSES):\n","    inputs = L.Input(shape=input_shape, name='input_image')\n","    base_model = ResNet101(input_tensor=inputs, \n","                                    include_top=False, \n","                                    weights='imagenet', \n","                                    pooling='avg')\n","    base_model.trainable = False\n","    x = L.Dropout(.5)(base_model.output)\n","    output = L.Dense(N_CLASSES, activation='softmax', name='output')(x)\n","    model = Model(inputs=inputs, outputs=output)\n","\n","    return model"],"execution_count":18,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:02:48.640007Z","iopub.status.busy":"2021-01-20T23:02:48.638735Z","iopub.status.idle":"2021-01-20T23:02:48.642985Z","shell.execute_reply":"2021-01-20T23:02:48.643690Z"},"id":"4zl0qy-pcR-A","papermill":{"duration":0.122772,"end_time":"2021-01-20T23:02:48.643846","exception":false,"start_time":"2021-01-20T23:02:48.521074","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1611935134155,"user_tz":-540,"elapsed":457715,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["#help(strategy)"],"execution_count":19,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hMc0tk0VCaO5","papermill":{"duration":0.114465,"end_time":"2021-01-20T23:02:48.871581","exception":false,"start_time":"2021-01-20T23:02:48.757116","status":"completed"},"tags":[]},"source":["# Training"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HVWGcZ4DyuOp","executionInfo":{"status":"ok","timestamp":1611944175620,"user_tz":-540,"elapsed":9499178,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"111b8d54-a102-4dcf-eea9-20056aaca546"},"source":["skf = KFold(n_splits=N_FOLDS, shuffle=True, random_state=seed)\r\n","oof_pred = []; oof_labels = []; history_list = []\r\n","\r\n","for fold,(idxT, idxV) in enumerate(skf.split(np.arange(50))):\r\n","    if fold >= FOLDS_USED:\r\n","        break\r\n","    if tpu: tf.tpu.experimental.initialize_tpu_system(tpu)\r\n","    K.clear_session()\r\n","    print(f'\\nFOLD: {fold+1}')\r\n","    print(f'TRAIN: {idxT} VALID: {idxV}')\r\n","\r\n","    # Create train and validation sets\r\n","    FILENAMES_COMP = tf.io.gfile.glob([GCS_PATH + '/Id_train%.2i*.tfrec' % x for x in idxT])\r\n","    FILENAMES_2019 = tf.io.gfile.glob([GCS_PATH_EXT + '/Id_train%.2i*.tfrec' % x for x in idxT])\r\n","\r\n","    FILENAMES_COMP_CBB = tf.io.gfile.glob([GCS_PATH_CLASSES + '/CBB%.2i*.tfrec' % x for x in idxT])\r\n","    FILENAMES_COMP_CBSD = tf.io.gfile.glob([GCS_PATH_CLASSES + '/CBSD%.2i*.tfrec' % x for x in idxT])\r\n","    FILENAMES_COMP_CGM = tf.io.gfile.glob([GCS_PATH_CLASSES + '/CGM%.2i*.tfrec' % x for x in idxT])\r\n","    FILENAMES_COMP_Healthy = tf.io.gfile.glob([GCS_PATH_CLASSES + '/Healthy%.2i*.tfrec' % x for x in idxT])\r\n","    \r\n","    FILENAMES_2019_CBB = tf.io.gfile.glob([GCS_PATH_EXT_CLASSES + '/CBB%.2i*.tfrec' % x for x in idxT])\r\n","    FILENAMES_2019_CBSD = tf.io.gfile.glob([GCS_PATH_EXT_CLASSES + '/CBSD%.2i*.tfrec' % x for x in idxT])\r\n","    FILENAMES_2019_CGM = tf.io.gfile.glob([GCS_PATH_EXT_CLASSES + '/CGM%.2i*.tfrec' % x for x in idxT])\r\n","    FILENAMES_2019_Healthy = tf.io.gfile.glob([GCS_PATH_EXT_CLASSES + '/Healthy%.2i*.tfrec' % x for x in idxT])\r\n","\r\n","    TRAIN_FILENAMES = (FILENAMES_COMP + \r\n","                       FILENAMES_2019 + \r\n","                       (2 * FILENAMES_COMP_CBB) + \r\n","                       (2 * FILENAMES_2019_CBB) + \r\n","                       (2 * FILENAMES_COMP_CBSD) + \r\n","                       (2 * FILENAMES_2019_CBSD) + \r\n","                       (2 * FILENAMES_COMP_CGM) + \r\n","                       (2 * FILENAMES_2019_CGM) + \r\n","                       (2 * FILENAMES_COMP_Healthy) + \r\n","                       (2 * FILENAMES_2019_Healthy))\r\n","    \r\n","    VALID_FILENAMES = tf.io.gfile.glob([GCS_PATH + '/Id_train%.2i*.tfrec' % x for x in idxV])\r\n","    np.random.shuffle(TRAIN_FILENAMES)\r\n","    \r\n","    ct_train = count_data_items(TRAIN_FILENAMES)\r\n","    ct_valid = count_data_items(VALID_FILENAMES)\r\n","    \r\n","    step_size = (ct_train // BATCH_SIZE)\r\n","    valid_step_size = (ct_valid // BATCH_SIZE)\r\n","    total_steps=(total_epochs * step_size)\r\n","    warmup_steps=(warmup_epochs * step_size)\r\n","    \r\n","    \r\n","    # Build TF datasets\r\n","    train_ds = strategy.experimental_distribute_dataset(get_dataset(TRAIN_FILENAMES, repeated=True, augment=True))\r\n","    valid_ds = strategy.experimental_distribute_dataset(get_dataset(VALID_FILENAMES, ordered=True, repeated=True, cached=True))\r\n","    train_data_iter = iter(train_ds)\r\n","    valid_data_iter = iter(valid_ds)\r\n","    \r\n","    \r\n","    # Step functions\r\n","    @tf.function\r\n","    def train_step(data_iter):\r\n","        def train_step_fn(x, y):\r\n","            with tf.GradientTape() as tape:\r\n","                probabilities = model(x, training=True)\r\n","                loss = loss_fn(y, probabilities, label_smoothing=.3)\r\n","            gradients = tape.gradient(loss, model.trainable_variables)\r\n","            optimizer.apply_gradients(zip(gradients, model.trainable_variables))\r\n","            # update metrics\r\n","            train_accuracy.update_state(y, probabilities)\r\n","            train_loss.update_state(loss)\r\n","        for _ in tf.range(step_size):\r\n","            if COLAB:\r\n","                #print(COLAB)\r\n","                strategy.experimental_run_v2(train_step_fn, next(data_iter))\r\n","            else:\r\n","                strategy.experimental_run_v2(train_step_fn, next(data_iter))\r\n","\r\n","    @tf.function\r\n","    def valid_step(data_iter):\r\n","        def valid_step_fn(x, y):\r\n","            probabilities = model(x, training=False)\r\n","            loss = loss_fn(y, probabilities)\r\n","            # update metrics\r\n","            valid_accuracy.update_state(y, probabilities)\r\n","            valid_loss.update_state(loss)\r\n","        for _ in tf.range(valid_step_size):\r\n","            if COLAB:\r\n","                strategy.experimental_run_v2(valid_step_fn, next(data_iter))\r\n","            else:\r\n","                strategy.experimental_run_v2(valid_step_fn, next(data_iter))\r\n","    \r\n","    \r\n","    # Model\r\n","    model_path = models_path+f'model_{fold}.h5'\r\n","    with strategy.scope():\r\n","        model = model_fn((None, None, CHANNELS), N_CLASSES)\r\n","        unfreeze_model(model) # unfreeze all layers except \"batch normalization\"\r\n","        \r\n","        optimizer = optimizers.Adam(learning_rate=lambda: lrfn(tf.cast(optimizer.iterations, tf.float32)))\r\n","        loss_fn = losses.categorical_crossentropy\r\n","\r\n","        train_accuracy = metrics.CategoricalAccuracy()\r\n","        valid_accuracy = metrics.CategoricalAccuracy()\r\n","        train_loss = metrics.Sum()\r\n","        valid_loss = metrics.Sum()\r\n","    \r\n","    \r\n","    # Setup training loop\r\n","    step = 0\r\n","    epoch_steps = 0\r\n","    patience_cnt = 0\r\n","    best_val = 0\r\n","    history = {'loss': [], 'val_loss': [], 'accuracy': [], 'val_accuracy': []}\r\n","\r\n","    ### Train model\r\n","    for epoch in range(EPOCHS):\r\n","        epoch_start_time = time.time()\r\n","\r\n","        # Run training step\r\n","        train_step(train_data_iter)\r\n","        epoch_steps += step_size\r\n","        step += step_size\r\n","            \r\n","\r\n","        # Validation run at the end of each epoch\r\n","        if (step // step_size) > epoch:\r\n","            # Validation run\r\n","            valid_epoch_steps = 0\r\n","            valid_step(valid_data_iter)\r\n","            valid_epoch_steps += valid_step_size\r\n","\r\n","            # Compute metrics\r\n","            history['accuracy'].append(train_accuracy.result().numpy())\r\n","            history['loss'].append(train_loss.result().numpy() / (BATCH_SIZE * epoch_steps))\r\n","            history['val_accuracy'].append(valid_accuracy.result().numpy())\r\n","            history['val_loss'].append(valid_loss.result().numpy() / (BATCH_SIZE * valid_epoch_steps))\r\n","\r\n","            # Report metrics\r\n","            epoch_time = time.time() - epoch_start_time\r\n","            print(f'\\nEPOCH {epoch+1}/{EPOCHS}')\r\n","            print(f'time: {epoch_time:0.1f}s',\r\n","                  f\"loss: {history['loss'][-1]:0.4f}\",\r\n","                  f\"accuracy: {history['accuracy'][-1]:0.4f}\",\r\n","                  f\"val_loss: {history['val_loss'][-1]:0.4f}\",\r\n","                  f\"val_accuracy: {history['val_accuracy'][-1]:0.4f}\",\r\n","                  f'lr: {lrfn(tf.cast(optimizer.iterations, tf.int32).numpy()):0.4g}')\r\n","\r\n","            # Early stopping monitor\r\n","            if history['val_accuracy'][-1] >= best_val:\r\n","                best_val = history['val_accuracy'][-1]\r\n","                model.save_weights(model_path)\r\n","                print(f'Saved model weights at \"{model_path}\"')\r\n","                patience_cnt = 1\r\n","            else:\r\n","                patience_cnt += 1\r\n","            # if patience_cnt > ES_PATIENCE:\r\n","            #     print(f'Epoch {epoch:05d}: early stopping')\r\n","            #     break\r\n","\r\n","                \r\n","            # Set up next epoch\r\n","            epoch = step // step_size\r\n","            epoch_steps = 0\r\n","            train_accuracy.reset_states()\r\n","            train_loss.reset_states()\r\n","            valid_accuracy.reset_states()\r\n","            valid_loss.reset_states()\r\n","    \r\n","    \r\n","    ### RESULTS\r\n","    print(f\"#### FOLD {fold+1} OOF Accuracy = {np.max(history['val_accuracy']):.3f}\")\r\n","    \r\n","    history_list.append(history)\r\n","    # Load best model weights\r\n","    model.load_weights(model_path)\r\n","\r\n","    # OOF predictions\r\n","    ds_valid = get_dataset(VALID_FILENAMES, ordered=True)\r\n","    oof_labels.append([target.numpy() for img, target in iter(ds_valid.unbatch())])\r\n","    x_oof = ds_valid.map(lambda image, target: image)\r\n","    oof_pred.append(np.argmax(model.predict(x_oof), axis=-1))"],"execution_count":20,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.103.163.186:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.103.163.186:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.103.163.186:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.103.163.186:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","FOLD: 1\n","TRAIN: [ 0  1  3 ... 47 48 49] VALID: [ 2  4 10 11 22 27 28 31 38 41]\n","WARNING:tensorflow:From <ipython-input-20-d506d5d257e7>:71: StrategyBase.experimental_run_v2 (from tensorflow.python.distribute.distribute_lib) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","renamed to `run`\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:From <ipython-input-20-d506d5d257e7>:71: StrategyBase.experimental_run_v2 (from tensorflow.python.distribute.distribute_lib) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","renamed to `run`\n"],"name":"stderr"},{"output_type":"stream","text":["\n","EPOCH 1/10\n","time: 269.4s loss: 1.5744 accuracy: 0.3865 val_loss: 1.1565 val_accuracy: 0.6200 lr: 8e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 2/10\n","time: 151.9s loss: 1.5087 accuracy: 0.4284 val_loss: 1.1316 val_accuracy: 0.6293 lr: 7.759e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 3/10\n","time: 148.7s loss: 1.4890 accuracy: 0.4410 val_loss: 1.1205 val_accuracy: 0.6475 lr: 7.064e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 4/10\n","WARNING:tensorflow:5 out of the last 214 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:5 out of the last 214 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 149.8s loss: 1.4697 accuracy: 0.4610 val_loss: 1.0740 val_accuracy: 0.6626 lr: 6e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 5/10\n","WARNING:tensorflow:6 out of the last 215 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:6 out of the last 215 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 145.9s loss: 1.4473 accuracy: 0.4842 val_loss: 0.9903 val_accuracy: 0.6728 lr: 4.695e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 6/10\n","WARNING:tensorflow:7 out of the last 216 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:7 out of the last 216 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 136.9s loss: 1.3953 accuracy: 0.5379 val_loss: 0.9603 val_accuracy: 0.7041 lr: 3.305e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 7/10\n","WARNING:tensorflow:8 out of the last 217 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:8 out of the last 217 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 133.4s loss: 1.3344 accuracy: 0.6065 val_loss: 0.8651 val_accuracy: 0.7372 lr: 2e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 8/10\n","WARNING:tensorflow:9 out of the last 218 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:9 out of the last 218 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 136.0s loss: 1.2908 accuracy: 0.6523 val_loss: 0.8508 val_accuracy: 0.7580 lr: 9.358e-06\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 9/10\n","WARNING:tensorflow:10 out of the last 219 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:10 out of the last 219 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 136.8s loss: 1.2630 accuracy: 0.6824 val_loss: 0.8042 val_accuracy: 0.7732 lr: 2.412e-06\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 10/10\n","WARNING:tensorflow:11 out of the last 220 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 220 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 139.3s loss: 1.2540 accuracy: 0.6894 val_loss: 0.8276 val_accuracy: 0.7656 lr: 8e-05\n","#### FOLD 1 OOF Accuracy = 0.773\n","WARNING:tensorflow:TPU system grpc://10.103.163.186:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.103.163.186:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.103.163.186:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.103.163.186:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","FOLD: 2\n","TRAIN: [ 0  1  2 ... 46 47 49] VALID: [ 7 14 18 26 29 33 34 35 45 48]\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","EPOCH 1/10\n","time: 272.3s loss: 1.5760 accuracy: 0.3901 val_loss: 1.1312 val_accuracy: 0.6191 lr: 8e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 2/10\n","time: 152.8s loss: 1.5006 accuracy: 0.4309 val_loss: 1.1483 val_accuracy: 0.6269 lr: 7.759e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 3/10\n","time: 150.3s loss: 1.4863 accuracy: 0.4429 val_loss: 1.0773 val_accuracy: 0.6252 lr: 7.064e-05\n","\n","EPOCH 4/10\n","WARNING:tensorflow:5 out of the last 214 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:5 out of the last 214 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 153.8s loss: 1.4677 accuracy: 0.4631 val_loss: 1.0441 val_accuracy: 0.6435 lr: 6e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 5/10\n","WARNING:tensorflow:6 out of the last 215 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:6 out of the last 215 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 146.2s loss: 1.4470 accuracy: 0.4811 val_loss: 0.9819 val_accuracy: 0.6697 lr: 4.695e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 6/10\n","WARNING:tensorflow:7 out of the last 216 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:7 out of the last 216 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 136.8s loss: 1.4046 accuracy: 0.5234 val_loss: 0.9352 val_accuracy: 0.7154 lr: 3.305e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 7/10\n","WARNING:tensorflow:8 out of the last 217 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:8 out of the last 217 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 133.6s loss: 1.3441 accuracy: 0.5959 val_loss: 0.9037 val_accuracy: 0.7386 lr: 2e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 8/10\n","WARNING:tensorflow:9 out of the last 218 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:9 out of the last 218 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 137.8s loss: 1.3070 accuracy: 0.6356 val_loss: 0.8178 val_accuracy: 0.7576 lr: 9.358e-06\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 9/10\n","WARNING:tensorflow:10 out of the last 219 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:10 out of the last 219 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 137.4s loss: 1.2794 accuracy: 0.6608 val_loss: 0.8077 val_accuracy: 0.7628 lr: 2.412e-06\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 10/10\n","WARNING:tensorflow:11 out of the last 220 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 220 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 137.2s loss: 1.2674 accuracy: 0.6764 val_loss: 0.8320 val_accuracy: 0.7571 lr: 8e-05\n","#### FOLD 2 OOF Accuracy = 0.763\n","WARNING:tensorflow:TPU system grpc://10.103.163.186:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.103.163.186:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.103.163.186:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.103.163.186:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","FOLD: 3\n","TRAIN: [ 0  1  2 ... 47 48 49] VALID: [ 8 13 15 16 20 25 30 32 42 43]\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","EPOCH 1/10\n","time: 272.2s loss: 1.5646 accuracy: 0.3948 val_loss: 1.1399 val_accuracy: 0.6207 lr: 8e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 2/10\n","time: 157.4s loss: 1.5109 accuracy: 0.4179 val_loss: 1.0819 val_accuracy: 0.6267 lr: 7.759e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 3/10\n","time: 152.2s loss: 1.4830 accuracy: 0.4497 val_loss: 1.0916 val_accuracy: 0.6241 lr: 7.064e-05\n","\n","EPOCH 4/10\n","time: 144.6s loss: 1.4660 accuracy: 0.4650 val_loss: 1.0715 val_accuracy: 0.6539 lr: 6e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 5/10\n","time: 147.4s loss: 1.4453 accuracy: 0.4811 val_loss: 1.0061 val_accuracy: 0.6882 lr: 4.695e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 6/10\n","time: 135.5s loss: 1.3956 accuracy: 0.5320 val_loss: 0.9988 val_accuracy: 0.6922 lr: 3.305e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 7/10\n","time: 138.7s loss: 1.3521 accuracy: 0.5860 val_loss: 0.8794 val_accuracy: 0.7441 lr: 2e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 8/10\n","time: 138.4s loss: 1.3048 accuracy: 0.6334 val_loss: 0.8526 val_accuracy: 0.7592 lr: 9.358e-06\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 9/10\n","time: 139.3s loss: 1.2722 accuracy: 0.6695 val_loss: 0.7895 val_accuracy: 0.7708 lr: 2.412e-06\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 10/10\n","time: 140.6s loss: 1.2604 accuracy: 0.6821 val_loss: 0.8286 val_accuracy: 0.7661 lr: 8e-05\n","#### FOLD 3 OOF Accuracy = 0.771\n","WARNING:tensorflow:TPU system grpc://10.103.163.186:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.103.163.186:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.103.163.186:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.103.163.186:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","FOLD: 4\n","TRAIN: [ 0  2  3 ... 46 47 48] VALID: [ 1  5  6 12 17 23 24 37 40 49]\n","\n","EPOCH 1/10\n","time: 273.2s loss: 1.5636 accuracy: 0.3959 val_loss: 1.1850 val_accuracy: 0.6179 lr: 8e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_3.h5\"\n","\n","EPOCH 2/10\n","time: 157.9s loss: 1.5043 accuracy: 0.4259 val_loss: 1.1540 val_accuracy: 0.6177 lr: 7.759e-05\n","\n","EPOCH 3/10\n","time: 156.5s loss: 1.4819 accuracy: 0.4474 val_loss: 1.0879 val_accuracy: 0.6366 lr: 7.064e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_3.h5\"\n","\n","EPOCH 4/10\n","WARNING:tensorflow:5 out of the last 214 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:5 out of the last 214 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 150.5s loss: 1.4570 accuracy: 0.4700 val_loss: 1.0404 val_accuracy: 0.6598 lr: 6e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_3.h5\"\n","\n","EPOCH 5/10\n","WARNING:tensorflow:6 out of the last 215 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:6 out of the last 215 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 150.1s loss: 1.4257 accuracy: 0.5033 val_loss: 0.9588 val_accuracy: 0.7062 lr: 4.695e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_3.h5\"\n","\n","EPOCH 6/10\n","WARNING:tensorflow:7 out of the last 216 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:7 out of the last 216 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 139.1s loss: 1.3590 accuracy: 0.5798 val_loss: 0.9648 val_accuracy: 0.7176 lr: 3.305e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_3.h5\"\n","\n","EPOCH 7/10\n","WARNING:tensorflow:8 out of the last 217 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:8 out of the last 217 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 144.8s loss: 1.3037 accuracy: 0.6409 val_loss: 0.8416 val_accuracy: 0.7623 lr: 2e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_3.h5\"\n","\n","EPOCH 8/10\n","WARNING:tensorflow:9 out of the last 218 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:9 out of the last 218 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 143.8s loss: 1.2693 accuracy: 0.6736 val_loss: 0.7601 val_accuracy: 0.7796 lr: 9.358e-06\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_3.h5\"\n","\n","EPOCH 9/10\n","WARNING:tensorflow:10 out of the last 219 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:10 out of the last 219 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 145.1s loss: 1.2418 accuracy: 0.7011 val_loss: 0.7584 val_accuracy: 0.7959 lr: 2.412e-06\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_3.h5\"\n","\n","EPOCH 10/10\n","WARNING:tensorflow:11 out of the last 220 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 220 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 140.3s loss: 1.2342 accuracy: 0.7079 val_loss: 0.7952 val_accuracy: 0.7812 lr: 8e-05\n","#### FOLD 4 OOF Accuracy = 0.796\n","WARNING:tensorflow:TPU system grpc://10.103.163.186:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.103.163.186:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.103.163.186:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.103.163.186:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","FOLD: 5\n","TRAIN: [ 1  2  4 ... 45 48 49] VALID: [ 0  3  9 19 21 36 39 44 46 47]\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7fa4744f8598> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","EPOCH 1/10\n","time: 279.4s loss: 1.5694 accuracy: 0.3943 val_loss: 1.1224 val_accuracy: 0.6207 lr: 8e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 2/10\n","time: 158.0s loss: 1.5093 accuracy: 0.4234 val_loss: 1.1005 val_accuracy: 0.6290 lr: 7.759e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 3/10\n","time: 159.0s loss: 1.4884 accuracy: 0.4459 val_loss: 1.1000 val_accuracy: 0.6229 lr: 7.064e-05\n","\n","EPOCH 4/10\n","time: 154.9s loss: 1.4555 accuracy: 0.4758 val_loss: 1.0091 val_accuracy: 0.6645 lr: 6e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 5/10\n","time: 150.8s loss: 1.3956 accuracy: 0.5376 val_loss: 0.8481 val_accuracy: 0.7043 lr: 4.695e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 6/10\n","time: 143.0s loss: 1.3210 accuracy: 0.6247 val_loss: 0.7784 val_accuracy: 0.7528 lr: 3.305e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 7/10\n","time: 143.1s loss: 1.2807 accuracy: 0.6638 val_loss: 0.8170 val_accuracy: 0.7760 lr: 2e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 8/10\n","time: 141.4s loss: 1.2464 accuracy: 0.6946 val_loss: 0.7490 val_accuracy: 0.7917 lr: 9.358e-06\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 9/10\n","time: 140.8s loss: 1.2247 accuracy: 0.7186 val_loss: 0.7276 val_accuracy: 0.8063 lr: 2.412e-06\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 10/10\n","time: 143.2s loss: 1.2156 accuracy: 0.7234 val_loss: 0.7484 val_accuracy: 0.7973 lr: 8e-05\n","#### FOLD 5 OOF Accuracy = 0.806\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"NQyHtXnRCaO5","papermill":{"duration":0.130935,"end_time":"2021-01-20T23:41:32.592224","exception":false,"start_time":"2021-01-20T23:41:32.461289","status":"completed"},"tags":[]},"source":["## Model loss graph"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:41:32.862698Z","iopub.status.busy":"2021-01-20T23:41:32.861475Z","iopub.status.idle":"2021-01-20T23:41:35.936240Z","shell.execute_reply":"2021-01-20T23:41:35.935506Z"},"id":"_7pUdch3CaO6","papermill":{"duration":3.212527,"end_time":"2021-01-20T23:41:35.936368","exception":false,"start_time":"2021-01-20T23:41:32.723841","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1611944178816,"user_tz":-540,"elapsed":9502370,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"7a18a81e-3353-4db9-bf5a-92a9a1765c9e"},"source":["for fold, history in enumerate(history_list):\n","    print(f'\\nFOLD: {fold+1}')\n","    plot_metrics(history)"],"execution_count":21,"outputs":[{"output_type":"stream","text":["\n","FOLD: 1\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 2 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","FOLD: 2\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 2 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","FOLD: 3\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 2 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","FOLD: 4\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 2 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","FOLD: 5\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 2 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"ImheYrtKCaO7","papermill":{"duration":0.140565,"end_time":"2021-01-20T23:41:36.235070","exception":false,"start_time":"2021-01-20T23:41:36.094505","status":"completed"},"tags":[]},"source":["# Model evaluation\n","\n","Now we can evaluate the performance of the model, first, we can evaluate the usual metrics like, `accuracy`, `precision`, `recall`, and `f1-score`, `scikit-learn` provides the perfect function for this `classification_report`.\n","\n","We are evaluating the model on the `OOF` predictions, it stands for `Out Of Fold`, since we are training using `K-Fold` our model will see all the data, and the correct way to evaluate each fold is by looking at the predictions that are not from that fold.\n","\n","## OOF metrics"]},{"cell_type":"markdown","metadata":{"id":"I_QvO8rPCaO7","papermill":{"duration":0.142773,"end_time":"2021-01-20T23:41:36.524904","exception":false,"start_time":"2021-01-20T23:41:36.382131","status":"completed"},"tags":[]},"source":["#### I am still having some problems to get the real model `OOF` scores while using `TPU Pods`, so the results here and the confusion matrix are just placeholders."]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:41:36.817847Z","iopub.status.busy":"2021-01-20T23:41:36.816550Z","iopub.status.idle":"2021-01-20T23:41:36.871365Z","shell.execute_reply":"2021-01-20T23:41:36.870279Z"},"id":"q7TfhkICCaO7","papermill":{"duration":0.205034,"end_time":"2021-01-20T23:41:36.871548","exception":false,"start_time":"2021-01-20T23:41:36.666514","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611944178817,"user_tz":-540,"elapsed":9502367,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"b9333114-38ef-4207-9ea2-545748ffc2bd"},"source":["y_true = np.concatenate(oof_labels)\n","y_true = np.argmax(y_true, axis=-1)\n","y_pred = np.concatenate(oof_pred)\n","\n","print(classification_report(y_true, y_pred, target_names=CLASSES))"],"execution_count":22,"outputs":[{"output_type":"stream","text":["                              precision    recall  f1-score   support\n","\n","    Cassava Bacterial Blight       0.59      0.34      0.43      1086\n","Cassava Brown Streak Disease       0.67      0.58      0.62      2189\n","        Cassava Green Mottle       0.69      0.43      0.53      2386\n","      Cassava Mosaic Disease       0.86      0.95      0.90     13158\n","                     Healthy       0.54      0.61      0.58      2576\n","\n","                    accuracy                           0.78     21395\n","                   macro avg       0.67      0.58      0.61     21395\n","                weighted avg       0.77      0.78      0.77     21395\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"pIAJafCnCaO7","papermill":{"duration":0.1407,"end_time":"2021-01-20T23:41:37.153525","exception":false,"start_time":"2021-01-20T23:41:37.012825","status":"completed"},"tags":[]},"source":["# Confusion matrix\n","\n","Let's also take a look at the confusion matrix, this will give us an idea about what classes the model is mixing or having a hard time."]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:41:37.451948Z","iopub.status.busy":"2021-01-20T23:41:37.451220Z","iopub.status.idle":"2021-01-20T23:41:37.902193Z","shell.execute_reply":"2021-01-20T23:41:37.902770Z"},"id":"dw2F8Wk2CaO7","papermill":{"duration":0.608362,"end_time":"2021-01-20T23:41:37.902957","exception":false,"start_time":"2021-01-20T23:41:37.294595","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1611944179210,"user_tz":-540,"elapsed":9502757,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"83904774-1eeb-4a5b-b7a5-883ff6629eae"},"source":["fig, ax = plt.subplots(1, 1, figsize=(20, 12))\n","cfn_matrix = confusion_matrix(y_true, y_pred, labels=range(len(CLASSES)))\n","cfn_matrix = (cfn_matrix.T / cfn_matrix.sum(axis=1)).T\n","df_cm = pd.DataFrame(cfn_matrix, index=CLASSES, columns=CLASSES)\n","ax = sns.heatmap(df_cm, cmap='Blues', annot=True, fmt='.2f', linewidths=.5).set_title('Train', fontsize=30)\n","plt.show()"],"execution_count":23,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x864 with 2 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"AaZVX_ZhCaO7","papermill":{"duration":0.14275,"end_time":"2021-01-20T23:41:38.189478","exception":false,"start_time":"2021-01-20T23:41:38.046728","status":"completed"},"tags":[]},"source":["# Visualize predictions\n","\n","Finally, it is a good practice to always inspect some of the model's prediction by looking at the data, this can give an idea if the model is getting some predictions wrong because the data is really hard, of if it is because the model is actually bad.\n","\n","\n","### Class map\n","```\n","0: Cassava Bacterial Blight (CBB)\n","1: Cassava Brown Streak Disease (CBSD)\n","2: Cassava Green Mottle (CGM)\n","3: Cassava Mosaic Disease (CMD)\n","4: Healthy\n","```\n","\n","\n","## Train set"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:41:38.486711Z","iopub.status.busy":"2021-01-20T23:41:38.478610Z","iopub.status.idle":"2021-01-20T23:42:07.973278Z","shell.execute_reply":"2021-01-20T23:42:07.973946Z"},"id":"ExEWWtxyCaO8","papermill":{"duration":29.642469,"end_time":"2021-01-20T23:42:07.974121","exception":false,"start_time":"2021-01-20T23:41:38.331652","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1PwH8fJtt-oFfY1_OlByo7nImy2-Tl_-2"},"executionInfo":{"status":"ok","timestamp":1611944206507,"user_tz":-540,"elapsed":9530050,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"ef573f6c-c1d9-4e52-c94c-92bad3bfc312"},"source":["train_dataset = get_dataset(TRAINING_FILENAMES, ordered=True)\n","x_samp, y_samp = dataset_to_numpy_util(train_dataset, 18)\n","y_samp = np.argmax(y_samp, axis=-1)\n","\n","x_samp_1, y_samp_1 = x_samp[:9,:,:,:], y_samp[:9]\n","samp_preds_1 = model.predict(x_samp_1, batch_size=9)\n","display_9_images_with_predictions(x_samp_1, samp_preds_1, y_samp_1)\n","\n","x_samp_2, y_samp_2 = x_samp[9:,:,:,:], y_samp[9:]\n","samp_preds_2 = model.predict(x_samp_2, batch_size=9)\n","display_9_images_with_predictions(x_samp_2, samp_preds_2, y_samp_2)"],"execution_count":24,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:42:08.485006Z","iopub.status.busy":"2021-01-20T23:42:08.479584Z","iopub.status.idle":"2021-01-20T23:42:08.490084Z","shell.execute_reply":"2021-01-20T23:42:08.489432Z"},"id":"h9CeTJAYKYQd","papermill":{"duration":0.271568,"end_time":"2021-01-20T23:42:08.490212","exception":false,"start_time":"2021-01-20T23:42:08.218644","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611944206815,"user_tz":-540,"elapsed":9530354,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"d3634fb2-97f0-4502-ff50-822e33a8030f"},"source":["\n","save_data=True# You can immediately create a kaggle dataset from your models\n","if COLAB and save_data:\n","  \n","    import json\n","\n","\n","    \n","    data = {\"title\": \"Cassava Leaf Disease\", \n","        \"id\": \"aikhmelnytskyy/CassavaLeafDisease\", \n","        \"licenses\": [\n","                     {\n","                         \"name\": \"CC0-1.0\"\n","                      }\n","                     ]}\n","    \n","\n","    # for kaggle api Connection\n","    \n","    !kaggle datasets init -p /content/drive/MyDrive/Colab Notebooks/Cassava/\n","    \n","    with open(\"/content/drive/MyDrive/Colab Notebooks/Cassava/dataset-metadata.json\", \"w\", encoding=\"utf-8\") as file:\n","        json.dump(data, file)\n","    \n","    #if new dataset\n","    !kaggle datasets create -p /content/drive/MyDrive/Models/Cassava/\n","    #If you’d like to upload a new version of an existing dataset\n","    #!kaggle datasets version -p /content/drive/MyDrive/Models/Cassava/ -m \"Your message here\""],"execution_count":25,"outputs":[{"output_type":"stream","text":["Traceback (most recent call last):\n","  File \"/usr/local/bin/kaggle\", line 5, in <module>\n","    from kaggle.cli import main\n","  File \"/usr/local/lib/python3.6/dist-packages/kaggle/__init__.py\", line 23, in <module>\n","    api.authenticate()\n","  File \"/usr/local/lib/python3.6/dist-packages/kaggle/api/kaggle_api_extended.py\", line 166, in authenticate\n","    self.config_file, self.config_dir))\n","OSError: Could not find kaggle.json. Make sure it's located in /root/.kaggle. Or use the environment method.\n","Traceback (most recent call last):\n","  File \"/usr/local/bin/kaggle\", line 5, in <module>\n","    from kaggle.cli import main\n","  File \"/usr/local/lib/python3.6/dist-packages/kaggle/__init__.py\", line 23, in <module>\n","    api.authenticate()\n","  File \"/usr/local/lib/python3.6/dist-packages/kaggle/api/kaggle_api_extended.py\", line 166, in authenticate\n","    self.config_file, self.config_dir))\n","OSError: Could not find kaggle.json. Make sure it's located in /root/.kaggle. Or use the environment method.\n"],"name":"stdout"}]}]}