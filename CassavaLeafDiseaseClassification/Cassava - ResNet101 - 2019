{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.6"},"papermill":{"duration":2705.650201,"end_time":"2021-01-20T23:42:08.938285","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2021-01-20T22:57:03.288084","version":"2.1.0"},"colab":{"name":"Cassava - ResNet101 - 2019","provenance":[{"file_id":"1I0jhqKt_pIruiY4SLNQ1nKa1KTc7aLwW","timestamp":1611749788936},{"file_id":"1k3GJEDIw5B9smNhmCO9z5wJn0_fz7V6e","timestamp":1611698282872},{"file_id":"1luIn2wZfy_fopw5CZhO7tSwz3QfPBeu0","timestamp":1611649047226},{"file_id":"14lxnkhkxhL-leLaM7_ewQrCSbDr617ZZ","timestamp":1611576808109}],"collapsed_sections":[]},"accelerator":"TPU"},"cells":[{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:08.648534Z","iopub.status.busy":"2021-01-20T22:57:08.647654Z","iopub.status.idle":"2021-01-20T22:57:08.650554Z","shell.execute_reply":"2021-01-20T22:57:08.651069Z"},"papermill":{"duration":0.038327,"end_time":"2021-01-20T22:57:08.651252","exception":false,"start_time":"2021-01-20T22:57:08.612925","status":"completed"},"tags":[],"id":"BkVGwREBxGQy","executionInfo":{"status":"ok","timestamp":1611949122827,"user_tz":-540,"elapsed":578,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["EPOCHS = 10 \n","HEIGHT = 512\n","WIDTH = 512\n","HEIGHT_RS = 512\n","WIDTH_RS = 512\n","CHANNELS = 3\n","N_CLASSES = 5\n","N_FOLDS = 5\n","FOLDS_USED = 5\n","ES_PATIENCE = 5"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:08.738880Z","iopub.status.busy":"2021-01-20T22:57:08.723182Z","iopub.status.idle":"2021-01-20T22:57:11.217685Z","shell.execute_reply":"2021-01-20T22:57:11.216355Z"},"id":"YZBauHrJCkn7","papermill":{"duration":2.537229,"end_time":"2021-01-20T22:57:11.217823","exception":false,"start_time":"2021-01-20T22:57:08.680594","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611949158530,"user_tz":-540,"elapsed":36265,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"dd9f84a1-cea8-4e9e-860b-189ee1049901"},"source":["\n","import os\n","\n","models_path=''\n","\n","COLAB=True\n","import gc\n","!pip install fsspec\n","!pip install gcsfs \n","!pip install --upgrade --force-reinstall --no-deps kaggle\n","\n","from google.colab import drive\n","drive.mount('/content/drive')\n","%cd '/content/drive/MyDrive/Colab Notebooks/Cassava/'\n","\n","#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n","\n","database_base_path = 'gs://kds-0ec1dec9f628bce2bc810157442805632bd221934a9e1921da420af8/'\n","GCS_PATH = 'gs://kds-97ffa76638f61f952661d26d7752f59abdf8f804f1e4794ab6b2e297'\n","GCS_PATH_EXT = 'gs://kds-e707b2c823f5ab0df2845ed8abcbed536d27e188731770fde8a6a95b'\n","GCS_PATH_CLASSES = 'gs://kds-df6e525a58ba9104b570dd12c9abca118c8a509b740d9164e4cd4de3'\n","GCS_PATH_EXT_CLASSES = 'gs://kds-7e729109c97bb2badcc4d6ec847c47b388513403e0c35cfc68b5ae02'\n","\n","\n","# \n","#This is a path to a dataset that changes over time, so you need to constantly update it. To update the path just run the code: \n","#GCS_DS_PATH = KaggleDatasets (). Get_gcs_path ()\n","#print (GCS_PATH)......\n","models_path='/content/drive/MyDrive/Colab Notebooks/Cassava/model/'# I created a folder called Models/Cassava on my Google Drive"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Collecting fsspec\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/ec/80/72ac0982cc833945fada4b76c52f0f65435ba4d53bc9317d1c70b5f7e7d5/fsspec-0.8.5-py3-none-any.whl (98kB)\n","\r\u001b[K     |███▎                            | 10kB 15.5MB/s eta 0:00:01\r\u001b[K     |██████▋                         | 20kB 14.9MB/s eta 0:00:01\r\u001b[K     |██████████                      | 30kB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████████▎                  | 40kB 8.2MB/s eta 0:00:01\r\u001b[K     |████████████████▋               | 51kB 5.6MB/s eta 0:00:01\r\u001b[K     |████████████████████            | 61kB 5.7MB/s eta 0:00:01\r\u001b[K     |███████████████████████▏        | 71kB 6.3MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▌     | 81kB 6.2MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▉  | 92kB 6.4MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 102kB 4.6MB/s \n","\u001b[?25hInstalling collected packages: fsspec\n","Successfully installed fsspec-0.8.5\n","Collecting gcsfs\n","  Downloading https://files.pythonhosted.org/packages/85/75/3d669945d41e5aedd5c4333b9dc6192b7839d2bafd04b75b8222d4e92ae0/gcsfs-0.7.1-py2.py3-none-any.whl\n","Collecting aiohttp\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/ad/e6/d4b6235d776c9b33f853e603efede5aac5a34f71ca9d3877adb30492eb4e/aiohttp-3.7.3-cp36-cp36m-manylinux2014_x86_64.whl (1.3MB)\n","\u001b[K     |████████████████████████████████| 1.3MB 7.7MB/s \n","\u001b[?25hRequirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from gcsfs) (2.23.0)\n","Requirement already satisfied: fsspec>=0.8.0 in /usr/local/lib/python3.6/dist-packages (from gcsfs) (0.8.5)\n","Requirement already satisfied: google-auth>=1.2 in /usr/local/lib/python3.6/dist-packages (from gcsfs) (1.17.2)\n","Requirement already satisfied: google-auth-oauthlib in /usr/local/lib/python3.6/dist-packages (from gcsfs) (0.4.2)\n","Requirement already satisfied: decorator in /usr/local/lib/python3.6/dist-packages (from gcsfs) (4.4.2)\n","Requirement already satisfied: chardet<4.0,>=2.0 in /usr/local/lib/python3.6/dist-packages (from aiohttp->gcsfs) (3.0.4)\n","Collecting idna-ssl>=1.0; python_version < \"3.7\"\n","  Downloading https://files.pythonhosted.org/packages/46/03/07c4894aae38b0de52b52586b24bf189bb83e4ddabfe2e2c8f2419eec6f4/idna-ssl-1.1.0.tar.gz\n","Requirement already satisfied: typing-extensions>=3.6.5 in /usr/local/lib/python3.6/dist-packages (from aiohttp->gcsfs) (3.7.4.3)\n","Collecting multidict<7.0,>=4.5\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/a1/35/b22524d6b9cacfb4c5eff413a069bbc17c6ea628e54da5c6c989998ced5f/multidict-5.1.0-cp36-cp36m-manylinux2014_x86_64.whl (141kB)\n","\u001b[K     |████████████████████████████████| 143kB 23.6MB/s \n","\u001b[?25hCollecting async-timeout<4.0,>=3.0\n","  Downloading https://files.pythonhosted.org/packages/e1/1e/5a4441be21b0726c4464f3f23c8b19628372f606755a9d2e46c187e65ec4/async_timeout-3.0.1-py3-none-any.whl\n","Collecting yarl<2.0,>=1.0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/da/08/52b26b44bce7b818b410aee37c5e424c9ea420c557bca97dc2adac29b151/yarl-1.6.3-cp36-cp36m-manylinux2014_x86_64.whl (293kB)\n","\u001b[K     |████████████████████████████████| 296kB 19.1MB/s \n","\u001b[?25hRequirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.6/dist-packages (from aiohttp->gcsfs) (20.3.0)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->gcsfs) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests->gcsfs) (2020.12.5)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests->gcsfs) (1.24.3)\n","Requirement already satisfied: cachetools<5.0,>=2.0.0 in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.2->gcsfs) (4.2.1)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.2->gcsfs) (0.2.8)\n","Requirement already satisfied: setuptools>=40.3.0 in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.2->gcsfs) (51.3.3)\n","Requirement already satisfied: rsa<5,>=3.1.4; python_version >= \"3\" in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.2->gcsfs) (4.7)\n","Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.2->gcsfs) (1.15.0)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.6/dist-packages (from google-auth-oauthlib->gcsfs) (1.3.0)\n","Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.6/dist-packages (from pyasn1-modules>=0.2.1->google-auth>=1.2->gcsfs) (0.4.8)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.6/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib->gcsfs) (3.1.0)\n","Building wheels for collected packages: idna-ssl\n","  Building wheel for idna-ssl (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for idna-ssl: filename=idna_ssl-1.1.0-cp36-none-any.whl size=3163 sha256=d8e5cf3fff609a5e0c46a2fb20e088f5a9ed818c007d3852d3b8a1c9d5794f47\n","  Stored in directory: /root/.cache/pip/wheels/d3/00/b3/32d613e19e08a739751dd6bf998cfed277728f8b2127ad4eb7\n","Successfully built idna-ssl\n","Installing collected packages: idna-ssl, multidict, async-timeout, yarl, aiohttp, gcsfs\n","Successfully installed aiohttp-3.7.3 async-timeout-3.0.1 gcsfs-0.7.1 idna-ssl-1.1.0 multidict-5.1.0 yarl-1.6.3\n","Collecting kaggle\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/99/33/365c0d13f07a2a54744d027fe20b60dacdfdfb33bc04746db6ad0b79340b/kaggle-1.5.10.tar.gz (59kB)\n","\u001b[K     |████████████████████████████████| 61kB 3.7MB/s \n","\u001b[?25hBuilding wheels for collected packages: kaggle\n","  Building wheel for kaggle (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for kaggle: filename=kaggle-1.5.10-cp36-none-any.whl size=73269 sha256=6416ccbb3dfac130707ad545ab3eb93a3ece7f490cc13ee5ab55ea5e61d88cd5\n","  Stored in directory: /root/.cache/pip/wheels/3a/d1/7e/6ce09b72b770149802c653a02783821629146983ee5a360f10\n","Successfully built kaggle\n","Installing collected packages: kaggle\n","  Found existing installation: kaggle 1.5.10\n","    Uninstalling kaggle-1.5.10:\n","      Successfully uninstalled kaggle-1.5.10\n","Successfully installed kaggle-1.5.10\n","Mounted at /content/drive\n","/content/drive/MyDrive/Colab Notebooks/Cassava\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:11.294556Z","iopub.status.busy":"2021-01-20T22:57:11.290187Z","iopub.status.idle":"2021-01-20T22:57:11.298693Z","shell.execute_reply":"2021-01-20T22:57:11.298011Z"},"id":"5V15UaoACh-M","papermill":{"duration":0.051661,"end_time":"2021-01-20T22:57:11.298873","exception":false,"start_time":"2021-01-20T22:57:11.247212","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1611949158531,"user_tz":-540,"elapsed":36264,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["if COLAB:# Prepare the kaggle.json file for use \n","    from google.colab import files\n","    if not os.path.exists('/content/drive/MyDrive/Colab Notebooks/.kaggle/kaggle.json'):\n","        !mkdir ~/content/drive/MyDrive/Colab Notebooks/.kaggle/\n","        if not os.path.exists('/content/drive/MyDrive/Colab Notebooks/.kaggle/kaggle.json'):\n","            files.upload()\n","            !cp kaggle.json ~/content/drive/MyDrive/Colab Notebooks/.kaggle/\n","        else:\n","            !cp '/content/drive/MyDrive/Colab Notebooks/' ~/.kaggle/  \n","        !chmod 600 ~/content/drive/MyDrive/Colab Notebooks/.kaggle/kaggle.json\n"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:11.368941Z","iopub.status.busy":"2021-01-20T22:57:11.367797Z","iopub.status.idle":"2021-01-20T22:57:11.371432Z","shell.execute_reply":"2021-01-20T22:57:11.370752Z"},"id":"urYjsB4IV-t5","papermill":{"duration":0.04238,"end_time":"2021-01-20T22:57:11.371550","exception":false,"start_time":"2021-01-20T22:57:11.329170","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611949270329,"user_tz":-540,"elapsed":148054,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"9e113ddd-4a5b-43dd-af27-669e141679c7"},"source":["if COLAB:# force TF to 2.2\n","    !pip install -q tensorflow~=2.2.0 tensorflow_gcs_config~=2.2.0\n","    \n","    import requests\n","    import os\n","    import tensorflow as tf\n","    resp = requests.post(\"http://{}:8475/requestversion/{}\".format(os.environ[\"COLAB_TPU_ADDR\"].split(\":\")[0], tf.__version__))\n","    if resp.status_code != 200:\n","      print(\"Failed to switch the TPU to TF {}\".format(version))"],"execution_count":5,"outputs":[{"output_type":"stream","text":["\u001b[K     |████████████████████████████████| 516.2MB 35kB/s \n","\u001b[K     |████████████████████████████████| 399kB 41.7MB/s \n","\u001b[K     |████████████████████████████████| 20.1MB 13.3MB/s \n","\u001b[K     |████████████████████████████████| 3.0MB 44.7MB/s \n","\u001b[K     |████████████████████████████████| 460kB 37.1MB/s \n","\u001b[31mERROR: datascience 0.10.6 has requirement folium==0.2.1, but you'll have folium 0.8.3 which is incompatible.\u001b[0m\n","\u001b[31mERROR: albumentations 0.1.12 has requirement imgaug<0.2.7,>=0.2.5, but you'll have imgaug 0.2.9 which is incompatible.\u001b[0m\n","\u001b[?25h"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"DJLH967uCaOv","papermill":{"duration":0.029839,"end_time":"2021-01-20T22:57:11.431128","exception":false,"start_time":"2021-01-20T22:57:11.401289","status":"completed"},"tags":[]},"source":["## Dependencies"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:21.982695Z","iopub.status.busy":"2021-01-20T22:57:21.981961Z","iopub.status.idle":"2021-01-20T22:57:29.891530Z","shell.execute_reply":"2021-01-20T22:57:29.890624Z"},"id":"-iMoIRz7CaOw","papermill":{"duration":7.952124,"end_time":"2021-01-20T22:57:29.891659","exception":false,"start_time":"2021-01-20T22:57:21.939535","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1611949271387,"user_tz":-540,"elapsed":149110,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["import math, os, re, warnings, random, time\n","import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","from matplotlib import pyplot as plt\n","\n","from sklearn.model_selection import KFold\n","from sklearn.metrics import classification_report, confusion_matrix\n","import tensorflow as tf\n","import tensorflow.keras.layers as L\n","import tensorflow.keras.backend as K\n","from tensorflow.keras import optimizers, Sequential, losses, metrics, Model\n","from tensorflow.keras.callbacks import EarlyStopping\n","\n","def seed_everything(seed=0):\n","    random.seed(seed)\n","    np.random.seed(seed)\n","    tf.random.set_seed(seed)\n","    os.environ['PYTHONHASHSEED'] = str(seed)\n","    os.environ['TF_DETERMINISTIC_OPS'] = '1'\n","\n","seed = 0\n","seed_everything(seed)\n","warnings.filterwarnings('ignore')"],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Z-146lSGCaOx","papermill":{"duration":0.030316,"end_time":"2021-01-20T22:57:29.954488","exception":false,"start_time":"2021-01-20T22:57:29.924172","status":"completed"},"tags":[]},"source":["### Hardware configuration\n","\n","Note that we have `32` cores, this is because the `TPU v2 Pod` have more cores than a single `TPU v3` which has `8` cores."]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:30.071569Z","iopub.status.busy":"2021-01-20T22:57:30.035804Z","iopub.status.idle":"2021-01-20T22:57:34.008561Z","shell.execute_reply":"2021-01-20T22:57:34.010162Z"},"id":"cCFwEwkVCaOy","papermill":{"duration":4.024986,"end_time":"2021-01-20T22:57:34.010410","exception":false,"start_time":"2021-01-20T22:57:29.985424","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611949289915,"user_tz":-540,"elapsed":167631,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"1b86e368-88d2-476b-e64a-678dec00a412"},"source":["# TPU or GPU detection\n","# Detect hardware, return appropriate distribution strategy\n","try:\n","    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n","    print(f'Running on TPU {tpu.master()}')\n","except ValueError:\n","    tpu = None\n","    print ('tpu',tpu)\n","\n","if tpu:\n","    tf.config.experimental_connect_to_cluster(tpu)\n","    tf.tpu.experimental.initialize_tpu_system(tpu)\n","    strategy = tf.distribute.experimental.TPUStrategy(tpu)\n","else:\n","    strategy = tf.distribute.get_strategy()\n","\n","AUTO = tf.data.experimental.AUTOTUNE\n","REPLICAS = strategy.num_replicas_in_sync\n","print(f'REPLICAS: {REPLICAS}')"],"execution_count":7,"outputs":[{"output_type":"stream","text":["Running on TPU grpc://10.78.217.74:8470\n","INFO:tensorflow:Initializing the TPU system: grpc://10.78.217.74:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.78.217.74:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n","WARNING:absl:`tf.distribute.experimental.TPUStrategy` is deprecated, please use  the non experimental symbol `tf.distribute.TPUStrategy` instead.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Found TPU system:\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Found TPU system:\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Cores: 8\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Cores: 8\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Workers: 1\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Workers: 1\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Cores Per Worker: 8\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Cores Per Worker: 8\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:CPU:0, CPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:CPU:0, CPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:CPU:0, CPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:CPU:0, CPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:0, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:0, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:1, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:1, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:2, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:2, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:3, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:3, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:4, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:4, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:5, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:5, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:6, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:6, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:7, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:7, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU_SYSTEM:0, TPU_SYSTEM, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU_SYSTEM:0, TPU_SYSTEM, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:XLA_CPU:0, XLA_CPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:XLA_CPU:0, XLA_CPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["REPLICAS: 8\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"NK8TAx9JCaOz","papermill":{"duration":0.035404,"end_time":"2021-01-20T22:57:34.088585","exception":false,"start_time":"2021-01-20T22:57:34.053181","status":"completed"},"tags":[]},"source":["# Model parameters"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:34.155750Z","iopub.status.busy":"2021-01-20T22:57:34.154661Z","iopub.status.idle":"2021-01-20T22:57:34.160980Z","shell.execute_reply":"2021-01-20T22:57:34.160280Z"},"papermill":{"duration":0.040682,"end_time":"2021-01-20T22:57:34.161109","exception":false,"start_time":"2021-01-20T22:57:34.120427","status":"completed"},"tags":[],"id":"hyxJUKF-xGQ2","executionInfo":{"status":"ok","timestamp":1611949289916,"user_tz":-540,"elapsed":167630,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["BATCH_SIZE = 8 * REPLICAS\n","LEARNING_RATE = 1e-5 * REPLICAS"],"execution_count":8,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UmwrOwlYCaOz","papermill":{"duration":0.031304,"end_time":"2021-01-20T22:57:34.223728","exception":false,"start_time":"2021-01-20T22:57:34.192424","status":"completed"},"tags":[]},"source":["# Load data"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:34.290296Z","iopub.status.busy":"2021-01-20T22:57:34.289242Z","iopub.status.idle":"2021-01-20T22:57:35.971447Z","shell.execute_reply":"2021-01-20T22:57:35.971977Z"},"id":"UxM4MGNGCaO0","papermill":{"duration":1.717316,"end_time":"2021-01-20T22:57:35.972129","exception":false,"start_time":"2021-01-20T22:57:34.254813","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":238},"executionInfo":{"status":"ok","timestamp":1611949291366,"user_tz":-540,"elapsed":169072,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"7da99699-2731-4495-abdb-250fdfd0c5c9"},"source":["def count_data_items(filenames):\n","    n = [int(re.compile(r'-([0-9]*)\\.').search(filename).group(1)) for filename in filenames]\n","    return np.sum(n)\n","\n","\n","train = pd.read_csv(f'{database_base_path}train.csv')\n","print(f'Train samples: {len(train)}')\n","\n","FILENAMES_2019 = tf.io.gfile.glob(GCS_PATH_EXT + '/*.tfrec')\n","TRAINING_FILENAMES =FILENAMES_2019\n","\n","NUM_TRAINING_IMAGES = count_data_items(TRAINING_FILENAMES)\n","\n","print(f'GCS: train images: {NUM_TRAINING_IMAGES}')\n","display(train.head())\n","\n","CLASSES = ['Cassava Bacterial Blight', \n","           'Cassava Brown Streak Disease', \n","           'Cassava Green Mottle', \n","           'Cassava Mosaic Disease', \n","           'Healthy']"],"execution_count":9,"outputs":[{"output_type":"stream","text":["Train samples: 21397\n","GCS: train images: 4940\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>image_id</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1000015157.jpg</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1000201771.jpg</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>100042118.jpg</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1000723321.jpg</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1000812911.jpg</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         image_id  label\n","0  1000015157.jpg      0\n","1  1000201771.jpg      3\n","2   100042118.jpg      1\n","3  1000723321.jpg      1\n","4  1000812911.jpg      3"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"BZIhYsg_CaO1","papermill":{"duration":0.032803,"end_time":"2021-01-20T22:57:36.037731","exception":false,"start_time":"2021-01-20T22:57:36.004928","status":"completed"},"tags":[]},"source":["# Augmentation"]},{"cell_type":"code","metadata":{"id":"mKcMEWT_9s1P","executionInfo":{"status":"ok","timestamp":1611949291367,"user_tz":-540,"elapsed":169070,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["def data_augment(image, label):\r\n","    p_spatial = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\r\n","    p_rotate = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\r\n","    p_pixel_1 = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\r\n","    p_pixel_2 = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\r\n","    p_pixel_3 = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\r\n","    p_crop = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\r\n","            \r\n","    # Flips\r\n","    image = tf.image.random_flip_left_right(image)\r\n","    image = tf.image.random_flip_up_down(image)\r\n","    if p_spatial > .75:\r\n","        image = tf.image.transpose(image)\r\n","        \r\n","    # Rotates\r\n","    if p_rotate > .75:\r\n","        image = tf.image.rot90(image, k=3) # rotate 270º\r\n","    elif p_rotate > .5:\r\n","        image = tf.image.rot90(image, k=2) # rotate 180º\r\n","    elif p_rotate > .25:\r\n","        image = tf.image.rot90(image, k=1) # rotate 90º\r\n","        \r\n","\r\n","    # Crops\r\n","    if p_crop > .7:\r\n","        crop_size = tf.random.uniform([], int(HEIGHT*.8), HEIGHT, dtype=tf.int32)\r\n","        image = tf.image.random_crop(image, size=[crop_size, crop_size, CHANNELS])\r\n","            \r\n","\r\n","    return image, label"],"execution_count":10,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"r4Hg1nKgCaO1","papermill":{"duration":0.033215,"end_time":"2021-01-20T22:57:36.199741","exception":false,"start_time":"2021-01-20T22:57:36.166526","status":"completed"},"tags":[]},"source":["## Auxiliary functions"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:36.388974Z","iopub.status.busy":"2021-01-20T22:57:36.388107Z","iopub.status.idle":"2021-01-20T22:57:36.415254Z","shell.execute_reply":"2021-01-20T22:57:36.415771Z"},"id":"CPcg0bWECaO1","papermill":{"duration":0.064439,"end_time":"2021-01-20T22:57:36.415960","exception":false,"start_time":"2021-01-20T22:57:36.351521","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1611949291367,"user_tz":-540,"elapsed":169068,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["# Datasets utility functions\n","def decode_image(image_data):\n","    \"\"\"\n","        Decode a JPEG-encoded image to a uint8 tensor.\n","    \"\"\"\n","    image = tf.image.decode_jpeg(image_data, channels=3)\n","    return image\n","\n","def scale_image(image, label):\n","    \"\"\"\n","        Cast tensor to float and normalizes (range between 0 and 1).\n","    \"\"\"\n","    image = tf.cast(image, tf.float32)\n","    image /= 255.0\n","    return image, label\n","\n","def prepare_image(image, label):\n","    \"\"\"\n","        Resize and reshape images to the expected size.\n","    \"\"\"\n","    image = tf.image.resize(image, [HEIGHT_RS, WIDTH_RS])\n","    image = tf.reshape(image, [HEIGHT_RS, WIDTH_RS, 3])\n","    return image, label\n","\n","def read_tfrecord(example, labeled=True):\n","    \"\"\"\n","        1. Parse data based on the 'TFREC_FORMAT' map.\n","        2. Decode image.\n","        3. If 'labeled' returns (image, label) if not (image, name).\n","    \"\"\"\n","    if labeled:\n","        TFREC_FORMAT = {\n","            'image': tf.io.FixedLenFeature([], tf.string), \n","            'target': tf.io.FixedLenFeature([], tf.int64), \n","        }\n","    else:\n","        TFREC_FORMAT = {\n","            'image': tf.io.FixedLenFeature([], tf.string), \n","            'image_name': tf.io.FixedLenFeature([], tf.string), \n","        }\n","    example = tf.io.parse_single_example(example, TFREC_FORMAT)\n","    image = decode_image(example['image'])\n","    if labeled:\n","        label_or_name = tf.cast(example['target'], tf.int32)\n","        # One-Hot Encoding needed to use \"categorical_crossentropy\" loss\n","        label_or_name = tf.one_hot(tf.cast(label_or_name, tf.int32), N_CLASSES)\n","    else:\n","        label_or_name = example['image_name']\n","    return image, label_or_name\n","\n","def get_dataset(FILENAMES, labeled=True, ordered=False, repeated=False, \n","                cached=False, augment=False):\n","    \"\"\"\n","        Return a Tensorflow dataset ready for training or inference.\n","    \"\"\"\n","    ignore_order = tf.data.Options()\n","    if not ordered:\n","        ignore_order.experimental_deterministic = False\n","        dataset = tf.data.Dataset.list_files(FILENAMES)\n","        dataset = dataset.interleave(tf.data.TFRecordDataset, num_parallel_calls=AUTO)\n","    else:\n","        dataset = tf.data.TFRecordDataset(FILENAMES, num_parallel_reads=AUTO)\n","        \n","    dataset = dataset.with_options(ignore_order)\n","    \n","    dataset = dataset.map(lambda x: read_tfrecord(x, labeled=labeled), num_parallel_calls=AUTO)\n","    \n","    if augment:\n","        dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n","        \n","    dataset = dataset.map(scale_image, num_parallel_calls=AUTO)\n","    dataset = dataset.map(prepare_image, num_parallel_calls=AUTO)\n","    \n","    if not ordered:\n","        dataset = dataset.shuffle(2048)\n","    if repeated:\n","        dataset = dataset.repeat()\n","        \n","    dataset = dataset.batch(BATCH_SIZE)\n","    \n","    if cached:\n","        dataset = dataset.cache()\n","    dataset = dataset.prefetch(AUTO)\n","    return dataset\n","\n","def unfreeze_model(model):\n","    # Unfreeze layers while leaving BatchNorm layers frozen\n","    for layer in model.layers:\n","        if not isinstance(layer, L.BatchNormalization):\n","            layer.trainable = True\n","        else:\n","            layer.trainable = False\n","                \n","def unfreeze_block(model, block_name=None, n_top=3):\n","    # Unfreeze layers while leaving BatchNorm layers frozen\n","    for layer in model.layers[:-n_top]:\n","        if isinstance(layer, L.BatchNormalization):\n","            layer.trainable = False\n","        else:\n","            if block_name and (block_name in layer.name):\n","                layer.trainable = True"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:36.487403Z","iopub.status.busy":"2021-01-20T22:57:36.486600Z","iopub.status.idle":"2021-01-20T22:57:36.530480Z","shell.execute_reply":"2021-01-20T22:57:36.531039Z"},"id":"gHAxNOInCaO2","papermill":{"duration":0.081913,"end_time":"2021-01-20T22:57:36.531213","exception":false,"start_time":"2021-01-20T22:57:36.449300","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1611949291578,"user_tz":-540,"elapsed":169277,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["# Visualization utility functions\n","np.set_printoptions(threshold=15, linewidth=80)\n","\n","def batch_to_numpy_images_and_labels(data):\n","    images, labels = data\n","    numpy_images = images.numpy()\n","    numpy_labels = labels.numpy()\n","    if numpy_labels.dtype == object: # binary string in this case, these are image ID strings\n","        numpy_labels = [None for _ in enumerate(numpy_images)]\n","    # If no labels, only image IDs, return None for labels (this is the case for test data)\n","    return numpy_images, numpy_labels\n","\n","def title_from_label_and_target(label, correct_label):\n","    if correct_label is None:\n","        return CLASSES[label], True\n","    correct = (label == correct_label)\n","    return \"{} [{}{}{}]\".format(CLASSES[label], 'OK' if correct else 'NO', u\"\\u2192\" if not correct else '',\n","                                CLASSES[correct_label] if not correct else ''), correct\n","\n","def display_one_flower(image, title, subplot, red=False, titlesize=16):\n","    plt.subplot(*subplot)\n","    plt.axis('off')\n","    plt.imshow(image)\n","    if len(title) > 0:\n","        plt.title(title, fontsize=int(titlesize) if not red else int(titlesize/1.2), color='red' if red else 'black', \n","                  fontdict={'verticalalignment':'center'}, pad=int(titlesize/1.5))\n","    return (subplot[0], subplot[1], subplot[2]+1)\n","\n","def display_batch_of_images(databatch, predictions=None):\n","    \"\"\"This will work with:\n","    display_batch_of_images(images)\n","    display_batch_of_images(images, predictions)\n","    display_batch_of_images((images, labels))\n","    display_batch_of_images((images, labels), predictions)\n","    \"\"\"\n","    # data\n","    images, labels = batch_to_numpy_images_and_labels(databatch)\n","    labels = np.argmax(labels, axis=-1)\n","    if labels is None:\n","        labels = [None for _ in enumerate(images)]\n","        \n","    # auto-squaring: this will drop data that does not fit into square or square-ish rectangle\n","    rows = int(math.sqrt(len(images)))\n","    cols = len(images)//rows\n","        \n","    # size and spacing\n","    FIGSIZE = 13.0\n","    SPACING = 0.1\n","    subplot=(rows,cols,1)\n","    if rows < cols:\n","        plt.figure(figsize=(FIGSIZE,FIGSIZE/cols*rows))\n","    else:\n","        plt.figure(figsize=(FIGSIZE/rows*cols,FIGSIZE))\n","    \n","    # display\n","    for i, (image, label) in enumerate(zip(images[:rows*cols], labels[:rows*cols])):\n","        title = '' if label is None else CLASSES[label]\n","        correct = True\n","        if predictions is not None:\n","            title, correct = title_from_label_and_target(predictions[i], label)\n","        dynamic_titlesize = FIGSIZE*SPACING/max(rows,cols)*40+3 # magic formula tested to work from 1x1 to 10x10 images\n","        subplot = display_one_flower(image, title, subplot, not correct, titlesize=dynamic_titlesize)\n","    \n","    #layout\n","    plt.tight_layout()\n","    if label is None and predictions is None:\n","        plt.subplots_adjust(wspace=0, hspace=0)\n","    else:\n","        plt.subplots_adjust(wspace=SPACING, hspace=SPACING)\n","    plt.show()\n","    \n","# Visualize model predictions\n","def dataset_to_numpy_util(dataset, N):\n","    dataset = dataset.unbatch().batch(N)\n","    for images, labels in dataset:\n","        numpy_images = images.numpy()\n","        numpy_labels = labels.numpy()\n","        break;  \n","    return numpy_images, numpy_labels\n","\n","def title_from_label_and_target(label, correct_label):\n","    label = np.argmax(label, axis=-1)\n","    correct = (label == correct_label)\n","    return \"{} [{}{}{}]\".format(label, str(correct), ', shoud be ' if not correct else '',\n","                                correct_label if not correct else ''), correct\n","\n","def display_one_flower_eval(image, title, subplot, red=False):\n","    plt.subplot(subplot)\n","    plt.axis('off')\n","    plt.imshow(image)\n","    plt.title(title, fontsize=14, color='red' if red else 'black')\n","    return subplot+1\n","\n","def display_9_images_with_predictions(images, predictions, labels):\n","    subplot=331\n","    plt.figure(figsize=(13,13))\n","    for i, image in enumerate(images):\n","        title, correct = title_from_label_and_target(predictions[i], labels[i])\n","        subplot = display_one_flower_eval(image, title, subplot, not correct)\n","        if i >= 8:\n","            break;\n","              \n","    plt.tight_layout()\n","    plt.subplots_adjust(wspace=0.1, hspace=0.1)\n","    plt.show()\n","\n","\n","# Model evaluation\n","def plot_metrics(history):\n","    fig, axes = plt.subplots(2, 1, sharex='col', figsize=(20, 8))\n","    axes = axes.flatten()\n","    \n","    axes[0].plot(history['loss'], label='Train loss')\n","    axes[0].plot(history['val_loss'], label='Validation loss')\n","    axes[0].legend(loc='best', fontsize=16)\n","    axes[0].set_title('Loss')\n","    axes[0].axvline(np.argmin(history['loss']), linestyle='dashed')\n","    axes[0].axvline(np.argmin(history['val_loss']), linestyle='dashed', color='orange')\n","    \n","    axes[1].plot(history['accuracy'], label='Train accuracy')\n","    axes[1].plot(history['val_accuracy'], label='Validation accuracy')\n","    axes[1].legend(loc='best', fontsize=16)\n","    axes[1].set_title('Accuracy')\n","    axes[1].axvline(np.argmax(history['accuracy']), linestyle='dashed')\n","    axes[1].axvline(np.argmax(history['val_accuracy']), linestyle='dashed', color='orange')\n","\n","    plt.xlabel('Epochs', fontsize=16)\n","    sns.despine()\n","    plt.show()"],"execution_count":12,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oCtCB3WdCaO2","papermill":{"duration":0.033127,"end_time":"2021-01-20T22:57:36.597612","exception":false,"start_time":"2021-01-20T22:57:36.564485","status":"completed"},"tags":[]},"source":["# Training data samples (with augmentation)"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:36.667226Z","iopub.status.busy":"2021-01-20T22:57:36.666549Z","iopub.status.idle":"2021-01-20T22:57:52.204000Z","shell.execute_reply":"2021-01-20T22:57:52.204539Z"},"id":"p8IMzXLRCaO2","papermill":{"duration":15.574028,"end_time":"2021-01-20T22:57:52.204708","exception":false,"start_time":"2021-01-20T22:57:36.630680","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"18LCY4Ny6babPofbnVnLToafhxutOZ5Pc"},"executionInfo":{"status":"ok","timestamp":1611949302618,"user_tz":-540,"elapsed":180310,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"b31747c3-6017-4d90-a67a-72cc1d1b4bc9"},"source":["train_dataset = get_dataset(FILENAMES_2019, ordered=True, augment=True)\n","train_iter = iter(train_dataset.unbatch().batch(20))\n","\n","display_batch_of_images(next(train_iter))\n","display_batch_of_images(next(train_iter))"],"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"gfrU-uCiCaO3","papermill":{"duration":0.115332,"end_time":"2021-01-20T22:57:52.436099","exception":false,"start_time":"2021-01-20T22:57:52.320767","status":"completed"},"tags":[]},"source":["## Datasets distribution\n","\n","### Competition data"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:52.660179Z","iopub.status.busy":"2021-01-20T22:57:52.659360Z","iopub.status.idle":"2021-01-20T22:59:14.164307Z","shell.execute_reply":"2021-01-20T22:59:14.165290Z"},"id":"WJywiXKHCaO4","papermill":{"duration":81.617644,"end_time":"2021-01-20T22:59:14.165495","exception":false,"start_time":"2021-01-20T22:57:52.547851","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":502},"executionInfo":{"status":"ok","timestamp":1611949322644,"user_tz":-540,"elapsed":200333,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"1d9f9502-ea6e-4c64-9360-58ce3db8fa9b"},"source":["ds_comp = get_dataset(FILENAMES_2019)\n","labels_comp = [target.numpy() for img, target in iter(ds_comp.unbatch())]\n","labels_comp = np.argmax(labels_comp, axis=-1)\n","\n","fig, ax = plt.subplots(1, 1, figsize=(18, 8))\n","ax = sns.countplot(y=labels_comp, palette='viridis')\n","ax.tick_params(labelsize=16)\n","\n","plt.show()"],"execution_count":14,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1296x576 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"HvXRzhofCaO5","papermill":{"duration":0.112509,"end_time":"2021-01-20T23:02:43.580615","exception":false,"start_time":"2021-01-20T23:02:43.468106","status":"completed"},"tags":[]},"source":["### Learning rate schedule\n","\n","We are going to use a `cosine learning rate schedule with a warm-up phase`, this may be a good idea since we are using a pre-trained model, the warm-up phase will be useful to avoid the pre-trained weights degradation resulting in catastrophic forgetting, during the schedule the learning rate will slowly decrease to very low values, this helps the model to land on more stable weights."]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:02:43.808753Z","iopub.status.busy":"2021-01-20T23:02:43.807680Z","iopub.status.idle":"2021-01-20T23:02:47.940826Z","shell.execute_reply":"2021-01-20T23:02:47.939748Z"},"id":"I9cuJCl1CaO5","papermill":{"duration":4.248898,"end_time":"2021-01-20T23:02:47.940988","exception":false,"start_time":"2021-01-20T23:02:43.692090","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":422},"executionInfo":{"status":"ok","timestamp":1611949327587,"user_tz":-540,"elapsed":205274,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"92b5ae33-70c4-442e-8fc9-b443df076e8d"},"source":["lr_start = 1e-8\n","lr_min = 1e-8\n","lr_max = LEARNING_RATE\n","num_cycles = 1.\n","warmup_epochs = 1\n","hold_max_epochs = 0\n","total_epochs = EPOCHS\n","warmup_steps = warmup_epochs * (NUM_TRAINING_IMAGES//BATCH_SIZE)\n","total_steps = total_epochs * (NUM_TRAINING_IMAGES//BATCH_SIZE)\n","\n","@tf.function\n","def lrfn(step):\n","    if step < warmup_steps:\n","        lr = (lr_max - lr_start) / warmup_steps * step + lr_start\n","    else:\n","        progress = (step - warmup_steps) / (total_steps - warmup_steps)\n","        lr = lr_max * (0.5 * (1.0 + tf.math.cos(np.pi * ((num_cycles * progress) % 1.0))))\n","        if lr_min is not None:\n","            lr = tf.math.maximum(lr_min, float(lr))\n","\n","    return lr\n","\n","\n","# rng = [i for i in range(total_epochs)]\n","rng = [i for i in range(total_steps)]\n","y = [lrfn(tf.cast(x, tf.float32)) for x in rng]\n","\n","sns.set(style='whitegrid')\n","fig, ax = plt.subplots(figsize=(20, 6))\n","plt.plot(rng, y)\n","\n","print(f'{total_steps} total steps and {NUM_TRAINING_IMAGES//BATCH_SIZE} steps per epoch')\n","print(f'Learning rate schedule: {y[0]:.3g} to {max(y):.3g} to {y[-1]:.3g}')"],"execution_count":15,"outputs":[{"output_type":"stream","text":["770 total steps and 77 steps per epoch\n","Learning rate schedule: 1e-08 to 8e-05 to 1e-08\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x432 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"OMIrA5jxCaO5","papermill":{"duration":0.112158,"end_time":"2021-01-20T23:02:48.166235","exception":false,"start_time":"2021-01-20T23:02:48.054077","status":"completed"},"tags":[]},"source":["# Model"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:02:48.402810Z","iopub.status.busy":"2021-01-20T23:02:48.402111Z","iopub.status.idle":"2021-01-20T23:02:48.406439Z","shell.execute_reply":"2021-01-20T23:02:48.405740Z"},"id":"pRksD6K6CaO5","papermill":{"duration":0.126526,"end_time":"2021-01-20T23:02:48.406566","exception":false,"start_time":"2021-01-20T23:02:48.280040","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1611949461477,"user_tz":-540,"elapsed":678,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["from tensorflow.keras.applications import ResNet101\n","def model_fn(input_shape, N_CLASSES):\n","    inputs = L.Input(shape=input_shape, name='input_image')\n","    base_model = ResNet101(input_tensor=inputs, \n","                                    include_top=False, \n","                                    weights='imagenet', \n","                                    pooling='avg')\n","    base_model.trainable = False\n","    x = L.Dropout(.5)(base_model.output)\n","    output = L.Dense(N_CLASSES, activation='softmax', name='output')(x)\n","    model = Model(inputs=inputs, outputs=output)\n","\n","    return model"],"execution_count":19,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:02:48.640007Z","iopub.status.busy":"2021-01-20T23:02:48.638735Z","iopub.status.idle":"2021-01-20T23:02:48.642985Z","shell.execute_reply":"2021-01-20T23:02:48.643690Z"},"id":"4zl0qy-pcR-A","papermill":{"duration":0.122772,"end_time":"2021-01-20T23:02:48.643846","exception":false,"start_time":"2021-01-20T23:02:48.521074","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1611949327589,"user_tz":-540,"elapsed":205268,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["#help(strategy)"],"execution_count":17,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hMc0tk0VCaO5","papermill":{"duration":0.114465,"end_time":"2021-01-20T23:02:48.871581","exception":false,"start_time":"2021-01-20T23:02:48.757116","status":"completed"},"tags":[]},"source":["# Training"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:02:49.104256Z","iopub.status.busy":"2021-01-20T23:02:49.103030Z","iopub.status.idle":"2021-01-20T23:41:32.330134Z","shell.execute_reply":"2021-01-20T23:41:32.329366Z"},"id":"8HrFGFRNCaO5","papermill":{"duration":2323.344808,"end_time":"2021-01-20T23:41:32.330270","exception":false,"start_time":"2021-01-20T23:02:48.985462","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":566},"executionInfo":{"status":"error","timestamp":1611949480276,"user_tz":-540,"elapsed":14236,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"cbc40ffb-3673-47e7-9ff8-a059f60b7ca6"},"source":["skf = KFold(n_splits=N_FOLDS, shuffle=True, random_state=seed)\n","oof_pred = []; oof_labels = []; history_list = []\n","\n","for fold,(idxT, idxV) in enumerate(skf.split(np.arange(50))):\n","    if fold >= FOLDS_USED:\n","        break\n","    if tpu: tf.tpu.experimental.initialize_tpu_system(tpu)\n","    K.clear_session()\n","    print(f'\\nFOLD: {fold+1}')\n","    print(f'TRAIN: {idxT} VALID: {idxV}')\n","\n","    # Create train and validation sets\n","    FILENAMES_2019 = tf.io.gfile.glob([GCS_PATH_EXT + '/Id_train%.2i*.tfrec' % x for x in idxT])\n","    TRAIN_FILENAMES = FILENAMES_2019\n","    \n","    VALID_FILENAMES = tf.io.gfile.glob([GCS_PATH + '/Id_train%.2i*.tfrec' % x for x in idxV])\n","    np.random.shuffle(TRAIN_FILENAMES)\n","    \n","    ct_train = count_data_items(TRAIN_FILENAMES)\n","    ct_valid = count_data_items(VALID_FILENAMES)\n","    \n","    step_size = (ct_train // BATCH_SIZE)\n","    valid_step_size = (ct_valid // BATCH_SIZE)\n","    total_steps=(total_epochs * step_size)\n","    warmup_steps=(warmup_epochs * step_size)\n","    \n","    \n","    # Build TF datasets\n","    train_ds = strategy.experimental_distribute_dataset(get_dataset(TRAIN_FILENAMES, repeated=True, augment=True))\n","    valid_ds = strategy.experimental_distribute_dataset(get_dataset(VALID_FILENAMES, ordered=True, repeated=True, cached=True))\n","    train_data_iter = iter(train_ds)\n","    valid_data_iter = iter(valid_ds)\n","    \n","    \n","    # Step functions\n","    @tf.function\n","    def train_step(data_iter):\n","        def train_step_fn(x, y):\n","            with tf.GradientTape() as tape:\n","                probabilities = model(x, training=True)\n","                loss = loss_fn(y, probabilities, label_smoothing=.3)\n","            gradients = tape.gradient(loss, model.trainable_variables)\n","            optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n","            # update metrics\n","            train_accuracy.update_state(y, probabilities)\n","            train_loss.update_state(loss)\n","        for _ in tf.range(step_size):\n","            if COLAB:\n","                #print(COLAB)\n","                strategy.experimental_run_v2(train_step_fn, next(data_iter))\n","            else:\n","                strategy.experimental_run_v2(train_step_fn, next(data_iter))\n","\n","    @tf.function\n","    def valid_step(data_iter):\n","        def valid_step_fn(x, y):\n","            probabilities = model(x, training=False)\n","            loss = loss_fn(y, probabilities)\n","            # update metrics\n","            valid_accuracy.update_state(y, probabilities)\n","            valid_loss.update_state(loss)\n","        for _ in tf.range(valid_step_size):\n","            if COLAB:\n","                strategy.experimental_run_v2(valid_step_fn, next(data_iter))\n","            else:\n","                strategy.experimental_run_v2(valid_step_fn, next(data_iter))\n","    \n","    \n","    # Model\n","    model_path = models_path+f'model_{fold}.h5'\n","    with strategy.scope():\n","        model = model_fn((None, None, CHANNELS), N_CLASSES)\n","        unfreeze_model(model) # unfreeze all layers except \"batch normalization\"\n","        \n","        optimizer = optimizers.Adam(learning_rate=lambda: lrfn(tf.cast(optimizer.iterations, tf.float32)))\n","        loss_fn = losses.categorical_crossentropy\n","\n","        train_accuracy = metrics.CategoricalAccuracy()\n","        valid_accuracy = metrics.CategoricalAccuracy()\n","        train_loss = metrics.Sum()\n","        valid_loss = metrics.Sum()\n","    \n","    \n","    # Setup training loop\n","    step = 0\n","    epoch_steps = 0\n","    patience_cnt = 0\n","    best_val = 0\n","    history = {'loss': [], 'val_loss': [], 'accuracy': [], 'val_accuracy': []}\n","\n","    ### Train model\n","    for epoch in range(EPOCHS):\n","        epoch_start_time = time.time()\n","\n","        # Run training step\n","        train_step(train_data_iter)\n","        epoch_steps += step_size\n","        step += step_size\n","            \n","\n","        # Validation run at the end of each epoch\n","        if (step // step_size) > epoch:\n","            # Validation run\n","            valid_epoch_steps = 0\n","            valid_step(valid_data_iter)\n","            valid_epoch_steps += valid_step_size\n","\n","            # Compute metrics\n","            history['accuracy'].append(train_accuracy.result().numpy())\n","            history['loss'].append(train_loss.result().numpy() / (BATCH_SIZE * epoch_steps))\n","            history['val_accuracy'].append(valid_accuracy.result().numpy())\n","            history['val_loss'].append(valid_loss.result().numpy() / (BATCH_SIZE * valid_epoch_steps))\n","\n","            # Report metrics\n","            epoch_time = time.time() - epoch_start_time\n","            print(f'\\nEPOCH {epoch+1}/{EPOCHS}')\n","            print(f'time: {epoch_time:0.1f}s',\n","                  f\"loss: {history['loss'][-1]:0.4f}\",\n","                  f\"accuracy: {history['accuracy'][-1]:0.4f}\",\n","                  f\"val_loss: {history['val_loss'][-1]:0.4f}\",\n","                  f\"val_accuracy: {history['val_accuracy'][-1]:0.4f}\",\n","                  f'lr: {lrfn(tf.cast(optimizer.iterations, tf.int32).numpy()):0.4g}')\n","\n","            # Early stopping monitor\n","            if history['val_accuracy'][-1] >= best_val:\n","                best_val = history['val_accuracy'][-1]\n","                model.save_weights(model_path)\n","                print(f'Saved model weights at \"{model_path}\"')\n","                patience_cnt = 1\n","            else:\n","                patience_cnt += 1\n","            # if patience_cnt > ES_PATIENCE:\n","            #     print(f'Epoch {epoch:05d}: early stopping')\n","            #     break\n","\n","                \n","            # Set up next epoch\n","            epoch = step // step_size\n","            epoch_steps = 0\n","            train_accuracy.reset_states()\n","            train_loss.reset_states()\n","            valid_accuracy.reset_states()\n","            valid_loss.reset_states()\n","    \n","    \n","    ### RESULTS\n","    print(f\"#### FOLD {fold+1} OOF Accuracy = {np.max(history['val_accuracy']):.3f}\")\n","    \n","    history_list.append(history)\n","    # Load best model weights\n","    model.load_weights(model_path)\n","\n","    # OOF predictions\n","    ds_valid = get_dataset(VALID_FILENAMES, ordered=True)\n","    oof_labels.append([target.numpy() for img, target in iter(ds_valid.unbatch())])\n","    x_oof = ds_valid.map(lambda image, target: image)\n","    oof_pred.append(np.argmax(model.predict(x_oof), axis=-1))"],"execution_count":20,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.78.217.74:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.78.217.74:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.78.217.74:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.78.217.74:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","FOLD: 1\n","TRAIN: [ 0  1  3 ... 47 48 49] VALID: [ 2  4 10 11 22 27 28 31 38 41]\n"],"name":"stdout"},{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-20-8ef79b92d723>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     70\u001b[0m     \u001b[0mmodel_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodels_path\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34mf'model_{fold}.h5'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     71\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mstrategy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscope\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 72\u001b[0;31m         \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mCHANNELS\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mN_CLASSES\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     73\u001b[0m         \u001b[0munfreeze_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# unfreeze all layers except \"batch normalization\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-19-88936ad43bec>\u001b[0m in \u001b[0;36mmodel_fn\u001b[0;34m(input_shape, N_CLASSES)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapplications\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mResNet101\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmodel_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_shape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mN_CLASSES\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m     \u001b[0minputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mL\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mInput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minput_shape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'input_image'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m     \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mSeparableConv2D\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilters\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m128\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkernel_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstrides\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdepth_multiplier\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     base_model = ResNet101(input_tensor=x, \n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/input_layer.py\u001b[0m in \u001b[0;36mInput\u001b[0;34m(shape, batch_size, name, dtype, sparse, tensor, ragged, **kwargs)\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/utils/version_utils.py\u001b[0m in \u001b[0;36m__new__\u001b[0;34m(cls, *args, **kwargs)\u001b[0m\n\u001b[1;32m     63\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mcls\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mcls\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 65\u001b[0;31m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     66\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mcls\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mv2_cls\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv1_cls\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0meager_enabled\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/utils/generic_utils.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, item)\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/utils/generic_utils.py\u001b[0m in \u001b[0;36m_load\u001b[0;34m(self)\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/importlib/__init__.py\u001b[0m in \u001b[0;36mimport_module\u001b[0;34m(name, package)\u001b[0m\n\u001b[1;32m    124\u001b[0m                 \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    125\u001b[0m             \u001b[0mlevel\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 126\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_bootstrap\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_gcd_import\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpackage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    127\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    128\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/importlib/_bootstrap.py\u001b[0m in \u001b[0;36m_gcd_import\u001b[0;34m(name, package, level)\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/importlib/_bootstrap.py\u001b[0m in \u001b[0;36m_find_and_load\u001b[0;34m(name, import_)\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/importlib/_bootstrap.py\u001b[0m in \u001b[0;36m_find_and_load_unlocked\u001b[0;34m(name, import_)\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/importlib/_bootstrap.py\u001b[0m in \u001b[0;36m_load_unlocked\u001b[0;34m(spec)\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/importlib/_bootstrap_external.py\u001b[0m in \u001b[0;36mexec_module\u001b[0;34m(self, module)\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/importlib/_bootstrap.py\u001b[0m in \u001b[0;36m_call_with_frames_removed\u001b[0;34m(f, *args, **kwds)\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer_v1.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     47\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0minput_spec\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     48\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnode\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnode_module\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 49\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmixed_precision\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mautocast_variable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     50\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmixed_precision\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mloss_scale_optimizer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmixed_precision\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpolicy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/mixed_precision/experimental/autocast_variable.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    418\u001b[0m ops.register_tensor_conversion_function(AutoCastVariable,\n\u001b[1;32m    419\u001b[0m                                         AutoCastVariable._dense_var_to_tensor)  # pylint:disable=protected-access\n\u001b[0;32m--> 420\u001b[0;31m \u001b[0mops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mregister_dense_tensor_like_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mAutoCastVariable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    421\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    422\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: module 'tensorflow.python.framework.ops' has no attribute 'register_dense_tensor_like_type'"]}]},{"cell_type":"markdown","metadata":{"id":"NQyHtXnRCaO5","papermill":{"duration":0.130935,"end_time":"2021-01-20T23:41:32.592224","exception":false,"start_time":"2021-01-20T23:41:32.461289","status":"completed"},"tags":[]},"source":["## Model loss graph"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:41:32.862698Z","iopub.status.busy":"2021-01-20T23:41:32.861475Z","iopub.status.idle":"2021-01-20T23:41:35.936240Z","shell.execute_reply":"2021-01-20T23:41:35.935506Z"},"id":"_7pUdch3CaO6","papermill":{"duration":3.212527,"end_time":"2021-01-20T23:41:35.936368","exception":false,"start_time":"2021-01-20T23:41:32.723841","status":"completed"},"tags":[],"executionInfo":{"status":"aborted","timestamp":1611949345271,"user_tz":-540,"elapsed":222946,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["for fold, history in enumerate(history_list):\n","    print(f'\\nFOLD: {fold+1}')\n","    plot_metrics(history)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ImheYrtKCaO7","papermill":{"duration":0.140565,"end_time":"2021-01-20T23:41:36.235070","exception":false,"start_time":"2021-01-20T23:41:36.094505","status":"completed"},"tags":[]},"source":["# Model evaluation\n","\n","Now we can evaluate the performance of the model, first, we can evaluate the usual metrics like, `accuracy`, `precision`, `recall`, and `f1-score`, `scikit-learn` provides the perfect function for this `classification_report`.\n","\n","We are evaluating the model on the `OOF` predictions, it stands for `Out Of Fold`, since we are training using `K-Fold` our model will see all the data, and the correct way to evaluate each fold is by looking at the predictions that are not from that fold.\n","\n","## OOF metrics"]},{"cell_type":"markdown","metadata":{"id":"I_QvO8rPCaO7","papermill":{"duration":0.142773,"end_time":"2021-01-20T23:41:36.524904","exception":false,"start_time":"2021-01-20T23:41:36.382131","status":"completed"},"tags":[]},"source":["#### I am still having some problems to get the real model `OOF` scores while using `TPU Pods`, so the results here and the confusion matrix are just placeholders."]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:41:36.817847Z","iopub.status.busy":"2021-01-20T23:41:36.816550Z","iopub.status.idle":"2021-01-20T23:41:36.871365Z","shell.execute_reply":"2021-01-20T23:41:36.870279Z"},"id":"q7TfhkICCaO7","papermill":{"duration":0.205034,"end_time":"2021-01-20T23:41:36.871548","exception":false,"start_time":"2021-01-20T23:41:36.666514","status":"completed"},"tags":[],"executionInfo":{"status":"aborted","timestamp":1611949345272,"user_tz":-540,"elapsed":222944,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["y_true = np.concatenate(oof_labels)\n","y_true = np.argmax(y_true, axis=-1)\n","y_pred = np.concatenate(oof_pred)\n","\n","print(classification_report(y_true, y_pred, target_names=CLASSES))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pIAJafCnCaO7","papermill":{"duration":0.1407,"end_time":"2021-01-20T23:41:37.153525","exception":false,"start_time":"2021-01-20T23:41:37.012825","status":"completed"},"tags":[]},"source":["# Confusion matrix\n","\n","Let's also take a look at the confusion matrix, this will give us an idea about what classes the model is mixing or having a hard time."]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:41:37.451948Z","iopub.status.busy":"2021-01-20T23:41:37.451220Z","iopub.status.idle":"2021-01-20T23:41:37.902193Z","shell.execute_reply":"2021-01-20T23:41:37.902770Z"},"id":"dw2F8Wk2CaO7","papermill":{"duration":0.608362,"end_time":"2021-01-20T23:41:37.902957","exception":false,"start_time":"2021-01-20T23:41:37.294595","status":"completed"},"tags":[],"executionInfo":{"status":"aborted","timestamp":1611949345273,"user_tz":-540,"elapsed":222943,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["fig, ax = plt.subplots(1, 1, figsize=(20, 12))\n","cfn_matrix = confusion_matrix(y_true, y_pred, labels=range(len(CLASSES)))\n","cfn_matrix = (cfn_matrix.T / cfn_matrix.sum(axis=1)).T\n","df_cm = pd.DataFrame(cfn_matrix, index=CLASSES, columns=CLASSES)\n","ax = sns.heatmap(df_cm, cmap='Blues', annot=True, fmt='.2f', linewidths=.5).set_title('Train', fontsize=30)\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AaZVX_ZhCaO7","papermill":{"duration":0.14275,"end_time":"2021-01-20T23:41:38.189478","exception":false,"start_time":"2021-01-20T23:41:38.046728","status":"completed"},"tags":[]},"source":["# Visualize predictions\n","\n","Finally, it is a good practice to always inspect some of the model's prediction by looking at the data, this can give an idea if the model is getting some predictions wrong because the data is really hard, of if it is because the model is actually bad.\n","\n","\n","### Class map\n","```\n","0: Cassava Bacterial Blight (CBB)\n","1: Cassava Brown Streak Disease (CBSD)\n","2: Cassava Green Mottle (CGM)\n","3: Cassava Mosaic Disease (CMD)\n","4: Healthy\n","```\n","\n","\n","## Train set"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:41:38.486711Z","iopub.status.busy":"2021-01-20T23:41:38.478610Z","iopub.status.idle":"2021-01-20T23:42:07.973278Z","shell.execute_reply":"2021-01-20T23:42:07.973946Z"},"id":"ExEWWtxyCaO8","papermill":{"duration":29.642469,"end_time":"2021-01-20T23:42:07.974121","exception":false,"start_time":"2021-01-20T23:41:38.331652","status":"completed"},"tags":[],"executionInfo":{"status":"aborted","timestamp":1611949345273,"user_tz":-540,"elapsed":222941,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["train_dataset = get_dataset(TRAINING_FILENAMES, ordered=True)\n","x_samp, y_samp = dataset_to_numpy_util(train_dataset, 18)\n","y_samp = np.argmax(y_samp, axis=-1)\n","\n","x_samp_1, y_samp_1 = x_samp[:9,:,:,:], y_samp[:9]\n","samp_preds_1 = model.predict(x_samp_1, batch_size=9)\n","display_9_images_with_predictions(x_samp_1, samp_preds_1, y_samp_1)\n","\n","x_samp_2, y_samp_2 = x_samp[9:,:,:,:], y_samp[9:]\n","samp_preds_2 = model.predict(x_samp_2, batch_size=9)\n","display_9_images_with_predictions(x_samp_2, samp_preds_2, y_samp_2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:42:08.485006Z","iopub.status.busy":"2021-01-20T23:42:08.479584Z","iopub.status.idle":"2021-01-20T23:42:08.490084Z","shell.execute_reply":"2021-01-20T23:42:08.489432Z"},"id":"h9CeTJAYKYQd","papermill":{"duration":0.271568,"end_time":"2021-01-20T23:42:08.490212","exception":false,"start_time":"2021-01-20T23:42:08.218644","status":"completed"},"tags":[],"executionInfo":{"status":"aborted","timestamp":1611949345274,"user_tz":-540,"elapsed":222940,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["\n","save_data=True# You can immediately create a kaggle dataset from your models\n","if COLAB and save_data:\n","  \n","    import json\n","\n","\n","    \n","    data = {\"title\": \"Cassava Leaf Disease\", \n","        \"id\": \"aikhmelnytskyy/CassavaLeafDisease\", \n","        \"licenses\": [\n","                     {\n","                         \"name\": \"CC0-1.0\"\n","                      }\n","                     ]}\n","    \n","\n","    # for kaggle api Connection\n","    \n","    !kaggle datasets init -p /content/drive/MyDrive/Colab Notebooks/Cassava/\n","    \n","    with open(\"/content/drive/MyDrive/Colab Notebooks/Cassava/dataset-metadata.json\", \"w\", encoding=\"utf-8\") as file:\n","        json.dump(data, file)\n","    \n","    #if new dataset\n","    !kaggle datasets create -p /content/drive/MyDrive/Models/Cassava/\n","    #If you’d like to upload a new version of an existing dataset\n","    #!kaggle datasets version -p /content/drive/MyDrive/Models/Cassava/ -m \"Your message here\""],"execution_count":null,"outputs":[]}]}