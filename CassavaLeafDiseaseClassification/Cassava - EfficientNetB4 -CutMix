{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.6"},"papermill":{"duration":2705.650201,"end_time":"2021-01-20T23:42:08.938285","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2021-01-20T22:57:03.288084","version":"2.1.0"},"colab":{"name":"Cassava - EfficientNetB4 -CutMix","provenance":[{"file_id":"1k3GJEDIw5B9smNhmCO9z5wJn0_fz7V6e","timestamp":1612277194772},{"file_id":"1luIn2wZfy_fopw5CZhO7tSwz3QfPBeu0","timestamp":1611649047226},{"file_id":"14lxnkhkxhL-leLaM7_ewQrCSbDr617ZZ","timestamp":1611576808109}],"collapsed_sections":[]},"accelerator":"TPU"},"cells":[{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:08.648534Z","iopub.status.busy":"2021-01-20T22:57:08.647654Z","iopub.status.idle":"2021-01-20T22:57:08.650554Z","shell.execute_reply":"2021-01-20T22:57:08.651069Z"},"papermill":{"duration":0.038327,"end_time":"2021-01-20T22:57:08.651252","exception":false,"start_time":"2021-01-20T22:57:08.612925","status":"completed"},"tags":[],"id":"BkVGwREBxGQy","executionInfo":{"status":"ok","timestamp":1612535972678,"user_tz":-540,"elapsed":550,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["EPOCHS = 10 \n","HEIGHT = 512\n","WIDTH = 512\n","HEIGHT_RS = 512\n","WIDTH_RS = 512\n","CHANNELS = 3\n","N_CLASSES = 5\n","N_FOLDS = 5\n","FOLDS_USED = 5\n","ES_PATIENCE = 5\n","IMAGE_SIZE = [512, 512]"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:08.738880Z","iopub.status.busy":"2021-01-20T22:57:08.723182Z","iopub.status.idle":"2021-01-20T22:57:11.217685Z","shell.execute_reply":"2021-01-20T22:57:11.216355Z"},"id":"YZBauHrJCkn7","papermill":{"duration":2.537229,"end_time":"2021-01-20T22:57:11.217823","exception":false,"start_time":"2021-01-20T22:57:08.680594","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1612536023021,"user_tz":-540,"elapsed":50880,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"2a908f1d-d863-4211-d43c-0e8c896ef41f"},"source":["\n","import os\n","\n","models_path=''\n","\n","COLAB=True\n","import gc\n","!pip install fsspec\n","!pip install gcsfs \n","!pip install --upgrade --force-reinstall --no-deps kaggle\n","\n","from google.colab import drive\n","drive.mount('/content/drive')\n","%cd '/content/drive/MyDrive/Colab Notebooks/Cassava/'\n","\n","#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n","\n","database_base_path = 'gs://kds-3a224514a454fd9aa3d169e4b992b270639f50cb2562afc9a7f30028'\n","GCS_PATH = 'gs://kds-a33ea63a0187bf87befa27375d0c134d3665e67103650037d2bc3d7b'\n","GCS_PATH_EXT = 'gs://kds-4120eec9cd6798f480e90ac3bb394c3ff8e3d53dd23edafd22d4cfd1'\n","GCS_PATH_CLASSES = 'gs://kds-25c6d14b0e36e7e55edee93ff9061600cbdbbcb41cfc0c8e18fcfa3c'\n","GCS_PATH_EXT_CLASSES = 'gs://kds-4b1d06a3c0667a4dc01796a2a77528254cba432600437afba06a243e'\n","\n","\n","\n","# \n","#This is a path to a dataset that changes over time, so you need to constantly update it. To update the path just run the code: \n","#GCS_DS_PATH = KaggleDatasets (). Get_gcs_path ()\n","#print (GCS_PATH)......\n","models_path='/content/drive/MyDrive/Colab Notebooks/Cassava/model/'# I created a folder called Models/Cassava on my Google Drive"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Collecting fsspec\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/ec/80/72ac0982cc833945fada4b76c52f0f65435ba4d53bc9317d1c70b5f7e7d5/fsspec-0.8.5-py3-none-any.whl (98kB)\n","\u001b[K     |████████████████████████████████| 102kB 4.4MB/s \n","\u001b[?25hInstalling collected packages: fsspec\n","Successfully installed fsspec-0.8.5\n","Collecting gcsfs\n","  Downloading https://files.pythonhosted.org/packages/85/75/3d669945d41e5aedd5c4333b9dc6192b7839d2bafd04b75b8222d4e92ae0/gcsfs-0.7.1-py2.py3-none-any.whl\n","Requirement already satisfied: fsspec>=0.8.0 in /usr/local/lib/python3.6/dist-packages (from gcsfs) (0.8.5)\n","Requirement already satisfied: google-auth-oauthlib in /usr/local/lib/python3.6/dist-packages (from gcsfs) (0.4.2)\n","Requirement already satisfied: decorator in /usr/local/lib/python3.6/dist-packages (from gcsfs) (4.4.2)\n","Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from gcsfs) (2.23.0)\n","Collecting aiohttp\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/ad/e6/d4b6235d776c9b33f853e603efede5aac5a34f71ca9d3877adb30492eb4e/aiohttp-3.7.3-cp36-cp36m-manylinux2014_x86_64.whl (1.3MB)\n","\u001b[K     |████████████████████████████████| 1.3MB 7.4MB/s \n","\u001b[?25hRequirement already satisfied: google-auth>=1.2 in /usr/local/lib/python3.6/dist-packages (from gcsfs) (1.24.0)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.6/dist-packages (from google-auth-oauthlib->gcsfs) (1.3.0)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->gcsfs) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests->gcsfs) (2020.12.5)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests->gcsfs) (1.24.3)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->gcsfs) (3.0.4)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.6/dist-packages (from aiohttp->gcsfs) (20.3.0)\n","Collecting multidict<7.0,>=4.5\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/a1/35/b22524d6b9cacfb4c5eff413a069bbc17c6ea628e54da5c6c989998ced5f/multidict-5.1.0-cp36-cp36m-manylinux2014_x86_64.whl (141kB)\n","\u001b[K     |████████████████████████████████| 143kB 20.9MB/s \n","\u001b[?25hCollecting yarl<2.0,>=1.0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/da/08/52b26b44bce7b818b410aee37c5e424c9ea420c557bca97dc2adac29b151/yarl-1.6.3-cp36-cp36m-manylinux2014_x86_64.whl (293kB)\n","\u001b[K     |████████████████████████████████| 296kB 21.7MB/s \n","\u001b[?25hRequirement already satisfied: typing-extensions>=3.6.5 in /usr/local/lib/python3.6/dist-packages (from aiohttp->gcsfs) (3.7.4.3)\n","Collecting idna-ssl>=1.0; python_version < \"3.7\"\n","  Downloading https://files.pythonhosted.org/packages/46/03/07c4894aae38b0de52b52586b24bf189bb83e4ddabfe2e2c8f2419eec6f4/idna-ssl-1.1.0.tar.gz\n","Collecting async-timeout<4.0,>=3.0\n","  Downloading https://files.pythonhosted.org/packages/e1/1e/5a4441be21b0726c4464f3f23c8b19628372f606755a9d2e46c187e65ec4/async_timeout-3.0.1-py3-none-any.whl\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.2->gcsfs) (0.2.8)\n","Requirement already satisfied: cachetools<5.0,>=2.0.0 in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.2->gcsfs) (4.2.1)\n","Requirement already satisfied: rsa<5,>=3.1.4; python_version >= \"3.6\" in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.2->gcsfs) (4.7)\n","Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.2->gcsfs) (1.15.0)\n","Requirement already satisfied: setuptools>=40.3.0 in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.2->gcsfs) (53.0.0)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.6/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib->gcsfs) (3.1.0)\n","Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.6/dist-packages (from pyasn1-modules>=0.2.1->google-auth>=1.2->gcsfs) (0.4.8)\n","Building wheels for collected packages: idna-ssl\n","  Building wheel for idna-ssl (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for idna-ssl: filename=idna_ssl-1.1.0-cp36-none-any.whl size=3163 sha256=74a3369dc317670feb71479e784a652d326d61da9da61bf402d1a6973feb7260\n","  Stored in directory: /root/.cache/pip/wheels/d3/00/b3/32d613e19e08a739751dd6bf998cfed277728f8b2127ad4eb7\n","Successfully built idna-ssl\n","Installing collected packages: multidict, yarl, idna-ssl, async-timeout, aiohttp, gcsfs\n","Successfully installed aiohttp-3.7.3 async-timeout-3.0.1 gcsfs-0.7.1 idna-ssl-1.1.0 multidict-5.1.0 yarl-1.6.3\n","Collecting kaggle\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/99/33/365c0d13f07a2a54744d027fe20b60dacdfdfb33bc04746db6ad0b79340b/kaggle-1.5.10.tar.gz (59kB)\n","\u001b[K     |████████████████████████████████| 61kB 3.4MB/s \n","\u001b[?25hBuilding wheels for collected packages: kaggle\n","  Building wheel for kaggle (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for kaggle: filename=kaggle-1.5.10-cp36-none-any.whl size=73269 sha256=26b66acfb2f3e4458caa4aa732471058e068f0f0cd20f66a88b4fa29f545c7a7\n","  Stored in directory: /root/.cache/pip/wheels/3a/d1/7e/6ce09b72b770149802c653a02783821629146983ee5a360f10\n","Successfully built kaggle\n","Installing collected packages: kaggle\n","  Found existing installation: kaggle 1.5.10\n","    Uninstalling kaggle-1.5.10:\n","      Successfully uninstalled kaggle-1.5.10\n","Successfully installed kaggle-1.5.10\n","Mounted at /content/drive\n","/content/drive/MyDrive/Colab Notebooks/Cassava\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:11.294556Z","iopub.status.busy":"2021-01-20T22:57:11.290187Z","iopub.status.idle":"2021-01-20T22:57:11.298693Z","shell.execute_reply":"2021-01-20T22:57:11.298011Z"},"id":"5V15UaoACh-M","papermill":{"duration":0.051661,"end_time":"2021-01-20T22:57:11.298873","exception":false,"start_time":"2021-01-20T22:57:11.247212","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1612536023197,"user_tz":-540,"elapsed":51049,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["if COLAB:# Prepare the kaggle.json file for use \n","    from google.colab import files\n","    if not os.path.exists('/content/drive/MyDrive/Colab Notebooks/.kaggle/kaggle.json'):\n","        !mkdir ~/content/drive/MyDrive/Colab Notebooks/.kaggle/\n","        if not os.path.exists('/content/drive/MyDrive/Colab Notebooks/.kaggle/kaggle.json'):\n","            files.upload()\n","            !cp kaggle.json ~/content/drive/MyDrive/Colab Notebooks/.kaggle/\n","        else:\n","            !cp '/content/drive/MyDrive/Colab Notebooks/' ~/.kaggle/  \n","        !chmod 600 ~/content/drive/MyDrive/Colab Notebooks/.kaggle/kaggle.json\n"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:11.368941Z","iopub.status.busy":"2021-01-20T22:57:11.367797Z","iopub.status.idle":"2021-01-20T22:57:11.371432Z","shell.execute_reply":"2021-01-20T22:57:11.370752Z"},"id":"urYjsB4IV-t5","papermill":{"duration":0.04238,"end_time":"2021-01-20T22:57:11.371550","exception":false,"start_time":"2021-01-20T22:57:11.329170","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1612536142046,"user_tz":-540,"elapsed":169894,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"ea9c2d9f-e3f6-47af-b07f-c08e621e3903"},"source":["if COLAB:# force TF to 2.2\n","    !pip install -q tensorflow~=2.2.0 tensorflow_gcs_config~=2.2.0\n","    \n","    import requests\n","    import os\n","    import tensorflow as tf\n","    resp = requests.post(\"http://{}:8475/requestversion/{}\".format(os.environ[\"COLAB_TPU_ADDR\"].split(\":\")[0], tf.__version__))\n","    if resp.status_code != 200:\n","      print(\"Failed to switch the TPU to TF {}\".format(version))"],"execution_count":4,"outputs":[{"output_type":"stream","text":["\u001b[K     |████████████████████████████████| 516.2MB 31kB/s \n","\u001b[K     |████████████████████████████████| 399kB 45.4MB/s \n","\u001b[K     |████████████████████████████████| 3.0MB 31.3MB/s \n","\u001b[K     |████████████████████████████████| 20.1MB 70.8MB/s \n","\u001b[K     |████████████████████████████████| 460kB 54.1MB/s \n","\u001b[31mERROR: datascience 0.10.6 has requirement folium==0.2.1, but you'll have folium 0.8.3 which is incompatible.\u001b[0m\n","\u001b[31mERROR: albumentations 0.1.12 has requirement imgaug<0.2.7,>=0.2.5, but you'll have imgaug 0.2.9 which is incompatible.\u001b[0m\n","\u001b[?25h"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"DJLH967uCaOv","papermill":{"duration":0.029839,"end_time":"2021-01-20T22:57:11.431128","exception":false,"start_time":"2021-01-20T22:57:11.401289","status":"completed"},"tags":[]},"source":["## Dependencies"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:11.498391Z","iopub.status.busy":"2021-01-20T22:57:11.497630Z","iopub.status.idle":"2021-01-20T22:57:21.909368Z","shell.execute_reply":"2021-01-20T22:57:21.908714Z"},"id":"u8lneueOCaOv","papermill":{"duration":10.446497,"end_time":"2021-01-20T22:57:21.909508","exception":false,"start_time":"2021-01-20T22:57:11.463011","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1612536145572,"user_tz":-540,"elapsed":173413,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"92f226fe-169c-44e4-a4c3-d65a89656717"},"source":["!pip install --quiet efficientnet"],"execution_count":5,"outputs":[{"output_type":"stream","text":["\u001b[?25l\r\u001b[K     |██████▌                         | 10kB 18.7MB/s eta 0:00:01\r\u001b[K     |█████████████                   | 20kB 12.0MB/s eta 0:00:01\r\u001b[K     |███████████████████▍            | 30kB 8.8MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▉      | 40kB 8.4MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 51kB 3.1MB/s \n","\u001b[?25h"],"name":"stdout"}]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:21.982695Z","iopub.status.busy":"2021-01-20T22:57:21.981961Z","iopub.status.idle":"2021-01-20T22:57:29.891530Z","shell.execute_reply":"2021-01-20T22:57:29.890624Z"},"id":"-iMoIRz7CaOw","papermill":{"duration":7.952124,"end_time":"2021-01-20T22:57:29.891659","exception":false,"start_time":"2021-01-20T22:57:21.939535","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1612536146912,"user_tz":-540,"elapsed":174747,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["import math, os, re, warnings, random, time\n","import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","from matplotlib import pyplot as plt\n","\n","from sklearn.model_selection import KFold\n","from sklearn.metrics import classification_report, confusion_matrix\n","import tensorflow as tf\n","import tensorflow.keras.layers as L\n","import tensorflow.keras.backend as K\n","from tensorflow.keras import optimizers, Sequential, losses, metrics, Model\n","from tensorflow.keras.callbacks import EarlyStopping\n","import efficientnet.tfkeras as efn\n","\n","def seed_everything(seed=0):\n","    random.seed(seed)\n","    np.random.seed(seed)\n","    tf.random.set_seed(seed)\n","    os.environ['PYTHONHASHSEED'] = str(seed)\n","    os.environ['TF_DETERMINISTIC_OPS'] = '1'\n","\n","seed = 0\n","seed_everything(seed)\n","warnings.filterwarnings('ignore')"],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Z-146lSGCaOx","papermill":{"duration":0.030316,"end_time":"2021-01-20T22:57:29.954488","exception":false,"start_time":"2021-01-20T22:57:29.924172","status":"completed"},"tags":[]},"source":["### Hardware configuration\n","\n","Note that we have `32` cores, this is because the `TPU v2 Pod` have more cores than a single `TPU v3` which has `8` cores."]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:30.071569Z","iopub.status.busy":"2021-01-20T22:57:30.035804Z","iopub.status.idle":"2021-01-20T22:57:34.008561Z","shell.execute_reply":"2021-01-20T22:57:34.010162Z"},"id":"cCFwEwkVCaOy","papermill":{"duration":4.024986,"end_time":"2021-01-20T22:57:34.010410","exception":false,"start_time":"2021-01-20T22:57:29.985424","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1612536169931,"user_tz":-540,"elapsed":197761,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"1d68bdcc-21c8-458c-fb16-ef087b4685fd"},"source":["# TPU or GPU detection\n","# Detect hardware, return appropriate distribution strategy\n","try:\n","    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n","    print(f'Running on TPU {tpu.master()}')\n","except ValueError:\n","    tpu = None\n","    print ('tpu',tpu)\n","\n","if tpu:\n","    tf.config.experimental_connect_to_cluster(tpu)\n","    tf.tpu.experimental.initialize_tpu_system(tpu)\n","    strategy = tf.distribute.experimental.TPUStrategy(tpu)\n","else:\n","    strategy = tf.distribute.get_strategy()\n","\n","AUTO = tf.data.experimental.AUTOTUNE\n","REPLICAS = strategy.num_replicas_in_sync\n","print(f'REPLICAS: {REPLICAS}')"],"execution_count":7,"outputs":[{"output_type":"stream","text":["Running on TPU grpc://10.54.53.114:8470\n","INFO:tensorflow:Initializing the TPU system: grpc://10.54.53.114:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.54.53.114:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Found TPU system:\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Found TPU system:\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Cores: 8\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Cores: 8\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Workers: 1\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Workers: 1\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Cores Per Worker: 8\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Cores Per Worker: 8\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:CPU:0, CPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:CPU:0, CPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:XLA_CPU:0, XLA_CPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:XLA_CPU:0, XLA_CPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:CPU:0, CPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:CPU:0, CPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:0, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:0, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:1, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:1, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:2, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:2, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:3, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:3, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:4, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:4, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:5, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:5, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:6, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:6, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:7, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:7, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU_SYSTEM:0, TPU_SYSTEM, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU_SYSTEM:0, TPU_SYSTEM, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:XLA_CPU:0, XLA_CPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:XLA_CPU:0, XLA_CPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["REPLICAS: 8\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"NK8TAx9JCaOz","papermill":{"duration":0.035404,"end_time":"2021-01-20T22:57:34.088585","exception":false,"start_time":"2021-01-20T22:57:34.053181","status":"completed"},"tags":[]},"source":["# Model parameters"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:34.155750Z","iopub.status.busy":"2021-01-20T22:57:34.154661Z","iopub.status.idle":"2021-01-20T22:57:34.160980Z","shell.execute_reply":"2021-01-20T22:57:34.160280Z"},"papermill":{"duration":0.040682,"end_time":"2021-01-20T22:57:34.161109","exception":false,"start_time":"2021-01-20T22:57:34.120427","status":"completed"},"tags":[],"id":"hyxJUKF-xGQ2","executionInfo":{"status":"ok","timestamp":1612536169932,"user_tz":-540,"elapsed":197755,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["BATCH_SIZE = 8 * REPLICAS\n","AUG_BATCH = BATCH_SIZE\n","LEARNING_RATE = 1e-5 * REPLICAS"],"execution_count":8,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UmwrOwlYCaOz","papermill":{"duration":0.031304,"end_time":"2021-01-20T22:57:34.223728","exception":false,"start_time":"2021-01-20T22:57:34.192424","status":"completed"},"tags":[]},"source":["# Load data"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:34.290296Z","iopub.status.busy":"2021-01-20T22:57:34.289242Z","iopub.status.idle":"2021-01-20T22:57:35.971447Z","shell.execute_reply":"2021-01-20T22:57:35.971977Z"},"id":"UxM4MGNGCaO0","papermill":{"duration":1.717316,"end_time":"2021-01-20T22:57:35.972129","exception":false,"start_time":"2021-01-20T22:57:34.254813","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":306},"executionInfo":{"status":"ok","timestamp":1612536172945,"user_tz":-540,"elapsed":200763,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"3fc0fb6b-56fd-4b9c-8b62-a94ba3ebbbce"},"source":["def count_data_items(filenames):\n","    n = [int(re.compile(r'-([0-9]*)\\.').search(filename).group(1)) for filename in filenames]\n","    return np.sum(n)\n","\n","\n","train = pd.read_csv(f'{database_base_path}/train.csv')\n","print(f'Train samples: {len(train)}')\n","\n","FILENAMES_COMP = tf.io.gfile.glob(GCS_PATH + '/*.tfrec')\n","FILENAMES_2019 = tf.io.gfile.glob(GCS_PATH_EXT + '/*.tfrec')\n","\n","FILENAMES_COMP_CBB = tf.io.gfile.glob(GCS_PATH_CLASSES + '/CBB*.tfrec')\n","FILENAMES_COMP_CBSD = tf.io.gfile.glob(GCS_PATH_CLASSES + '/CBSD*.tfrec')\n","FILENAMES_COMP_CGM = tf.io.gfile.glob(GCS_PATH_CLASSES + '/CGM*.tfrec')\n","FILENAMES_COMP_CMD = tf.io.gfile.glob(GCS_PATH_CLASSES + '/CMD*.tfrec')\n","FILENAMES_COMP_Healthy = tf.io.gfile.glob(GCS_PATH_CLASSES + '/Healthy*.tfrec')\n","\n","FILENAMES_2019_CBB = tf.io.gfile.glob(GCS_PATH_EXT_CLASSES + '/CBB*.tfrec')\n","FILENAMES_2019_CBSD = tf.io.gfile.glob(GCS_PATH_EXT_CLASSES + '/CBSD*.tfrec')\n","FILENAMES_2019_CGM = tf.io.gfile.glob(GCS_PATH_EXT_CLASSES + '/CGM*.tfrec')\n","FILENAMES_2019_CMD = tf.io.gfile.glob(GCS_PATH_EXT_CLASSES + '/CMD*.tfrec')\n","FILENAMES_2019_Healthy = tf.io.gfile.glob(GCS_PATH_EXT_CLASSES + '/Healthy*.tfrec')\n","\n","\n","TRAINING_FILENAMES = (FILENAMES_COMP + \n","                      FILENAMES_2019 + \n","                      (2 * FILENAMES_COMP_CBB) + \n","                      (2 * FILENAMES_2019_CBB) + \n","                      (2 * FILENAMES_COMP_CBSD) + \n","                      (2 * FILENAMES_2019_CBSD) + \n","                      (2 * FILENAMES_COMP_CGM) + \n","                      (2 * FILENAMES_2019_CGM) + \n","                      (2 * FILENAMES_COMP_Healthy) + \n","                      (2 * FILENAMES_2019_Healthy))\n","\n","NUM_TRAINING_IMAGES = count_data_items(TRAINING_FILENAMES)\n","\n","print(f'GCS: train images: {NUM_TRAINING_IMAGES}')\n","display(train.head())\n","\n","CLASSES = ['Cassava Bacterial Blight', \n","           'Cassava Brown Streak Disease', \n","           'Cassava Green Mottle', \n","           'Cassava Mosaic Disease', \n","           'Healthy']"],"execution_count":9,"outputs":[{"output_type":"stream","text":["WARNING:google.auth.compute_engine._metadata:Compute Engine Metadata server unavailable onattempt 1 of 3. Reason: [Errno 115] Operation now in progress\n","WARNING:google.auth.compute_engine._metadata:Compute Engine Metadata server unavailable onattempt 2 of 3. Reason: [Errno 115] Operation now in progress\n","WARNING:google.auth.compute_engine._metadata:Compute Engine Metadata server unavailable onattempt 3 of 3. Reason: [Errno 115] Operation now in progress\n","WARNING:google.auth._default:Authentication failed using Compute Engine authentication due to unavailable metadata server.\n"],"name":"stderr"},{"output_type":"stream","text":["Train samples: 21397\n","GCS: train images: 48081\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>image_id</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1000015157.jpg</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1000201771.jpg</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>100042118.jpg</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1000723321.jpg</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1000812911.jpg</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         image_id  label\n","0  1000015157.jpg      0\n","1  1000201771.jpg      3\n","2   100042118.jpg      1\n","3  1000723321.jpg      1\n","4  1000812911.jpg      3"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"BZIhYsg_CaO1","papermill":{"duration":0.032803,"end_time":"2021-01-20T22:57:36.037731","exception":false,"start_time":"2021-01-20T22:57:36.004928","status":"completed"},"tags":[]},"source":["# Augmentation"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:36.106682Z","iopub.status.busy":"2021-01-20T22:57:36.105973Z","iopub.status.idle":"2021-01-20T22:57:36.133193Z","shell.execute_reply":"2021-01-20T22:57:36.133788Z"},"id":"Wwh329L6CaO1","papermill":{"duration":0.063522,"end_time":"2021-01-20T22:57:36.133965","exception":false,"start_time":"2021-01-20T22:57:36.070443","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1612536172945,"user_tz":-540,"elapsed":200756,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["def data_augment(image, label):\n","    p_rotation = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_spatial = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_rotate = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_pixel_1 = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_pixel_2 = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_pixel_3 = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_shear = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_crop = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_cutout = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    \n","    # Shear\n","    if p_shear > .2:\n","        if p_shear > .6:\n","            image = transform_shear(image, HEIGHT, shear=20.)\n","        else:\n","            image = transform_shear(image, HEIGHT, shear=-20.)\n","            \n","    # Rotation\n","    if p_rotation > .2:\n","        if p_rotation > .6:\n","            image = transform_rotation(image, HEIGHT, rotation=45.)\n","        else:\n","            image = transform_rotation(image, HEIGHT, rotation=-45.)\n","            \n","    # Flips\n","    image = tf.image.random_flip_left_right(image)\n","    image = tf.image.random_flip_up_down(image)\n","    if p_spatial > .75:\n","        image = tf.image.transpose(image)\n","        \n","    # Rotates\n","    if p_rotate > .75:\n","        image = tf.image.rot90(image, k=3) # rotate 270º\n","    elif p_rotate > .5:\n","        image = tf.image.rot90(image, k=2) # rotate 180º\n","    elif p_rotate > .25:\n","        image = tf.image.rot90(image, k=1) # rotate 90º\n","        \n","    # Pixel-level transforms\n","    if p_pixel_1 >= .4:\n","        image = tf.image.random_saturation(image, lower=.7, upper=1.3)\n","    if p_pixel_2 >= .4:\n","        image = tf.image.random_contrast(image, lower=.8, upper=1.2)\n","    if p_pixel_3 >= .4:\n","        image = tf.image.random_brightness(image, max_delta=.1)\n","        \n","    # Crops\n","    if p_crop > .6:\n","        if p_crop > .9:\n","            image = tf.image.central_crop(image, central_fraction=.5)\n","        elif p_crop > .8:\n","            image = tf.image.central_crop(image, central_fraction=.6)\n","        elif p_crop > .7:\n","            image = tf.image.central_crop(image, central_fraction=.7)\n","        else:\n","            image = tf.image.central_crop(image, central_fraction=.8)\n","    elif p_crop > .3:\n","        crop_size = tf.random.uniform([], int(HEIGHT*.6), HEIGHT, dtype=tf.int32)\n","        image = tf.image.random_crop(image, size=[crop_size, crop_size, CHANNELS])\n","            \n","    image = tf.image.resize(image, size=[HEIGHT, WIDTH])\n","\n","    if p_cutout > .5:\n","        image = data_augment_cutout(image)\n","        \n","    return image, label"],"execution_count":10,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"r4Hg1nKgCaO1","papermill":{"duration":0.033215,"end_time":"2021-01-20T22:57:36.199741","exception":false,"start_time":"2021-01-20T22:57:36.166526","status":"completed"},"tags":[]},"source":["## Auxiliary functions"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:36.295009Z","iopub.status.busy":"2021-01-20T22:57:36.289488Z","iopub.status.idle":"2021-01-20T22:57:36.318353Z","shell.execute_reply":"2021-01-20T22:57:36.317633Z"},"id":"-DueNRgfCaO1","papermill":{"duration":0.08607,"end_time":"2021-01-20T22:57:36.318490","exception":false,"start_time":"2021-01-20T22:57:36.232420","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1612536172946,"user_tz":-540,"elapsed":200752,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["# data augmentation @cdeotte kernel: https://www.kaggle.com/cdeotte/rotation-augmentation-gpu-tpu-0-96\n","def transform_rotation(image, height, rotation):\n","    # input image - is one image of size [dim,dim,3] not a batch of [b,dim,dim,3]\n","    # output - image randomly rotated\n","    DIM = height\n","    XDIM = DIM%2 #fix for size 331\n","    \n","    rotation = rotation * tf.random.uniform([1],dtype='float32')\n","    # CONVERT DEGREES TO RADIANS\n","    rotation = math.pi * rotation / 180.\n","    \n","    # ROTATION MATRIX\n","    c1 = tf.math.cos(rotation)\n","    s1 = tf.math.sin(rotation)\n","    one = tf.constant([1],dtype='float32')\n","    zero = tf.constant([0],dtype='float32')\n","    rotation_matrix = tf.reshape(tf.concat([c1,s1,zero, -s1,c1,zero, zero,zero,one],axis=0),[3,3])\n","\n","    # LIST DESTINATION PIXEL INDICES\n","    x = tf.repeat( tf.range(DIM//2,-DIM//2,-1), DIM )\n","    y = tf.tile( tf.range(-DIM//2,DIM//2),[DIM] )\n","    z = tf.ones([DIM*DIM],dtype='int32')\n","    idx = tf.stack( [x,y,z] )\n","    \n","    # ROTATE DESTINATION PIXELS ONTO ORIGIN PIXELS\n","    idx2 = K.dot(rotation_matrix,tf.cast(idx,dtype='float32'))\n","    idx2 = K.cast(idx2,dtype='int32')\n","    idx2 = K.clip(idx2,-DIM//2+XDIM+1,DIM//2)\n","    \n","    # FIND ORIGIN PIXEL VALUES \n","    idx3 = tf.stack( [DIM//2-idx2[0,], DIM//2-1+idx2[1,]] )\n","    d = tf.gather_nd(image, tf.transpose(idx3))\n","        \n","    return tf.reshape(d,[DIM,DIM,3])\n","\n","def transform_shear(image, height, shear):\n","    # input image - is one image of size [dim,dim,3] not a batch of [b,dim,dim,3]\n","    # output - image randomly sheared\n","    DIM = height\n","    XDIM = DIM%2 #fix for size 331\n","    \n","    shear = shear * tf.random.uniform([1],dtype='float32')\n","    shear = math.pi * shear / 180.\n","        \n","    # SHEAR MATRIX\n","    one = tf.constant([1],dtype='float32')\n","    zero = tf.constant([0],dtype='float32')\n","    c2 = tf.math.cos(shear)\n","    s2 = tf.math.sin(shear)\n","    shear_matrix = tf.reshape(tf.concat([one,s2,zero, zero,c2,zero, zero,zero,one],axis=0),[3,3])    \n","\n","    # LIST DESTINATION PIXEL INDICES\n","    x = tf.repeat( tf.range(DIM//2,-DIM//2,-1), DIM )\n","    y = tf.tile( tf.range(-DIM//2,DIM//2),[DIM] )\n","    z = tf.ones([DIM*DIM],dtype='int32')\n","    idx = tf.stack( [x,y,z] )\n","    \n","    # ROTATE DESTINATION PIXELS ONTO ORIGIN PIXELS\n","    idx2 = K.dot(shear_matrix,tf.cast(idx,dtype='float32'))\n","    idx2 = K.cast(idx2,dtype='int32')\n","    idx2 = K.clip(idx2,-DIM//2+XDIM+1,DIM//2)\n","    \n","    # FIND ORIGIN PIXEL VALUES \n","    idx3 = tf.stack( [DIM//2-idx2[0,], DIM//2-1+idx2[1,]] )\n","    d = tf.gather_nd(image, tf.transpose(idx3))\n","        \n","    return tf.reshape(d,[DIM,DIM,3])\n","\n","# CutOut\n","def data_augment_cutout(image, min_mask_size=(int(HEIGHT * .1), int(HEIGHT * .1)), \n","                        max_mask_size=(int(HEIGHT * .125), int(HEIGHT * .125))):\n","    p_cutout = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    \n","    if p_cutout > .85: # 10~15 cut outs\n","        n_cutout = tf.random.uniform([], 10, 15, dtype=tf.int32)\n","        image = random_cutout(image, HEIGHT, WIDTH, \n","                              min_mask_size=min_mask_size, max_mask_size=max_mask_size, k=n_cutout)\n","    elif p_cutout > .6: # 5~10 cut outs\n","        n_cutout = tf.random.uniform([], 5, 10, dtype=tf.int32)\n","        image = random_cutout(image, HEIGHT, WIDTH, \n","                              min_mask_size=min_mask_size, max_mask_size=max_mask_size, k=n_cutout)\n","    elif p_cutout > .25: # 2~5 cut outs\n","        n_cutout = tf.random.uniform([], 2, 5, dtype=tf.int32)\n","        image = random_cutout(image, HEIGHT, WIDTH, \n","                              min_mask_size=min_mask_size, max_mask_size=max_mask_size, k=n_cutout)\n","    else: # 1 cut out\n","        image = random_cutout(image, HEIGHT, WIDTH, \n","                              min_mask_size=min_mask_size, max_mask_size=max_mask_size, k=1)\n","\n","    return image\n","\n","def random_cutout(image, height, width, channels=3, min_mask_size=(10, 10), max_mask_size=(80, 80), k=1):\n","    assert height > min_mask_size[0]\n","    assert width > min_mask_size[1]\n","    assert height > max_mask_size[0]\n","    assert width > max_mask_size[1]\n","\n","    for i in range(k):\n","      mask_height = tf.random.uniform(shape=[], minval=min_mask_size[0], maxval=max_mask_size[0], dtype=tf.int32)\n","      mask_width = tf.random.uniform(shape=[], minval=min_mask_size[1], maxval=max_mask_size[1], dtype=tf.int32)\n","\n","      pad_h = height - mask_height\n","      pad_top = tf.random.uniform(shape=[], minval=0, maxval=pad_h, dtype=tf.int32)\n","      pad_bottom = pad_h - pad_top\n","\n","      pad_w = width - mask_width\n","      pad_left = tf.random.uniform(shape=[], minval=0, maxval=pad_w, dtype=tf.int32)\n","      pad_right = pad_w - pad_left\n","\n","      cutout_area = tf.zeros(shape=[mask_height, mask_width, channels], dtype=tf.uint8)\n","\n","      cutout_mask = tf.pad([cutout_area], [[0,0],[pad_top, pad_bottom], [pad_left, pad_right], [0,0]], constant_values=1)\n","      cutout_mask = tf.squeeze(cutout_mask, axis=0)\n","      image = tf.multiply(tf.cast(image, tf.float32), tf.cast(cutout_mask, tf.float32))\n","\n","    return image"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"id":"hyi3J0MXvJBz","executionInfo":{"status":"ok","timestamp":1612536173204,"user_tz":-540,"elapsed":201007,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["def cutmix(image, label, PROBABILITY = 1.0):\r\n","    # input image - is a batch of images of size [n,dim,dim,3] not a single image of [dim,dim,3]\r\n","    # output - a batch of images with cutmix applied\r\n","    DIM = IMAGE_SIZE[0]\r\n","    CLASSES = N_CLASSES\r\n","    \r\n","    imgs = []; labs = []\r\n","    for j in range(AUG_BATCH):\r\n","        # DO CUTMIX WITH PROBABILITY DEFINED ABOVE\r\n","        P = tf.cast( tf.random.uniform([],0,1)<=PROBABILITY, tf.int32)\r\n","        # CHOOSE RANDOM IMAGE TO CUTMIX WITH\r\n","        k = tf.cast( tf.random.uniform([],0,AUG_BATCH),tf.int32)\r\n","        # CHOOSE RANDOM LOCATION\r\n","        x = tf.cast( tf.random.uniform([],0,DIM),tf.int32)\r\n","        y = tf.cast( tf.random.uniform([],0,DIM),tf.int32)\r\n","        b = tf.random.uniform([],0,1) # this is beta dist with alpha=1.0\r\n","        WIDTH = tf.cast( DIM * tf.math.sqrt(1-b),tf.int32) * P\r\n","        ya = tf.math.maximum(0,y-WIDTH//2)\r\n","        yb = tf.math.minimum(DIM,y+WIDTH//2)\r\n","        xa = tf.math.maximum(0,x-WIDTH//2)\r\n","        xb = tf.math.minimum(DIM,x+WIDTH//2)\r\n","        # MAKE CUTMIX IMAGE\r\n","        one = image[j,ya:yb,0:xa,:]\r\n","        two = image[k,ya:yb,xa:xb,:]\r\n","        three = image[j,ya:yb,xb:DIM,:]\r\n","        middle = tf.concat([one,two,three],axis=1)\r\n","        img = tf.concat([image[j,0:ya,:,:],middle,image[j,yb:DIM,:,:]],axis=0)\r\n","        imgs.append(img)\r\n","        # MAKE CUTMIX LABEL\r\n","        a = tf.cast(WIDTH*WIDTH/DIM/DIM,tf.float32)\r\n","        if len(label.shape)==1:\r\n","            lab1 = tf.one_hot(label[j],CLASSES)\r\n","            lab2 = tf.one_hot(label[k],CLASSES)\r\n","        else:\r\n","            lab1 = label[j,]\r\n","            lab2 = label[k,]\r\n","        labs.append((1-a)*lab1 + a*lab2)\r\n","            \r\n","    # RESHAPE HACK SO TPU COMPILER KNOWS SHAPE OF OUTPUT TENSOR (maybe use Python typing instead?)\r\n","    image2 = tf.reshape(tf.stack(imgs),(AUG_BATCH,DIM,DIM,3))\r\n","    label2 = tf.reshape(tf.stack(labs),(AUG_BATCH,CLASSES))\r\n","    return image2,label2"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"id":"VD277mUEvLBE","executionInfo":{"status":"ok","timestamp":1612536173205,"user_tz":-540,"elapsed":201004,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["def mixup(image, label, PROBABILITY = 1.0):\r\n","    # input image - is a batch of images of size [n,dim,dim,3] not a single image of [dim,dim,3]\r\n","    # output - a batch of images with mixup applied\r\n","    DIM = IMAGE_SIZE[0]\r\n","    CLASSES = N_CLASSES\r\n","    \r\n","    imgs = []; labs = []\r\n","    for j in range(AUG_BATCH):\r\n","        # DO MIXUP WITH PROBABILITY DEFINED ABOVE\r\n","        P = tf.cast( tf.random.uniform([],0,1)<=PROBABILITY, tf.float32)\r\n","        # CHOOSE RANDOM\r\n","        k = tf.cast( tf.random.uniform([],0,AUG_BATCH),tf.int32)\r\n","        a = tf.random.uniform([],0,1)*P # this is beta dist with alpha=1.0\r\n","        # MAKE MIXUP IMAGE\r\n","        img1 = image[j,]\r\n","        img2 = image[k,]\r\n","        imgs.append((1-a)*img1 + a*img2)\r\n","        # MAKE CUTMIX LABEL\r\n","        if len(label.shape)==1:\r\n","            lab1 = tf.one_hot(label[j],CLASSES)\r\n","            lab2 = tf.one_hot(label[k],CLASSES)\r\n","        else:\r\n","            lab1 = label[j,]\r\n","            lab2 = label[k,]\r\n","        labs.append((1-a)*lab1 + a*lab2)\r\n","            \r\n","    # RESHAPE HACK SO TPU COMPILER KNOWS SHAPE OF OUTPUT TENSOR (maybe use Python typing instead?)\r\n","    image2 = tf.reshape(tf.stack(imgs),(AUG_BATCH,DIM,DIM,3))\r\n","    label2 = tf.reshape(tf.stack(labs),(AUG_BATCH,CLASSES))\r\n","    return image2,label2"],"execution_count":13,"outputs":[]},{"cell_type":"code","metadata":{"id":"AdQEC_iKvR3z","executionInfo":{"status":"ok","timestamp":1612536173205,"user_tz":-540,"elapsed":200999,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["def transform(image,label):\r\n","    # THIS FUNCTION APPLIES BOTH CUTMIX AND MIXUP\r\n","    DIM = IMAGE_SIZE[0]\r\n","    CLASSES = N_CLASSES\r\n","    SWITCH = 0.5\r\n","    CUTMIX_PROB = 0.666\r\n","    #MIXUP_PROB = 0.666\r\n","    # FOR SWITCH PERCENT OF TIME WE DO CUTMIX AND (1-SWITCH) WE DO MIXUP\r\n","    image2, label2 = cutmix(image, label, CUTMIX_PROB)\r\n","    #image3, label3 = mixup(image, label, MIXUP_PROB)\r\n","    # imgs = []; labs = []\r\n","    # for j in range(AUG_BATCH):\r\n","    #     P = tf.cast( tf.random.uniform([],0,1)<=SWITCH, tf.float32)\r\n","    #     imgs.append(P*image2[j,]+(1-P)*image3[j,])\r\n","    #     labs.append(P*label2[j,]+(1-P)*label3[j,])\r\n","    # RESHAPE HACK SO TPU COMPILER KNOWS SHAPE OF OUTPUT TENSOR (maybe use Python typing instead?)\r\n","    # image4 = tf.reshape(tf.stack(imgs),(AUG_BATCH,DIM,DIM,3))\r\n","    # label4 = tf.reshape(tf.stack(labs),(AUG_BATCH,CLASSES))\r\n","    return image2,label2"],"execution_count":14,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:36.388974Z","iopub.status.busy":"2021-01-20T22:57:36.388107Z","iopub.status.idle":"2021-01-20T22:57:36.415254Z","shell.execute_reply":"2021-01-20T22:57:36.415771Z"},"id":"CPcg0bWECaO1","papermill":{"duration":0.064439,"end_time":"2021-01-20T22:57:36.415960","exception":false,"start_time":"2021-01-20T22:57:36.351521","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1612536173206,"user_tz":-540,"elapsed":200994,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["# Datasets utility functions\n","def decode_image(image_data):\n","    \"\"\"\n","        Decode a JPEG-encoded image to a uint8 tensor.\n","    \"\"\"\n","    image = tf.image.decode_jpeg(image_data, channels=3)\n","    return image\n","\n","def scale_image(image, label):\n","    \"\"\"\n","        Cast tensor to float and normalizes (range between 0 and 1).\n","    \"\"\"\n","    image = tf.cast(image, tf.float32)\n","    image /= 255.0\n","    return image, label\n","\n","def prepare_image(image, label):\n","    \"\"\"\n","        Resize and reshape images to the expected size.\n","    \"\"\"\n","    image = tf.image.resize(image, [HEIGHT_RS, WIDTH_RS])\n","    image = tf.reshape(image, [HEIGHT_RS, WIDTH_RS, 3])\n","    return image, label\n","\n","def read_tfrecord(example, labeled=True):\n","    \"\"\"\n","        1. Parse data based on the 'TFREC_FORMAT' map.\n","        2. Decode image.\n","        3. If 'labeled' returns (image, label) if not (image, name).\n","    \"\"\"\n","    if labeled:\n","        TFREC_FORMAT = {\n","            'image': tf.io.FixedLenFeature([], tf.string), \n","            'target': tf.io.FixedLenFeature([], tf.int64), \n","        }\n","    else:\n","        TFREC_FORMAT = {\n","            'image': tf.io.FixedLenFeature([], tf.string), \n","            'image_name': tf.io.FixedLenFeature([], tf.string), \n","        }\n","    example = tf.io.parse_single_example(example, TFREC_FORMAT)\n","    image = decode_image(example['image'])\n","    if labeled:\n","        label_or_name = tf.cast(example['target'], tf.int32)\n","        # One-Hot Encoding needed to use \"categorical_crossentropy\" loss\n","        label_or_name = tf.one_hot(tf.cast(label_or_name, tf.int32), N_CLASSES)\n","    else:\n","        label_or_name = example['image_name']\n","    return image, label_or_name\n","\n","def get_dataset(FILENAMES, labeled=True, ordered=False, repeated=False, \n","                cached=False, augment=False):\n","    \"\"\"\n","        Return a Tensorflow dataset ready for training or inference.\n","    \"\"\"\n","    ignore_order = tf.data.Options()\n","    if not ordered:\n","        ignore_order.experimental_deterministic = False\n","        dataset = tf.data.Dataset.list_files(FILENAMES)\n","        dataset = dataset.interleave(tf.data.TFRecordDataset, num_parallel_calls=AUTO)\n","    else:\n","        dataset = tf.data.TFRecordDataset(FILENAMES, num_parallel_reads=AUTO)\n","        \n","    dataset = dataset.with_options(ignore_order)\n","    \n","    dataset = dataset.map(lambda x: read_tfrecord(x, labeled=labeled), num_parallel_calls=AUTO)\n","    \n","    if augment:\n","        dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n","\n","    if repeated:\n","        dataset = dataset.repeat()\n","        \n","    dataset = dataset.batch(AUG_BATCH)\n","    if augment: \n","        dataset = dataset.map(transform, num_parallel_calls=AUTO) # note we put AFTER batching\n","    dataset = dataset.unbatch()\n","        \n","    dataset = dataset.map(scale_image, num_parallel_calls=AUTO)\n","    dataset = dataset.map(prepare_image, num_parallel_calls=AUTO)\n","    \n","    if not ordered:\n","        dataset = dataset.shuffle(2048)\n","    # if repeated:\n","    #     dataset = dataset.repeat()\n","        \n","    dataset = dataset.batch(BATCH_SIZE)\n","    \n","    if cached:\n","        dataset = dataset.cache()\n","    dataset = dataset.prefetch(AUTO)\n","\n","    return dataset\n","\n","def unfreeze_model(model):\n","    # Unfreeze layers while leaving BatchNorm layers frozen\n","    for layer in model.layers:\n","        if not isinstance(layer, L.BatchNormalization):\n","            layer.trainable = True\n","        else:\n","            layer.trainable = False\n","                \n","def unfreeze_block(model, block_name=None, n_top=3):\n","    # Unfreeze layers while leaving BatchNorm layers frozen\n","    for layer in model.layers[:-n_top]:\n","        if isinstance(layer, L.BatchNormalization):\n","            layer.trainable = False\n","        else:\n","            if block_name and (block_name in layer.name):\n","                layer.trainable = True"],"execution_count":15,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:36.487403Z","iopub.status.busy":"2021-01-20T22:57:36.486600Z","iopub.status.idle":"2021-01-20T22:57:36.530480Z","shell.execute_reply":"2021-01-20T22:57:36.531039Z"},"id":"gHAxNOInCaO2","papermill":{"duration":0.081913,"end_time":"2021-01-20T22:57:36.531213","exception":false,"start_time":"2021-01-20T22:57:36.449300","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1612536173374,"user_tz":-540,"elapsed":201158,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["# Visualization utility functions\n","np.set_printoptions(threshold=15, linewidth=80)\n","\n","def batch_to_numpy_images_and_labels(data):\n","    images, labels = data\n","    numpy_images = images.numpy()\n","    numpy_labels = labels.numpy()\n","    if numpy_labels.dtype == object: # binary string in this case, these are image ID strings\n","        numpy_labels = [None for _ in enumerate(numpy_images)]\n","    # If no labels, only image IDs, return None for labels (this is the case for test data)\n","    return numpy_images, numpy_labels\n","\n","def title_from_label_and_target(label, correct_label):\n","    if correct_label is None:\n","        return CLASSES[label], True\n","    correct = (label == correct_label)\n","    return \"{} [{}{}{}]\".format(CLASSES[label], 'OK' if correct else 'NO', u\"\\u2192\" if not correct else '',\n","                                CLASSES[correct_label] if not correct else ''), correct\n","\n","def display_one_flower(image, title, subplot, red=False, titlesize=16):\n","    plt.subplot(*subplot)\n","    plt.axis('off')\n","    plt.imshow(image)\n","    if len(title) > 0:\n","        plt.title(title, fontsize=int(titlesize) if not red else int(titlesize/1.2), color='red' if red else 'black', \n","                  fontdict={'verticalalignment':'center'}, pad=int(titlesize/1.5))\n","    return (subplot[0], subplot[1], subplot[2]+1)\n","\n","def display_batch_of_images(databatch, predictions=None):\n","    \"\"\"This will work with:\n","    display_batch_of_images(images)\n","    display_batch_of_images(images, predictions)\n","    display_batch_of_images((images, labels))\n","    display_batch_of_images((images, labels), predictions)\n","    \"\"\"\n","    # data\n","    images, labels = batch_to_numpy_images_and_labels(databatch)\n","    labels = np.argmax(labels, axis=-1)\n","    if labels is None:\n","        labels = [None for _ in enumerate(images)]\n","        \n","    # auto-squaring: this will drop data that does not fit into square or square-ish rectangle\n","    rows = int(math.sqrt(len(images)))\n","    cols = len(images)//rows\n","        \n","    # size and spacing\n","    FIGSIZE = 13.0\n","    SPACING = 0.1\n","    subplot=(rows,cols,1)\n","    if rows < cols:\n","        plt.figure(figsize=(FIGSIZE,FIGSIZE/cols*rows))\n","    else:\n","        plt.figure(figsize=(FIGSIZE/rows*cols,FIGSIZE))\n","    \n","    # display\n","    for i, (image, label) in enumerate(zip(images[:rows*cols], labels[:rows*cols])):\n","        title = '' if label is None else CLASSES[label]\n","        correct = True\n","        if predictions is not None:\n","            title, correct = title_from_label_and_target(predictions[i], label)\n","        dynamic_titlesize = FIGSIZE*SPACING/max(rows,cols)*40+3 # magic formula tested to work from 1x1 to 10x10 images\n","        subplot = display_one_flower(image, title, subplot, not correct, titlesize=dynamic_titlesize)\n","    \n","    #layout\n","    plt.tight_layout()\n","    if label is None and predictions is None:\n","        plt.subplots_adjust(wspace=0, hspace=0)\n","    else:\n","        plt.subplots_adjust(wspace=SPACING, hspace=SPACING)\n","    plt.show()\n","    \n","# Visualize model predictions\n","def dataset_to_numpy_util(dataset, N):\n","    dataset = dataset.unbatch().batch(N)\n","    for images, labels in dataset:\n","        numpy_images = images.numpy()\n","        numpy_labels = labels.numpy()\n","        break;  \n","    return numpy_images, numpy_labels\n","\n","def title_from_label_and_target(label, correct_label):\n","    label = np.argmax(label, axis=-1)\n","    correct = (label == correct_label)\n","    return \"{} [{}{}{}]\".format(label, str(correct), ', shoud be ' if not correct else '',\n","                                correct_label if not correct else ''), correct\n","\n","def display_one_flower_eval(image, title, subplot, red=False):\n","    plt.subplot(subplot)\n","    plt.axis('off')\n","    plt.imshow(image)\n","    plt.title(title, fontsize=14, color='red' if red else 'black')\n","    return subplot+1\n","\n","def display_9_images_with_predictions(images, predictions, labels):\n","    subplot=331\n","    plt.figure(figsize=(13,13))\n","    for i, image in enumerate(images):\n","        title, correct = title_from_label_and_target(predictions[i], labels[i])\n","        subplot = display_one_flower_eval(image, title, subplot, not correct)\n","        if i >= 8:\n","            break;\n","              \n","    plt.tight_layout()\n","    plt.subplots_adjust(wspace=0.1, hspace=0.1)\n","    plt.show()\n","\n","\n","# Model evaluation\n","def plot_metrics(history):\n","    fig, axes = plt.subplots(2, 1, sharex='col', figsize=(20, 8))\n","    axes = axes.flatten()\n","    \n","    axes[0].plot(history['loss'], label='Train loss')\n","    axes[0].plot(history['val_loss'], label='Validation loss')\n","    axes[0].legend(loc='best', fontsize=16)\n","    axes[0].set_title('Loss')\n","    axes[0].axvline(np.argmin(history['loss']), linestyle='dashed')\n","    axes[0].axvline(np.argmin(history['val_loss']), linestyle='dashed', color='orange')\n","    \n","    axes[1].plot(history['accuracy'], label='Train accuracy')\n","    axes[1].plot(history['val_accuracy'], label='Validation accuracy')\n","    axes[1].legend(loc='best', fontsize=16)\n","    axes[1].set_title('Accuracy')\n","    axes[1].axvline(np.argmax(history['accuracy']), linestyle='dashed')\n","    axes[1].axvline(np.argmax(history['val_accuracy']), linestyle='dashed', color='orange')\n","\n","    plt.xlabel('Epochs', fontsize=16)\n","    sns.despine()\n","    plt.show()"],"execution_count":16,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oCtCB3WdCaO2","papermill":{"duration":0.033127,"end_time":"2021-01-20T22:57:36.597612","exception":false,"start_time":"2021-01-20T22:57:36.564485","status":"completed"},"tags":[]},"source":["# Training data samples (with augmentation)"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:36.667226Z","iopub.status.busy":"2021-01-20T22:57:36.666549Z","iopub.status.idle":"2021-01-20T22:57:52.204000Z","shell.execute_reply":"2021-01-20T22:57:52.204539Z"},"id":"p8IMzXLRCaO2","papermill":{"duration":15.574028,"end_time":"2021-01-20T22:57:52.204708","exception":false,"start_time":"2021-01-20T22:57:36.630680","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1fqa9iGINgM6ruZrGbHrLZQtrJjkpByOx"},"executionInfo":{"status":"ok","timestamp":1612536198070,"user_tz":-540,"elapsed":225850,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"59c165fb-e4a0-4449-ae18-ad68434f6fd6"},"source":["train_dataset = get_dataset(FILENAMES_COMP, ordered=True, augment=True)\n","train_iter = iter(train_dataset.unbatch().batch(20))\n","\n","display_batch_of_images(next(train_iter))\n","display_batch_of_images(next(train_iter))"],"execution_count":17,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"gfrU-uCiCaO3","papermill":{"duration":0.115332,"end_time":"2021-01-20T22:57:52.436099","exception":false,"start_time":"2021-01-20T22:57:52.320767","status":"completed"},"tags":[]},"source":["## Datasets distribution\n","\n","### Competition data"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:52.660179Z","iopub.status.busy":"2021-01-20T22:57:52.659360Z","iopub.status.idle":"2021-01-20T22:59:14.164307Z","shell.execute_reply":"2021-01-20T22:59:14.165290Z"},"id":"WJywiXKHCaO4","papermill":{"duration":81.617644,"end_time":"2021-01-20T22:59:14.165495","exception":false,"start_time":"2021-01-20T22:57:52.547851","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":502},"executionInfo":{"status":"ok","timestamp":1612536277676,"user_tz":-540,"elapsed":305449,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"4248c23d-88c6-489c-cc99-983e93b0eec5"},"source":["ds_comp = get_dataset(FILENAMES_COMP)\n","labels_comp = [target.numpy() for img, target in iter(ds_comp.unbatch())]\n","labels_comp = np.argmax(labels_comp, axis=-1)\n","\n","fig, ax = plt.subplots(1, 1, figsize=(18, 8))\n","ax = sns.countplot(y=labels_comp, palette='viridis')\n","ax.tick_params(labelsize=16)\n","\n","plt.show()"],"execution_count":18,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1296x576 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"H03votk7CaO4","papermill":{"duration":0.11035,"end_time":"2021-01-20T22:59:14.384953","exception":false,"start_time":"2021-01-20T22:59:14.274603","status":"completed"},"tags":[]},"source":["### 2019 competition data"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:59:14.619739Z","iopub.status.busy":"2021-01-20T22:59:14.618979Z","iopub.status.idle":"2021-01-20T22:59:36.253576Z","shell.execute_reply":"2021-01-20T22:59:36.252814Z"},"id":"SfD2fI73CaO4","papermill":{"duration":21.757163,"end_time":"2021-01-20T22:59:36.253707","exception":false,"start_time":"2021-01-20T22:59:14.496544","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":502},"executionInfo":{"status":"ok","timestamp":1612536299483,"user_tz":-540,"elapsed":327249,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"3f7c259b-c443-4e34-b65e-8d0dac723a01"},"source":["ds_2019 = get_dataset(FILENAMES_2019)\n","labels_2019 = [target.numpy() for img, target in iter(ds_2019.unbatch())]\n","labels_2019 = np.argmax(labels_2019, axis=-1)\n","\n","fig, ax = plt.subplots(1, 1, figsize=(18, 8))\n","ax = sns.countplot(y=labels_2019, palette='viridis')\n","ax.tick_params(labelsize=16)\n","\n","plt.show()"],"execution_count":19,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1296x576 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"ZXY3rsY4CaO4","papermill":{"duration":0.112402,"end_time":"2021-01-20T22:59:36.476696","exception":false,"start_time":"2021-01-20T22:59:36.364294","status":"completed"},"tags":[]},"source":["### Dataset oversampled"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:59:36.715120Z","iopub.status.busy":"2021-01-20T22:59:36.714385Z","iopub.status.idle":"2021-01-20T23:02:43.355083Z","shell.execute_reply":"2021-01-20T23:02:43.355614Z"},"id":"PRXTNO7RCaO5","papermill":{"duration":186.766033,"end_time":"2021-01-20T23:02:43.355778","exception":false,"start_time":"2021-01-20T22:59:36.589745","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":502},"executionInfo":{"status":"ok","timestamp":1612536509401,"user_tz":-540,"elapsed":537160,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"dc1094f1-2ce8-4147-d911-047ef276f716"},"source":["FILENAMES_COMP_OVER = (FILENAMES_COMP + \n","                       FILENAMES_2019 + \n","                       (2 * FILENAMES_COMP_CBB) + \n","                       (2 * FILENAMES_2019_CBB) + \n","                       (2 * FILENAMES_COMP_CBSD) + \n","                       (2 * FILENAMES_2019_CBSD) + \n","                       (2 * FILENAMES_COMP_CGM) + \n","                       (2 * FILENAMES_2019_CGM) + \n","                       (2 * FILENAMES_COMP_Healthy) + \n","                       (2 * FILENAMES_2019_Healthy))\n","\n","ds_comp = get_dataset(FILENAMES_COMP_OVER)\n","labels_comp = [target.numpy() for img, target in iter(ds_comp.unbatch())]\n","labels_comp = np.argmax(labels_comp, axis=-1)\n","\n","fig, ax = plt.subplots(1, 1, figsize=(18, 8))\n","ax = sns.countplot(y=labels_comp, palette='viridis')\n","ax.tick_params(labelsize=16)\n","\n","plt.show()"],"execution_count":20,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1296x576 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"HvXRzhofCaO5","papermill":{"duration":0.112509,"end_time":"2021-01-20T23:02:43.580615","exception":false,"start_time":"2021-01-20T23:02:43.468106","status":"completed"},"tags":[]},"source":["### Learning rate schedule\n","\n","We are going to use a `cosine learning rate schedule with a warm-up phase`, this may be a good idea since we are using a pre-trained model, the warm-up phase will be useful to avoid the pre-trained weights degradation resulting in catastrophic forgetting, during the schedule the learning rate will slowly decrease to very low values, this helps the model to land on more stable weights."]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:02:43.808753Z","iopub.status.busy":"2021-01-20T23:02:43.807680Z","iopub.status.idle":"2021-01-20T23:02:47.940826Z","shell.execute_reply":"2021-01-20T23:02:47.939748Z"},"id":"I9cuJCl1CaO5","papermill":{"duration":4.248898,"end_time":"2021-01-20T23:02:47.940988","exception":false,"start_time":"2021-01-20T23:02:43.692090","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":422},"executionInfo":{"status":"ok","timestamp":1612536547207,"user_tz":-540,"elapsed":574959,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"718b9bc4-6725-49cc-b57e-8cd93911e907"},"source":["lr_start = 1e-8\n","lr_min = 1e-8\n","lr_max = LEARNING_RATE\n","num_cycles = 1.\n","warmup_epochs = 1\n","hold_max_epochs = 0\n","total_epochs = EPOCHS\n","warmup_steps = warmup_epochs * (NUM_TRAINING_IMAGES//BATCH_SIZE)\n","total_steps = total_epochs * (NUM_TRAINING_IMAGES//BATCH_SIZE)\n","\n","@tf.function\n","def lrfn(step):\n","    if step < warmup_steps:\n","        lr = (lr_max - lr_start) / warmup_steps * step + lr_start\n","    else:\n","        progress = (step - warmup_steps) / (total_steps - warmup_steps)\n","        lr = lr_max * (0.5 * (1.0 + tf.math.cos(np.pi * ((num_cycles * progress) % 1.0))))\n","        if lr_min is not None:\n","            lr = tf.math.maximum(lr_min, float(lr))\n","\n","    return lr\n","\n","\n","# rng = [i for i in range(total_epochs)]\n","rng = [i for i in range(total_steps)]\n","y = [lrfn(tf.cast(x, tf.float32)) for x in rng]\n","\n","sns.set(style='whitegrid')\n","fig, ax = plt.subplots(figsize=(20, 6))\n","plt.plot(rng, y)\n","\n","print(f'{total_steps} total steps and {NUM_TRAINING_IMAGES//BATCH_SIZE} steps per epoch')\n","print(f'Learning rate schedule: {y[0]:.3g} to {max(y):.3g} to {y[-1]:.3g}')"],"execution_count":21,"outputs":[{"output_type":"stream","text":["7510 total steps and 751 steps per epoch\n","Learning rate schedule: 1e-08 to 8e-05 to 1e-08\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x432 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"OMIrA5jxCaO5","papermill":{"duration":0.112158,"end_time":"2021-01-20T23:02:48.166235","exception":false,"start_time":"2021-01-20T23:02:48.054077","status":"completed"},"tags":[]},"source":["# Model"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:02:48.402810Z","iopub.status.busy":"2021-01-20T23:02:48.402111Z","iopub.status.idle":"2021-01-20T23:02:48.406439Z","shell.execute_reply":"2021-01-20T23:02:48.405740Z"},"id":"pRksD6K6CaO5","papermill":{"duration":0.126526,"end_time":"2021-01-20T23:02:48.406566","exception":false,"start_time":"2021-01-20T23:02:48.280040","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1612536547414,"user_tz":-540,"elapsed":575160,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["def model_fn(input_shape, N_CLASSES):\n","    inputs = L.Input(shape=input_shape, name='input_image')\n","    base_model = efn.EfficientNetB4(input_tensor=inputs, \n","                                    include_top=False, \n","                                    weights='noisy-student', \n","                                    pooling='avg')\n","    base_model.trainable = False\n","    x = L.Dropout(.5)(base_model.output)\n","    output = L.Dense(N_CLASSES, activation='softmax', name='output')(x)\n","    model = Model(inputs=inputs, outputs=output)\n","\n","    return model"],"execution_count":22,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:02:48.640007Z","iopub.status.busy":"2021-01-20T23:02:48.638735Z","iopub.status.idle":"2021-01-20T23:02:48.642985Z","shell.execute_reply":"2021-01-20T23:02:48.643690Z"},"id":"4zl0qy-pcR-A","papermill":{"duration":0.122772,"end_time":"2021-01-20T23:02:48.643846","exception":false,"start_time":"2021-01-20T23:02:48.521074","status":"completed"},"tags":[],"executionInfo":{"status":"ok","timestamp":1612536547415,"user_tz":-540,"elapsed":575157,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}}},"source":["#help(strategy)"],"execution_count":23,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hMc0tk0VCaO5","papermill":{"duration":0.114465,"end_time":"2021-01-20T23:02:48.871581","exception":false,"start_time":"2021-01-20T23:02:48.757116","status":"completed"},"tags":[]},"source":["# Training"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:02:49.104256Z","iopub.status.busy":"2021-01-20T23:02:49.103030Z","iopub.status.idle":"2021-01-20T23:41:32.330134Z","shell.execute_reply":"2021-01-20T23:41:32.329366Z"},"id":"8HrFGFRNCaO5","papermill":{"duration":2323.344808,"end_time":"2021-01-20T23:41:32.330270","exception":false,"start_time":"2021-01-20T23:02:48.985462","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1612546952355,"user_tz":-540,"elapsed":10980093,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"94709493-2288-42b3-8e4c-d484c0ce266a"},"source":["skf = KFold(n_splits=N_FOLDS, shuffle=True, random_state=seed)\n","oof_pred = []; oof_labels = []; history_list = []\n","\n","for fold,(idxT, idxV) in enumerate(skf.split(np.arange(50))):\n","    if fold >= FOLDS_USED:\n","        break\n","    if tpu: tf.tpu.experimental.initialize_tpu_system(tpu)\n","    K.clear_session()\n","    print(f'\\nFOLD: {fold+1}')\n","    print(f'TRAIN: {idxT} VALID: {idxV}')\n","\n","    # Create train and validation sets\n","    FILENAMES_COMP = tf.io.gfile.glob([GCS_PATH + '/Id_train%.2i*.tfrec' % x for x in idxT])\n","    FILENAMES_2019 = tf.io.gfile.glob([GCS_PATH_EXT + '/Id_train%.2i*.tfrec' % x for x in idxT])\n","\n","    FILENAMES_COMP_CBB = tf.io.gfile.glob([GCS_PATH_CLASSES + '/CBB%.2i*.tfrec' % x for x in idxT])\n","    FILENAMES_COMP_CBSD = tf.io.gfile.glob([GCS_PATH_CLASSES + '/CBSD%.2i*.tfrec' % x for x in idxT])\n","    FILENAMES_COMP_CGM = tf.io.gfile.glob([GCS_PATH_CLASSES + '/CGM%.2i*.tfrec' % x for x in idxT])\n","    FILENAMES_COMP_Healthy = tf.io.gfile.glob([GCS_PATH_CLASSES + '/Healthy%.2i*.tfrec' % x for x in idxT])\n","    \n","    FILENAMES_2019_CBB = tf.io.gfile.glob([GCS_PATH_EXT_CLASSES + '/CBB%.2i*.tfrec' % x for x in idxT])\n","    FILENAMES_2019_CBSD = tf.io.gfile.glob([GCS_PATH_EXT_CLASSES + '/CBSD%.2i*.tfrec' % x for x in idxT])\n","    FILENAMES_2019_CGM = tf.io.gfile.glob([GCS_PATH_EXT_CLASSES + '/CGM%.2i*.tfrec' % x for x in idxT])\n","    FILENAMES_2019_Healthy = tf.io.gfile.glob([GCS_PATH_EXT_CLASSES + '/Healthy%.2i*.tfrec' % x for x in idxT])\n","\n","    TRAIN_FILENAMES = (FILENAMES_COMP + \n","                       FILENAMES_2019 + \n","                       (2 * FILENAMES_COMP_CBB) + \n","                       (2 * FILENAMES_2019_CBB) + \n","                       (2 * FILENAMES_COMP_CBSD) + \n","                       (2 * FILENAMES_2019_CBSD) + \n","                       (2 * FILENAMES_COMP_CGM) + \n","                       (2 * FILENAMES_2019_CGM) + \n","                       (2 * FILENAMES_COMP_Healthy) + \n","                       (2 * FILENAMES_2019_Healthy))\n","    \n","    VALID_FILENAMES = tf.io.gfile.glob([GCS_PATH + '/Id_train%.2i*.tfrec' % x for x in idxV])\n","    np.random.shuffle(TRAIN_FILENAMES)\n","    \n","    ct_train = count_data_items(TRAIN_FILENAMES)\n","    ct_valid = count_data_items(VALID_FILENAMES)\n","    \n","    step_size = (ct_train // BATCH_SIZE)\n","    valid_step_size = (ct_valid // BATCH_SIZE)\n","    total_steps=(total_epochs * step_size)\n","    warmup_steps=(warmup_epochs * step_size)\n","    \n","    \n","    # Build TF datasets\n","    train_ds = strategy.experimental_distribute_dataset(get_dataset(TRAIN_FILENAMES, repeated=True, augment=True))\n","    valid_ds = strategy.experimental_distribute_dataset(get_dataset(VALID_FILENAMES, ordered=True, repeated=True, cached=True))\n","    train_data_iter = iter(train_ds)\n","    valid_data_iter = iter(valid_ds)\n","    \n","    \n","    # Step functions\n","    @tf.function\n","    def train_step(data_iter):\n","        def train_step_fn(x, y):\n","            with tf.GradientTape() as tape:\n","                probabilities = model(x, training=True)\n","                loss = loss_fn(y, probabilities, label_smoothing=.3)\n","            gradients = tape.gradient(loss, model.trainable_variables)\n","            optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n","            # update metrics\n","            train_accuracy.update_state(y, probabilities)\n","            train_loss.update_state(loss)\n","        for _ in tf.range(step_size):\n","            if COLAB:\n","                #print(COLAB)\n","                strategy.experimental_run_v2(train_step_fn, next(data_iter))\n","            else:\n","                strategy.experimental_run_v2(train_step_fn, next(data_iter))\n","\n","    @tf.function\n","    def valid_step(data_iter):\n","        def valid_step_fn(x, y):\n","            probabilities = model(x, training=False)\n","            loss = loss_fn(y, probabilities)\n","            # update metrics\n","            valid_accuracy.update_state(y, probabilities)\n","            valid_loss.update_state(loss)\n","        for _ in tf.range(valid_step_size):\n","            if COLAB:\n","                strategy.experimental_run_v2(valid_step_fn, next(data_iter))\n","            else:\n","                strategy.experimental_run_v2(valid_step_fn, next(data_iter))\n","    \n","    \n","    # Model\n","    model_path = models_path+f'model_{fold}.h5'\n","    with strategy.scope():\n","        model = model_fn((None, None, CHANNELS), N_CLASSES)\n","        unfreeze_model(model) # unfreeze all layers except \"batch normalization\"\n","        \n","        optimizer = optimizers.Adam(learning_rate=lambda: lrfn(tf.cast(optimizer.iterations, tf.float32)))\n","        loss_fn = losses.categorical_crossentropy\n","\n","        train_accuracy = metrics.CategoricalAccuracy()\n","        valid_accuracy = metrics.CategoricalAccuracy()\n","        train_loss = metrics.Sum()\n","        valid_loss = metrics.Sum()\n","    \n","    \n","    # Setup training loop\n","    step = 0\n","    epoch_steps = 0\n","    patience_cnt = 0\n","    best_val = 0\n","    history = {'loss': [], 'val_loss': [], 'accuracy': [], 'val_accuracy': []}\n","\n","    ### Train model\n","    for epoch in range(EPOCHS):\n","        epoch_start_time = time.time()\n","\n","        # Run training step\n","        train_step(train_data_iter)\n","        epoch_steps += step_size\n","        step += step_size\n","            \n","\n","        # Validation run at the end of each epoch\n","        if (step // step_size) > epoch:\n","            # Validation run\n","            valid_epoch_steps = 0\n","            valid_step(valid_data_iter)\n","            valid_epoch_steps += valid_step_size\n","\n","            # Compute metrics\n","            history['accuracy'].append(train_accuracy.result().numpy())\n","            history['loss'].append(train_loss.result().numpy() / (BATCH_SIZE * epoch_steps))\n","            history['val_accuracy'].append(valid_accuracy.result().numpy())\n","            history['val_loss'].append(valid_loss.result().numpy() / (BATCH_SIZE * valid_epoch_steps))\n","\n","            # Report metrics\n","            epoch_time = time.time() - epoch_start_time\n","            print(f'\\nEPOCH {epoch+1}/{EPOCHS}')\n","            print(f'time: {epoch_time:0.1f}s',\n","                  f\"loss: {history['loss'][-1]:0.4f}\",\n","                  f\"accuracy: {history['accuracy'][-1]:0.4f}\",\n","                  f\"val_loss: {history['val_loss'][-1]:0.4f}\",\n","                  f\"val_accuracy: {history['val_accuracy'][-1]:0.4f}\",\n","                  f'lr: {lrfn(tf.cast(optimizer.iterations, tf.int32).numpy()):0.4g}')\n","\n","            # Early stopping monitor\n","            if history['val_accuracy'][-1] >= best_val:\n","                best_val = history['val_accuracy'][-1]\n","                model.save_weights(model_path)\n","                print(f'Saved model weights at \"{model_path}\"')\n","                patience_cnt = 1\n","            else:\n","                patience_cnt += 1\n","            # if patience_cnt > ES_PATIENCE:\n","            #     print(f'Epoch {epoch:05d}: early stopping')\n","            #     break\n","\n","                \n","            # Set up next epoch\n","            epoch = step // step_size\n","            epoch_steps = 0\n","            train_accuracy.reset_states()\n","            train_loss.reset_states()\n","            valid_accuracy.reset_states()\n","            valid_loss.reset_states()\n","    \n","    \n","    ### RESULTS\n","    print(f\"#### FOLD {fold+1} OOF Accuracy = {np.max(history['val_accuracy']):.3f}\")\n","    \n","    history_list.append(history)\n","    # Load best model weights\n","    model.load_weights(model_path)\n","\n","    # OOF predictions\n","    ds_valid = get_dataset(VALID_FILENAMES, ordered=True)\n","    oof_labels.append([target.numpy() for img, target in iter(ds_valid.unbatch())])\n","    x_oof = ds_valid.map(lambda image, target: image)\n","    oof_pred.append(np.argmax(model.predict(x_oof), axis=-1))"],"execution_count":24,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.54.53.114:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.54.53.114:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.54.53.114:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.54.53.114:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","FOLD: 1\n","TRAIN: [ 0  1  3 ... 47 48 49] VALID: [ 2  4 10 11 22 27 28 31 38 41]\n","Downloading data from https://github.com/qubvel/efficientnet/releases/download/v0.0.1/efficientnet-b4_noisy-student_notop.h5\n","71680000/71678424 [==============================] - 1s 0us/step\n","WARNING:tensorflow:From <ipython-input-24-d506d5d257e7>:71: StrategyBase.experimental_run_v2 (from tensorflow.python.distribute.distribute_lib) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","renamed to `run`\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:From <ipython-input-24-d506d5d257e7>:71: StrategyBase.experimental_run_v2 (from tensorflow.python.distribute.distribute_lib) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","renamed to `run`\n"],"name":"stderr"},{"output_type":"stream","text":["\n","EPOCH 1/10\n","time: 309.0s loss: 1.3936 accuracy: 0.5512 val_loss: 0.6974 val_accuracy: 0.8409 lr: 8e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 2/10\n","time: 166.5s loss: 1.2538 accuracy: 0.7076 val_loss: 0.5927 val_accuracy: 0.8615 lr: 7.759e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 3/10\n","time: 165.8s loss: 1.2293 accuracy: 0.7242 val_loss: 0.5853 val_accuracy: 0.8698 lr: 7.064e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 4/10\n","WARNING:tensorflow:5 out of the last 230 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:5 out of the last 230 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 166.1s loss: 1.2180 accuracy: 0.7352 val_loss: 0.5858 val_accuracy: 0.8677 lr: 6e-05\n","\n","EPOCH 5/10\n","WARNING:tensorflow:6 out of the last 231 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:6 out of the last 231 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 169.6s loss: 1.2065 accuracy: 0.7451 val_loss: 0.5553 val_accuracy: 0.8816 lr: 4.695e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 6/10\n","WARNING:tensorflow:7 out of the last 232 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:7 out of the last 232 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 167.3s loss: 1.1954 accuracy: 0.7550 val_loss: 0.5325 val_accuracy: 0.8871 lr: 3.305e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 7/10\n","WARNING:tensorflow:8 out of the last 233 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:8 out of the last 233 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 168.6s loss: 1.1868 accuracy: 0.7657 val_loss: 0.5421 val_accuracy: 0.8835 lr: 2e-05\n","\n","EPOCH 8/10\n","WARNING:tensorflow:9 out of the last 234 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:9 out of the last 234 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 168.9s loss: 1.1832 accuracy: 0.7691 val_loss: 0.5332 val_accuracy: 0.8857 lr: 9.358e-06\n","\n","EPOCH 9/10\n","WARNING:tensorflow:10 out of the last 235 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:10 out of the last 235 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 167.2s loss: 1.1762 accuracy: 0.7756 val_loss: 0.5183 val_accuracy: 0.8906 lr: 2.412e-06\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 10/10\n","WARNING:tensorflow:11 out of the last 236 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 236 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 169.1s loss: 1.1755 accuracy: 0.7768 val_loss: 0.5234 val_accuracy: 0.8920 lr: 8e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","#### FOLD 1 OOF Accuracy = 0.892\n","WARNING:tensorflow:TPU system grpc://10.54.53.114:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.54.53.114:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.54.53.114:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.54.53.114:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","FOLD: 2\n","TRAIN: [ 0  1  2 ... 46 47 49] VALID: [ 7 14 18 26 29 33 34 35 45 48]\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","EPOCH 1/10\n","time: 309.9s loss: 1.4038 accuracy: 0.5379 val_loss: 0.6528 val_accuracy: 0.8556 lr: 8e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 2/10\n","time: 167.3s loss: 1.2531 accuracy: 0.7066 val_loss: 0.5906 val_accuracy: 0.8672 lr: 7.759e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 3/10\n","time: 167.0s loss: 1.2316 accuracy: 0.7202 val_loss: 0.5849 val_accuracy: 0.8710 lr: 7.064e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 4/10\n","WARNING:tensorflow:5 out of the last 230 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:5 out of the last 230 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 165.9s loss: 1.2178 accuracy: 0.7324 val_loss: 0.5045 val_accuracy: 0.8854 lr: 6e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 5/10\n","WARNING:tensorflow:6 out of the last 231 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:6 out of the last 231 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 167.1s loss: 1.2094 accuracy: 0.7414 val_loss: 0.5538 val_accuracy: 0.8783 lr: 4.695e-05\n","\n","EPOCH 6/10\n","WARNING:tensorflow:7 out of the last 232 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:7 out of the last 232 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 167.6s loss: 1.1983 accuracy: 0.7451 val_loss: 0.5533 val_accuracy: 0.8755 lr: 3.305e-05\n","\n","EPOCH 7/10\n","WARNING:tensorflow:8 out of the last 233 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:8 out of the last 233 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 169.0s loss: 1.1904 accuracy: 0.7583 val_loss: 0.5372 val_accuracy: 0.8859 lr: 2e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 8/10\n","WARNING:tensorflow:9 out of the last 234 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:9 out of the last 234 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 169.0s loss: 1.1867 accuracy: 0.7612 val_loss: 0.5247 val_accuracy: 0.8911 lr: 9.358e-06\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 9/10\n","WARNING:tensorflow:10 out of the last 235 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:10 out of the last 235 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 168.0s loss: 1.1821 accuracy: 0.7659 val_loss: 0.5259 val_accuracy: 0.8920 lr: 2.412e-06\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 10/10\n","WARNING:tensorflow:11 out of the last 236 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 236 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 168.9s loss: 1.1786 accuracy: 0.7694 val_loss: 0.5320 val_accuracy: 0.8887 lr: 8e-05\n","#### FOLD 2 OOF Accuracy = 0.892\n","WARNING:tensorflow:TPU system grpc://10.54.53.114:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.54.53.114:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.54.53.114:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.54.53.114:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","FOLD: 3\n","TRAIN: [ 0  1  2 ... 47 48 49] VALID: [ 8 13 15 16 20 25 30 32 42 43]\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","EPOCH 1/10\n","time: 317.7s loss: 1.3891 accuracy: 0.5517 val_loss: 0.6551 val_accuracy: 0.8509 lr: 8e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 2/10\n","time: 170.2s loss: 1.2550 accuracy: 0.7053 val_loss: 0.6529 val_accuracy: 0.8509 lr: 7.759e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 3/10\n","time: 167.9s loss: 1.2287 accuracy: 0.7262 val_loss: 0.6076 val_accuracy: 0.8698 lr: 7.064e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 4/10\n","time: 170.1s loss: 1.2184 accuracy: 0.7312 val_loss: 0.5580 val_accuracy: 0.8826 lr: 6e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 5/10\n","time: 170.1s loss: 1.2075 accuracy: 0.7420 val_loss: 0.5158 val_accuracy: 0.8913 lr: 4.695e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 6/10\n","time: 171.1s loss: 1.1987 accuracy: 0.7541 val_loss: 0.5399 val_accuracy: 0.8852 lr: 3.305e-05\n","\n","EPOCH 7/10\n","time: 168.9s loss: 1.1876 accuracy: 0.7658 val_loss: 0.5397 val_accuracy: 0.8892 lr: 2e-05\n","\n","EPOCH 8/10\n","time: 168.4s loss: 1.1850 accuracy: 0.7680 val_loss: 0.5525 val_accuracy: 0.8821 lr: 9.358e-06\n","\n","EPOCH 9/10\n","time: 171.4s loss: 1.1784 accuracy: 0.7739 val_loss: 0.5175 val_accuracy: 0.8925 lr: 2.412e-06\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 10/10\n","time: 170.9s loss: 1.1782 accuracy: 0.7735 val_loss: 0.5320 val_accuracy: 0.8904 lr: 8e-05\n","#### FOLD 3 OOF Accuracy = 0.893\n","WARNING:tensorflow:TPU system grpc://10.54.53.114:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.54.53.114:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.54.53.114:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.54.53.114:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","FOLD: 4\n","TRAIN: [ 0  2  3 ... 46 47 48] VALID: [ 1  5  6 12 17 23 24 37 40 49]\n","\n","EPOCH 1/10\n","time: 320.9s loss: 1.3954 accuracy: 0.5544 val_loss: 0.6433 val_accuracy: 0.8494 lr: 8e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_3.h5\"\n","\n","EPOCH 2/10\n","time: 175.8s loss: 1.2547 accuracy: 0.7043 val_loss: 0.5244 val_accuracy: 0.8904 lr: 7.759e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_3.h5\"\n","\n","EPOCH 3/10\n","time: 172.7s loss: 1.2337 accuracy: 0.7154 val_loss: 0.5525 val_accuracy: 0.8845 lr: 7.064e-05\n","\n","EPOCH 4/10\n","WARNING:tensorflow:5 out of the last 230 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:5 out of the last 230 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 172.5s loss: 1.2201 accuracy: 0.7302 val_loss: 0.5886 val_accuracy: 0.8797 lr: 6e-05\n","\n","EPOCH 5/10\n","WARNING:tensorflow:6 out of the last 231 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:6 out of the last 231 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 173.3s loss: 1.2121 accuracy: 0.7358 val_loss: 0.5240 val_accuracy: 0.8991 lr: 4.695e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_3.h5\"\n","\n","EPOCH 6/10\n","WARNING:tensorflow:7 out of the last 232 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:7 out of the last 232 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 173.2s loss: 1.2023 accuracy: 0.7482 val_loss: 0.5236 val_accuracy: 0.8918 lr: 3.305e-05\n","\n","EPOCH 7/10\n","WARNING:tensorflow:8 out of the last 233 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:8 out of the last 233 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 173.6s loss: 1.1915 accuracy: 0.7583 val_loss: 0.5117 val_accuracy: 0.8873 lr: 2e-05\n","\n","EPOCH 8/10\n","WARNING:tensorflow:9 out of the last 234 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:9 out of the last 234 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 173.0s loss: 1.1850 accuracy: 0.7642 val_loss: 0.5323 val_accuracy: 0.8913 lr: 9.358e-06\n","\n","EPOCH 9/10\n","WARNING:tensorflow:10 out of the last 235 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:10 out of the last 235 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 173.6s loss: 1.1810 accuracy: 0.7712 val_loss: 0.5127 val_accuracy: 0.9018 lr: 2.412e-06\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_3.h5\"\n","\n","EPOCH 10/10\n","WARNING:tensorflow:11 out of the last 236 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 236 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 173.0s loss: 1.1788 accuracy: 0.7717 val_loss: 0.5180 val_accuracy: 0.8965 lr: 8e-05\n","#### FOLD 4 OOF Accuracy = 0.902\n","WARNING:tensorflow:TPU system grpc://10.54.53.114:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.54.53.114:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.54.53.114:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.54.53.114:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","FOLD: 5\n","TRAIN: [ 1  2  4 ... 45 48 49] VALID: [ 0  3  9 19 21 36 39 44 46 47]\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f902a80ba60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","EPOCH 1/10\n","time: 322.4s loss: 1.4015 accuracy: 0.5431 val_loss: 0.7107 val_accuracy: 0.8291 lr: 8e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 2/10\n","time: 172.3s loss: 1.2590 accuracy: 0.7036 val_loss: 0.5535 val_accuracy: 0.8800 lr: 7.759e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 3/10\n","time: 174.6s loss: 1.2337 accuracy: 0.7229 val_loss: 0.5709 val_accuracy: 0.8807 lr: 7.064e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 4/10\n","time: 173.7s loss: 1.2179 accuracy: 0.7349 val_loss: 0.5637 val_accuracy: 0.8854 lr: 6e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 5/10\n","time: 173.4s loss: 1.2112 accuracy: 0.7380 val_loss: 0.5305 val_accuracy: 0.8911 lr: 4.695e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 6/10\n","time: 172.0s loss: 1.1999 accuracy: 0.7519 val_loss: 0.5323 val_accuracy: 0.8885 lr: 3.305e-05\n","\n","EPOCH 7/10\n","time: 172.3s loss: 1.1908 accuracy: 0.7596 val_loss: 0.5387 val_accuracy: 0.8925 lr: 2e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 8/10\n","time: 173.2s loss: 1.1876 accuracy: 0.7613 val_loss: 0.5295 val_accuracy: 0.8878 lr: 9.358e-06\n","\n","EPOCH 9/10\n","time: 175.4s loss: 1.1811 accuracy: 0.7710 val_loss: 0.5106 val_accuracy: 0.8925 lr: 2.412e-06\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 10/10\n","time: 171.7s loss: 1.1785 accuracy: 0.7722 val_loss: 0.5190 val_accuracy: 0.8883 lr: 8e-05\n","#### FOLD 5 OOF Accuracy = 0.893\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"NQyHtXnRCaO5","papermill":{"duration":0.130935,"end_time":"2021-01-20T23:41:32.592224","exception":false,"start_time":"2021-01-20T23:41:32.461289","status":"completed"},"tags":[]},"source":["## Model loss graph"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:41:32.862698Z","iopub.status.busy":"2021-01-20T23:41:32.861475Z","iopub.status.idle":"2021-01-20T23:41:35.936240Z","shell.execute_reply":"2021-01-20T23:41:35.935506Z"},"id":"_7pUdch3CaO6","papermill":{"duration":3.212527,"end_time":"2021-01-20T23:41:35.936368","exception":false,"start_time":"2021-01-20T23:41:32.723841","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1612546955851,"user_tz":-540,"elapsed":10983582,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"f121ec3a-d990-4d4d-830a-d91678ff329d"},"source":["for fold, history in enumerate(history_list):\n","    print(f'\\nFOLD: {fold+1}')\n","    plot_metrics(history)"],"execution_count":25,"outputs":[{"output_type":"stream","text":["\n","FOLD: 1\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 2 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","FOLD: 2\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 2 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","FOLD: 3\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 2 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","FOLD: 4\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 2 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","FOLD: 5\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 2 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"ImheYrtKCaO7","papermill":{"duration":0.140565,"end_time":"2021-01-20T23:41:36.235070","exception":false,"start_time":"2021-01-20T23:41:36.094505","status":"completed"},"tags":[]},"source":["# Model evaluation\n","\n","Now we can evaluate the performance of the model, first, we can evaluate the usual metrics like, `accuracy`, `precision`, `recall`, and `f1-score`, `scikit-learn` provides the perfect function for this `classification_report`.\n","\n","We are evaluating the model on the `OOF` predictions, it stands for `Out Of Fold`, since we are training using `K-Fold` our model will see all the data, and the correct way to evaluate each fold is by looking at the predictions that are not from that fold.\n","\n","## OOF metrics"]},{"cell_type":"markdown","metadata":{"id":"I_QvO8rPCaO7","papermill":{"duration":0.142773,"end_time":"2021-01-20T23:41:36.524904","exception":false,"start_time":"2021-01-20T23:41:36.382131","status":"completed"},"tags":[]},"source":["#### I am still having some problems to get the real model `OOF` scores while using `TPU Pods`, so the results here and the confusion matrix are just placeholders."]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:41:36.817847Z","iopub.status.busy":"2021-01-20T23:41:36.816550Z","iopub.status.idle":"2021-01-20T23:41:36.871365Z","shell.execute_reply":"2021-01-20T23:41:36.870279Z"},"id":"q7TfhkICCaO7","papermill":{"duration":0.205034,"end_time":"2021-01-20T23:41:36.871548","exception":false,"start_time":"2021-01-20T23:41:36.666514","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1612546955851,"user_tz":-540,"elapsed":10983577,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"bb51797a-2878-4be1-fc07-3e2810b38c6d"},"source":["y_true = np.concatenate(oof_labels)\n","y_true = np.argmax(y_true, axis=-1)\n","y_pred = np.concatenate(oof_pred)\n","\n","print(classification_report(y_true, y_pred, target_names=CLASSES))"],"execution_count":26,"outputs":[{"output_type":"stream","text":["                              precision    recall  f1-score   support\n","\n","    Cassava Bacterial Blight       0.65      0.71      0.68      1086\n","Cassava Brown Streak Disease       0.84      0.81      0.83      2189\n","        Cassava Green Mottle       0.78      0.82      0.80      2386\n","      Cassava Mosaic Disease       0.97      0.95      0.96     13158\n","                     Healthy       0.74      0.76      0.75      2576\n","\n","                    accuracy                           0.89     21395\n","                   macro avg       0.79      0.81      0.80     21395\n","                weighted avg       0.89      0.89      0.89     21395\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"pIAJafCnCaO7","papermill":{"duration":0.1407,"end_time":"2021-01-20T23:41:37.153525","exception":false,"start_time":"2021-01-20T23:41:37.012825","status":"completed"},"tags":[]},"source":["# Confusion matrix\n","\n","Let's also take a look at the confusion matrix, this will give us an idea about what classes the model is mixing or having a hard time."]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:41:37.451948Z","iopub.status.busy":"2021-01-20T23:41:37.451220Z","iopub.status.idle":"2021-01-20T23:41:37.902193Z","shell.execute_reply":"2021-01-20T23:41:37.902770Z"},"id":"dw2F8Wk2CaO7","papermill":{"duration":0.608362,"end_time":"2021-01-20T23:41:37.902957","exception":false,"start_time":"2021-01-20T23:41:37.294595","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1612546956931,"user_tz":-540,"elapsed":10984653,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"c5293580-e9a4-4079-a8ff-238f1283a4f8"},"source":["fig, ax = plt.subplots(1, 1, figsize=(20, 12))\n","cfn_matrix = confusion_matrix(y_true, y_pred, labels=range(len(CLASSES)))\n","cfn_matrix = (cfn_matrix.T / cfn_matrix.sum(axis=1)).T\n","df_cm = pd.DataFrame(cfn_matrix, index=CLASSES, columns=CLASSES)\n","ax = sns.heatmap(df_cm, cmap='Blues', annot=True, fmt='.2f', linewidths=.5).set_title('Train', fontsize=30)\n","plt.show()"],"execution_count":27,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x864 with 2 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"AaZVX_ZhCaO7","papermill":{"duration":0.14275,"end_time":"2021-01-20T23:41:38.189478","exception":false,"start_time":"2021-01-20T23:41:38.046728","status":"completed"},"tags":[]},"source":["# Visualize predictions\n","\n","Finally, it is a good practice to always inspect some of the model's prediction by looking at the data, this can give an idea if the model is getting some predictions wrong because the data is really hard, of if it is because the model is actually bad.\n","\n","\n","### Class map\n","```\n","0: Cassava Bacterial Blight (CBB)\n","1: Cassava Brown Streak Disease (CBSD)\n","2: Cassava Green Mottle (CGM)\n","3: Cassava Mosaic Disease (CMD)\n","4: Healthy\n","```\n","\n","\n","## Train set"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:41:38.486711Z","iopub.status.busy":"2021-01-20T23:41:38.478610Z","iopub.status.idle":"2021-01-20T23:42:07.973278Z","shell.execute_reply":"2021-01-20T23:42:07.973946Z"},"id":"ExEWWtxyCaO8","papermill":{"duration":29.642469,"end_time":"2021-01-20T23:42:07.974121","exception":false,"start_time":"2021-01-20T23:41:38.331652","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1JkhzDytvWCh6-Q3et9Up4Xmv8SsOO9ZN"},"executionInfo":{"status":"ok","timestamp":1612546983375,"user_tz":-540,"elapsed":11011093,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"04c67097-6188-4a90-cdd6-05cd312ebcdb"},"source":["train_dataset = get_dataset(TRAINING_FILENAMES, ordered=True)\n","x_samp, y_samp = dataset_to_numpy_util(train_dataset, 18)\n","y_samp = np.argmax(y_samp, axis=-1)\n","\n","x_samp_1, y_samp_1 = x_samp[:9,:,:,:], y_samp[:9]\n","samp_preds_1 = model.predict(x_samp_1, batch_size=9)\n","display_9_images_with_predictions(x_samp_1, samp_preds_1, y_samp_1)\n","\n","x_samp_2, y_samp_2 = x_samp[9:,:,:,:], y_samp[9:]\n","samp_preds_2 = model.predict(x_samp_2, batch_size=9)\n","display_9_images_with_predictions(x_samp_2, samp_preds_2, y_samp_2)"],"execution_count":28,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:42:08.485006Z","iopub.status.busy":"2021-01-20T23:42:08.479584Z","iopub.status.idle":"2021-01-20T23:42:08.490084Z","shell.execute_reply":"2021-01-20T23:42:08.489432Z"},"id":"h9CeTJAYKYQd","papermill":{"duration":0.271568,"end_time":"2021-01-20T23:42:08.490212","exception":false,"start_time":"2021-01-20T23:42:08.218644","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1612546983376,"user_tz":-540,"elapsed":11011090,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"84c52614-21d0-473c-9d72-a7f0a1a4b253"},"source":["\n","save_data=True# You can immediately create a kaggle dataset from your models\n","if COLAB and save_data:\n","  \n","    import json\n","\n","\n","    \n","    data = {\"title\": \"Cassava Leaf Disease\", \n","        \"id\": \"aikhmelnytskyy/CassavaLeafDisease\", \n","        \"licenses\": [\n","                     {\n","                         \"name\": \"CC0-1.0\"\n","                      }\n","                     ]}\n","    \n","\n","    # for kaggle api Connection\n","    \n","    !kaggle datasets init -p /content/drive/MyDrive/Colab Notebooks/Cassava/\n","    \n","    with open(\"/content/drive/MyDrive/Colab Notebooks/Cassava/dataset-metadata.json\", \"w\", encoding=\"utf-8\") as file:\n","        json.dump(data, file)\n","    \n","    #if new dataset\n","    !kaggle datasets create -p /content/drive/MyDrive/Models/Cassava/\n","    #If you’d like to upload a new version of an existing dataset\n","    #!kaggle datasets version -p /content/drive/MyDrive/Models/Cassava/ -m \"Your message here\""],"execution_count":29,"outputs":[{"output_type":"stream","text":["Traceback (most recent call last):\n","  File \"/usr/local/bin/kaggle\", line 5, in <module>\n","    from kaggle.cli import main\n","  File \"/usr/local/lib/python3.6/dist-packages/kaggle/__init__.py\", line 23, in <module>\n","    api.authenticate()\n","  File \"/usr/local/lib/python3.6/dist-packages/kaggle/api/kaggle_api_extended.py\", line 166, in authenticate\n","    self.config_file, self.config_dir))\n","OSError: Could not find kaggle.json. Make sure it's located in /root/.kaggle. Or use the environment method.\n","Traceback (most recent call last):\n","  File \"/usr/local/bin/kaggle\", line 5, in <module>\n","    from kaggle.cli import main\n","  File \"/usr/local/lib/python3.6/dist-packages/kaggle/__init__.py\", line 23, in <module>\n","    api.authenticate()\n","  File \"/usr/local/lib/python3.6/dist-packages/kaggle/api/kaggle_api_extended.py\", line 166, in authenticate\n","    self.config_file, self.config_dir))\n","OSError: Could not find kaggle.json. Make sure it's located in /root/.kaggle. Or use the environment method.\n"],"name":"stdout"}]}]}