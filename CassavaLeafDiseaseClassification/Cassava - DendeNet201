{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.6"},"papermill":{"duration":2705.650201,"end_time":"2021-01-20T23:42:08.938285","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2021-01-20T22:57:03.288084","version":"2.1.0"},"colab":{"name":"Cassava - DendeNet201","provenance":[{"file_id":"1k3GJEDIw5B9smNhmCO9z5wJn0_fz7V6e","timestamp":1611698282872},{"file_id":"1luIn2wZfy_fopw5CZhO7tSwz3QfPBeu0","timestamp":1611649047226},{"file_id":"14lxnkhkxhL-leLaM7_ewQrCSbDr617ZZ","timestamp":1611576808109}],"collapsed_sections":[]},"accelerator":"TPU"},"cells":[{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:08.648534Z","iopub.status.busy":"2021-01-20T22:57:08.647654Z","iopub.status.idle":"2021-01-20T22:57:08.650554Z","shell.execute_reply":"2021-01-20T22:57:08.651069Z"},"papermill":{"duration":0.038327,"end_time":"2021-01-20T22:57:08.651252","exception":false,"start_time":"2021-01-20T22:57:08.612925","status":"completed"},"tags":[],"id":"BkVGwREBxGQy"},"source":["EPOCHS = 10 \n","HEIGHT = 512\n","WIDTH = 512\n","HEIGHT_RS = 512\n","WIDTH_RS = 512\n","CHANNELS = 3\n","N_CLASSES = 5\n","N_FOLDS = 5\n","FOLDS_USED = 5\n","ES_PATIENCE = 5"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:08.738880Z","iopub.status.busy":"2021-01-20T22:57:08.723182Z","iopub.status.idle":"2021-01-20T22:57:11.217685Z","shell.execute_reply":"2021-01-20T22:57:11.216355Z"},"id":"YZBauHrJCkn7","papermill":{"duration":2.537229,"end_time":"2021-01-20T22:57:11.217823","exception":false,"start_time":"2021-01-20T22:57:08.680594","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611699991411,"user_tz":-540,"elapsed":32531,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"e5f57355-a52f-460a-fc51-a5ad22bd366c"},"source":["\n","import os\n","\n","models_path=''\n","\n","COLAB=True\n","import gc\n","!pip install fsspec\n","!pip install gcsfs \n","!pip install --upgrade --force-reinstall --no-deps kaggle\n","\n","from google.colab import drive\n","drive.mount('/content/drive')\n","%cd '/content/drive/MyDrive/Colab Notebooks/Cassava/'\n","\n","#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n","\n","database_base_path = 'gs://kds-0ec1dec9f628bce2bc810157442805632bd221934a9e1921da420af8/'\n","GCS_PATH = 'gs://kds-fbe3004cbea028fa22b3442390e2fa87a1671221c12f3a625d68ec8b'\n","GCS_PATH_EXT = 'gs://kds-ab7b916763a2655169633af5e6c92ce88670b266c929f78a733ea228'\n","GCS_PATH_CLASSES = 'gs://kds-2806d1d6e26d257d7abbe0f782b5e966cdfcb3339627af52bdef8827'\n","GCS_PATH_EXT_CLASSES = 'gs://kds-5abd50ad8ba83979c87ee24b12480f4761755f7a58c6bcfeb7420c76'\n","\n","\n","# \n","#This is a path to a dataset that changes over time, so you need to constantly update it. To update the path just run the code: \n","#GCS_DS_PATH = KaggleDatasets (). Get_gcs_path ()\n","#print (GCS_PATH)......\n","models_path='/content/drive/MyDrive/Colab Notebooks/Cassava/model/'# I created a folder called Models/Cassava on my Google Drive"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting fsspec\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/ec/80/72ac0982cc833945fada4b76c52f0f65435ba4d53bc9317d1c70b5f7e7d5/fsspec-0.8.5-py3-none-any.whl (98kB)\n","\r\u001b[K     |███▎                            | 10kB 15.8MB/s eta 0:00:01\r\u001b[K     |██████▋                         | 20kB 15.1MB/s eta 0:00:01\r\u001b[K     |██████████                      | 30kB 9.4MB/s eta 0:00:01\r\u001b[K     |█████████████▎                  | 40kB 8.7MB/s eta 0:00:01\r\u001b[K     |████████████████▋               | 51kB 5.1MB/s eta 0:00:01\r\u001b[K     |████████████████████            | 61kB 5.7MB/s eta 0:00:01\r\u001b[K     |███████████████████████▏        | 71kB 5.8MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▌     | 81kB 6.5MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▉  | 92kB 6.3MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 102kB 4.5MB/s \n","\u001b[?25hInstalling collected packages: fsspec\n","Successfully installed fsspec-0.8.5\n","Collecting gcsfs\n","  Downloading https://files.pythonhosted.org/packages/85/75/3d669945d41e5aedd5c4333b9dc6192b7839d2bafd04b75b8222d4e92ae0/gcsfs-0.7.1-py2.py3-none-any.whl\n","Requirement already satisfied: google-auth>=1.2 in /usr/local/lib/python3.6/dist-packages (from gcsfs) (1.17.2)\n","Requirement already satisfied: fsspec>=0.8.0 in /usr/local/lib/python3.6/dist-packages (from gcsfs) (0.8.5)\n","Collecting aiohttp\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/ad/e6/d4b6235d776c9b33f853e603efede5aac5a34f71ca9d3877adb30492eb4e/aiohttp-3.7.3-cp36-cp36m-manylinux2014_x86_64.whl (1.3MB)\n","\u001b[K     |████████████████████████████████| 1.3MB 7.4MB/s \n","\u001b[?25hRequirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from gcsfs) (2.23.0)\n","Requirement already satisfied: google-auth-oauthlib in /usr/local/lib/python3.6/dist-packages (from gcsfs) (0.4.2)\n","Requirement already satisfied: decorator in /usr/local/lib/python3.6/dist-packages (from gcsfs) (4.4.2)\n","Requirement already satisfied: setuptools>=40.3.0 in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.2->gcsfs) (51.3.3)\n","Requirement already satisfied: cachetools<5.0,>=2.0.0 in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.2->gcsfs) (4.2.0)\n","Requirement already satisfied: rsa<5,>=3.1.4; python_version >= \"3\" in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.2->gcsfs) (4.6)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.2->gcsfs) (0.2.8)\n","Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.2->gcsfs) (1.15.0)\n","Collecting yarl<2.0,>=1.0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/da/08/52b26b44bce7b818b410aee37c5e424c9ea420c557bca97dc2adac29b151/yarl-1.6.3-cp36-cp36m-manylinux2014_x86_64.whl (293kB)\n","\u001b[K     |████████████████████████████████| 296kB 23.4MB/s \n","\u001b[?25hRequirement already satisfied: chardet<4.0,>=2.0 in /usr/local/lib/python3.6/dist-packages (from aiohttp->gcsfs) (3.0.4)\n","Requirement already satisfied: typing-extensions>=3.6.5 in /usr/local/lib/python3.6/dist-packages (from aiohttp->gcsfs) (3.7.4.3)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.6/dist-packages (from aiohttp->gcsfs) (20.3.0)\n","Collecting idna-ssl>=1.0; python_version < \"3.7\"\n","  Downloading https://files.pythonhosted.org/packages/46/03/07c4894aae38b0de52b52586b24bf189bb83e4ddabfe2e2c8f2419eec6f4/idna-ssl-1.1.0.tar.gz\n","Collecting multidict<7.0,>=4.5\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/a1/35/b22524d6b9cacfb4c5eff413a069bbc17c6ea628e54da5c6c989998ced5f/multidict-5.1.0-cp36-cp36m-manylinux2014_x86_64.whl (141kB)\n","\u001b[K     |████████████████████████████████| 143kB 25.9MB/s \n","\u001b[?25hCollecting async-timeout<4.0,>=3.0\n","  Downloading https://files.pythonhosted.org/packages/e1/1e/5a4441be21b0726c4464f3f23c8b19628372f606755a9d2e46c187e65ec4/async_timeout-3.0.1-py3-none-any.whl\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests->gcsfs) (2020.12.5)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests->gcsfs) (1.24.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->gcsfs) (2.10)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.6/dist-packages (from google-auth-oauthlib->gcsfs) (1.3.0)\n","Requirement already satisfied: pyasn1>=0.1.3 in /usr/local/lib/python3.6/dist-packages (from rsa<5,>=3.1.4; python_version >= \"3\"->google-auth>=1.2->gcsfs) (0.4.8)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.6/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib->gcsfs) (3.1.0)\n","Building wheels for collected packages: idna-ssl\n","  Building wheel for idna-ssl (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for idna-ssl: filename=idna_ssl-1.1.0-cp36-none-any.whl size=3163 sha256=0fb78fec2e45d3d37f2a3ffa343076c2928281e77fd2e6c714c278e12d3ec656\n","  Stored in directory: /root/.cache/pip/wheels/d3/00/b3/32d613e19e08a739751dd6bf998cfed277728f8b2127ad4eb7\n","Successfully built idna-ssl\n","Installing collected packages: multidict, yarl, idna-ssl, async-timeout, aiohttp, gcsfs\n","Successfully installed aiohttp-3.7.3 async-timeout-3.0.1 gcsfs-0.7.1 idna-ssl-1.1.0 multidict-5.1.0 yarl-1.6.3\n","Collecting kaggle\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/99/33/365c0d13f07a2a54744d027fe20b60dacdfdfb33bc04746db6ad0b79340b/kaggle-1.5.10.tar.gz (59kB)\n","\u001b[K     |████████████████████████████████| 61kB 3.8MB/s \n","\u001b[?25hBuilding wheels for collected packages: kaggle\n","  Building wheel for kaggle (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for kaggle: filename=kaggle-1.5.10-cp36-none-any.whl size=73269 sha256=2245e7c1cb6fa3ce1adfc2a80bdc118e96e6a3761e8911862c9f5ac97a4ca187\n","  Stored in directory: /root/.cache/pip/wheels/3a/d1/7e/6ce09b72b770149802c653a02783821629146983ee5a360f10\n","Successfully built kaggle\n","Installing collected packages: kaggle\n","  Found existing installation: kaggle 1.5.10\n","    Uninstalling kaggle-1.5.10:\n","      Successfully uninstalled kaggle-1.5.10\n","Successfully installed kaggle-1.5.10\n","Mounted at /content/drive\n","/content/drive/MyDrive/Colab Notebooks/Cassava\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:11.294556Z","iopub.status.busy":"2021-01-20T22:57:11.290187Z","iopub.status.idle":"2021-01-20T22:57:11.298693Z","shell.execute_reply":"2021-01-20T22:57:11.298011Z"},"id":"5V15UaoACh-M","papermill":{"duration":0.051661,"end_time":"2021-01-20T22:57:11.298873","exception":false,"start_time":"2021-01-20T22:57:11.247212","status":"completed"},"tags":[]},"source":["if COLAB:# Prepare the kaggle.json file for use \n","    from google.colab import files\n","    if not os.path.exists('/content/drive/MyDrive/Colab Notebooks/.kaggle/kaggle.json'):\n","        !mkdir ~/content/drive/MyDrive/Colab Notebooks/.kaggle/\n","        if not os.path.exists('/content/drive/MyDrive/Colab Notebooks/.kaggle/kaggle.json'):\n","            files.upload()\n","            !cp kaggle.json ~/content/drive/MyDrive/Colab Notebooks/.kaggle/\n","        else:\n","            !cp '/content/drive/MyDrive/Colab Notebooks/' ~/.kaggle/  \n","        !chmod 600 ~/content/drive/MyDrive/Colab Notebooks/.kaggle/kaggle.json\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:11.368941Z","iopub.status.busy":"2021-01-20T22:57:11.367797Z","iopub.status.idle":"2021-01-20T22:57:11.371432Z","shell.execute_reply":"2021-01-20T22:57:11.370752Z"},"id":"urYjsB4IV-t5","papermill":{"duration":0.04238,"end_time":"2021-01-20T22:57:11.371550","exception":false,"start_time":"2021-01-20T22:57:11.329170","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611700113859,"user_tz":-540,"elapsed":154968,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"e642e6a8-0170-4293-95b9-4285724f90cf"},"source":["if COLAB:# force TF to 2.2\n","    !pip install -q tensorflow~=2.2.0 tensorflow_gcs_config~=2.2.0\n","    \n","    import requests\n","    import os\n","    import tensorflow as tf\n","    resp = requests.post(\"http://{}:8475/requestversion/{}\".format(os.environ[\"COLAB_TPU_ADDR\"].split(\":\")[0], tf.__version__))\n","    if resp.status_code != 200:\n","      print(\"Failed to switch the TPU to TF {}\".format(version))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\u001b[K     |████████████████████████████████| 516.2MB 34kB/s \n","\u001b[K     |████████████████████████████████| 399kB 32.8MB/s \n","\u001b[K     |████████████████████████████████| 20.1MB 13.1MB/s \n","\u001b[K     |████████████████████████████████| 460kB 49.5MB/s \n","\u001b[K     |████████████████████████████████| 3.0MB 44.6MB/s \n","\u001b[31mERROR: datascience 0.10.6 has requirement folium==0.2.1, but you'll have folium 0.8.3 which is incompatible.\u001b[0m\n","\u001b[31mERROR: albumentations 0.1.12 has requirement imgaug<0.2.7,>=0.2.5, but you'll have imgaug 0.2.9 which is incompatible.\u001b[0m\n","\u001b[?25h"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"DJLH967uCaOv","papermill":{"duration":0.029839,"end_time":"2021-01-20T22:57:11.431128","exception":false,"start_time":"2021-01-20T22:57:11.401289","status":"completed"},"tags":[]},"source":["## Dependencies"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:21.982695Z","iopub.status.busy":"2021-01-20T22:57:21.981961Z","iopub.status.idle":"2021-01-20T22:57:29.891530Z","shell.execute_reply":"2021-01-20T22:57:29.890624Z"},"id":"-iMoIRz7CaOw","papermill":{"duration":7.952124,"end_time":"2021-01-20T22:57:29.891659","exception":false,"start_time":"2021-01-20T22:57:21.939535","status":"completed"},"tags":[]},"source":["import math, os, re, warnings, random, time\n","import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","from matplotlib import pyplot as plt\n","\n","from sklearn.model_selection import KFold\n","from sklearn.metrics import classification_report, confusion_matrix\n","import tensorflow as tf\n","import tensorflow.keras.layers as L\n","import tensorflow.keras.backend as K\n","from tensorflow.keras import optimizers, Sequential, losses, metrics, Model\n","from tensorflow.keras.callbacks import EarlyStopping\n","def seed_everything(seed=0):\n","    random.seed(seed)\n","    np.random.seed(seed)\n","    tf.random.set_seed(seed)\n","    os.environ['PYTHONHASHSEED'] = str(seed)\n","    os.environ['TF_DETERMINISTIC_OPS'] = '1'\n","\n","seed = 0\n","seed_everything(seed)\n","warnings.filterwarnings('ignore')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Z-146lSGCaOx","papermill":{"duration":0.030316,"end_time":"2021-01-20T22:57:29.954488","exception":false,"start_time":"2021-01-20T22:57:29.924172","status":"completed"},"tags":[]},"source":["### Hardware configuration\n","\n","Note that we have `32` cores, this is because the `TPU v2 Pod` have more cores than a single `TPU v3` which has `8` cores."]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:30.071569Z","iopub.status.busy":"2021-01-20T22:57:30.035804Z","iopub.status.idle":"2021-01-20T22:57:34.008561Z","shell.execute_reply":"2021-01-20T22:57:34.010162Z"},"id":"cCFwEwkVCaOy","papermill":{"duration":4.024986,"end_time":"2021-01-20T22:57:34.010410","exception":false,"start_time":"2021-01-20T22:57:29.985424","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611700201263,"user_tz":-540,"elapsed":11033,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"3878abc7-69b3-4216-ecb2-e6eb0a5dd909"},"source":["# TPU or GPU detection\n","# Detect hardware, return appropriate distribution strategy\n","try:\n","    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n","    print(f'Running on TPU {tpu.master()}')\n","except ValueError:\n","    tpu = None\n","    print ('tpu',tpu)\n","\n","if tpu:\n","    tf.config.experimental_connect_to_cluster(tpu)\n","    tf.tpu.experimental.initialize_tpu_system(tpu)\n","    strategy = tf.distribute.experimental.TPUStrategy(tpu)\n","else:\n","    strategy = tf.distribute.get_strategy()\n","\n","AUTO = tf.data.experimental.AUTOTUNE\n","REPLICAS = strategy.num_replicas_in_sync\n","print(f'REPLICAS: {REPLICAS}')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Running on TPU grpc://10.97.70.82:8470\n","INFO:tensorflow:Initializing the TPU system: grpc://10.97.70.82:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.97.70.82:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Found TPU system:\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Found TPU system:\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Cores: 8\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Cores: 8\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Workers: 1\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Workers: 1\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Cores Per Worker: 8\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Num TPU Cores Per Worker: 8\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:CPU:0, CPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:CPU:0, CPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:XLA_CPU:0, XLA_CPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:XLA_CPU:0, XLA_CPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:CPU:0, CPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:CPU:0, CPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:0, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:0, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:1, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:1, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:2, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:2, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:3, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:3, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:4, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:4, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:5, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:5, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:6, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:6, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:7, TPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:7, TPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU_SYSTEM:0, TPU_SYSTEM, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU_SYSTEM:0, TPU_SYSTEM, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:XLA_CPU:0, XLA_CPU, 0, 0)\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:XLA_CPU:0, XLA_CPU, 0, 0)\n"],"name":"stderr"},{"output_type":"stream","text":["REPLICAS: 8\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"NK8TAx9JCaOz","papermill":{"duration":0.035404,"end_time":"2021-01-20T22:57:34.088585","exception":false,"start_time":"2021-01-20T22:57:34.053181","status":"completed"},"tags":[]},"source":["# Model parameters"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:34.155750Z","iopub.status.busy":"2021-01-20T22:57:34.154661Z","iopub.status.idle":"2021-01-20T22:57:34.160980Z","shell.execute_reply":"2021-01-20T22:57:34.160280Z"},"papermill":{"duration":0.040682,"end_time":"2021-01-20T22:57:34.161109","exception":false,"start_time":"2021-01-20T22:57:34.120427","status":"completed"},"tags":[],"id":"hyxJUKF-xGQ2"},"source":["BATCH_SIZE = 8 * REPLICAS\n","LEARNING_RATE = 1e-5 * REPLICAS"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UmwrOwlYCaOz","papermill":{"duration":0.031304,"end_time":"2021-01-20T22:57:34.223728","exception":false,"start_time":"2021-01-20T22:57:34.192424","status":"completed"},"tags":[]},"source":["# Load data"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:34.290296Z","iopub.status.busy":"2021-01-20T22:57:34.289242Z","iopub.status.idle":"2021-01-20T22:57:35.971447Z","shell.execute_reply":"2021-01-20T22:57:35.971977Z"},"id":"UxM4MGNGCaO0","papermill":{"duration":1.717316,"end_time":"2021-01-20T22:57:35.972129","exception":false,"start_time":"2021-01-20T22:57:34.254813","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":238},"executionInfo":{"status":"ok","timestamp":1611700203018,"user_tz":-540,"elapsed":12777,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"0f2e2042-9255-4bba-c0da-58658fb80f86"},"source":["def count_data_items(filenames):\n","    n = [int(re.compile(r'-([0-9]*)\\.').search(filename).group(1)) for filename in filenames]\n","    return np.sum(n)\n","\n","\n","train = pd.read_csv(f'{database_base_path}train.csv')\n","print(f'Train samples: {len(train)}')\n","\n","FILENAMES_COMP = tf.io.gfile.glob(GCS_PATH + '/*.tfrec')\n","FILENAMES_2019 = tf.io.gfile.glob(GCS_PATH_EXT + '/*.tfrec')\n","\n","FILENAMES_COMP_CBB = tf.io.gfile.glob(GCS_PATH_CLASSES + '/CBB*.tfrec')\n","FILENAMES_COMP_CBSD = tf.io.gfile.glob(GCS_PATH_CLASSES + '/CBSD*.tfrec')\n","FILENAMES_COMP_CGM = tf.io.gfile.glob(GCS_PATH_CLASSES + '/CGM*.tfrec')\n","FILENAMES_COMP_CMD = tf.io.gfile.glob(GCS_PATH_CLASSES + '/CMD*.tfrec')\n","FILENAMES_COMP_Healthy = tf.io.gfile.glob(GCS_PATH_CLASSES + '/Healthy*.tfrec')\n","\n","FILENAMES_2019_CBB = tf.io.gfile.glob(GCS_PATH_EXT_CLASSES + '/CBB*.tfrec')\n","FILENAMES_2019_CBSD = tf.io.gfile.glob(GCS_PATH_EXT_CLASSES + '/CBSD*.tfrec')\n","FILENAMES_2019_CGM = tf.io.gfile.glob(GCS_PATH_EXT_CLASSES + '/CGM*.tfrec')\n","FILENAMES_2019_CMD = tf.io.gfile.glob(GCS_PATH_EXT_CLASSES + '/CMD*.tfrec')\n","FILENAMES_2019_Healthy = tf.io.gfile.glob(GCS_PATH_EXT_CLASSES + '/Healthy*.tfrec')\n","\n","\n","TRAINING_FILENAMES = (FILENAMES_COMP + \n","                      FILENAMES_2019 + \n","                      (2 * FILENAMES_COMP_CBB) + \n","                      (2 * FILENAMES_2019_CBB) + \n","                      (2 * FILENAMES_COMP_CBSD) + \n","                      (2 * FILENAMES_2019_CBSD) + \n","                      (2 * FILENAMES_COMP_CGM) + \n","                      (2 * FILENAMES_2019_CGM) + \n","                      (2 * FILENAMES_COMP_Healthy) + \n","                      (2 * FILENAMES_2019_Healthy))\n","\n","NUM_TRAINING_IMAGES = count_data_items(TRAINING_FILENAMES)\n","\n","print(f'GCS: train images: {NUM_TRAINING_IMAGES}')\n","display(train.head())\n","\n","CLASSES = ['Cassava Bacterial Blight', \n","           'Cassava Brown Streak Disease', \n","           'Cassava Green Mottle', \n","           'Cassava Mosaic Disease', \n","           'Healthy']"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Train samples: 21397\n","GCS: train images: 48081\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>image_id</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1000015157.jpg</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1000201771.jpg</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>100042118.jpg</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1000723321.jpg</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1000812911.jpg</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         image_id  label\n","0  1000015157.jpg      0\n","1  1000201771.jpg      3\n","2   100042118.jpg      1\n","3  1000723321.jpg      1\n","4  1000812911.jpg      3"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"BZIhYsg_CaO1","papermill":{"duration":0.032803,"end_time":"2021-01-20T22:57:36.037731","exception":false,"start_time":"2021-01-20T22:57:36.004928","status":"completed"},"tags":[]},"source":["# Augmentation"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:36.106682Z","iopub.status.busy":"2021-01-20T22:57:36.105973Z","iopub.status.idle":"2021-01-20T22:57:36.133193Z","shell.execute_reply":"2021-01-20T22:57:36.133788Z"},"id":"Wwh329L6CaO1","papermill":{"duration":0.063522,"end_time":"2021-01-20T22:57:36.133965","exception":false,"start_time":"2021-01-20T22:57:36.070443","status":"completed"},"tags":[]},"source":["def data_augment(image, label):\n","    p_rotation = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_spatial = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_rotate = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_pixel_1 = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_pixel_2 = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_pixel_3 = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_shear = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_crop = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    p_cutout = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    \n","    # Shear\n","    if p_shear > .2:\n","        if p_shear > .6:\n","            image = transform_shear(image, HEIGHT, shear=20.)\n","        else:\n","            image = transform_shear(image, HEIGHT, shear=-20.)\n","            \n","    # Rotation\n","    if p_rotation > .2:\n","        if p_rotation > .6:\n","            image = transform_rotation(image, HEIGHT, rotation=45.)\n","        else:\n","            image = transform_rotation(image, HEIGHT, rotation=-45.)\n","            \n","    # Flips\n","    image = tf.image.random_flip_left_right(image)\n","    image = tf.image.random_flip_up_down(image)\n","    if p_spatial > .75:\n","        image = tf.image.transpose(image)\n","        \n","    # Rotates\n","    if p_rotate > .75:\n","        image = tf.image.rot90(image, k=3) # rotate 270º\n","    elif p_rotate > .5:\n","        image = tf.image.rot90(image, k=2) # rotate 180º\n","    elif p_rotate > .25:\n","        image = tf.image.rot90(image, k=1) # rotate 90º\n","        \n","    # Pixel-level transforms\n","    if p_pixel_1 >= .4:\n","        image = tf.image.random_saturation(image, lower=.7, upper=1.3)\n","    if p_pixel_2 >= .4:\n","        image = tf.image.random_contrast(image, lower=.8, upper=1.2)\n","    if p_pixel_3 >= .4:\n","        image = tf.image.random_brightness(image, max_delta=.1)\n","        \n","    # Crops\n","    if p_crop > .6:\n","        if p_crop > .9:\n","            image = tf.image.central_crop(image, central_fraction=.5)\n","        elif p_crop > .8:\n","            image = tf.image.central_crop(image, central_fraction=.6)\n","        elif p_crop > .7:\n","            image = tf.image.central_crop(image, central_fraction=.7)\n","        else:\n","            image = tf.image.central_crop(image, central_fraction=.8)\n","    elif p_crop > .3:\n","        crop_size = tf.random.uniform([], int(HEIGHT*.6), HEIGHT, dtype=tf.int32)\n","        image = tf.image.random_crop(image, size=[crop_size, crop_size, CHANNELS])\n","            \n","    image = tf.image.resize(image, size=[HEIGHT, WIDTH])\n","\n","    if p_cutout > .5:\n","        image = data_augment_cutout(image)\n","        \n","    return image, label"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"r4Hg1nKgCaO1","papermill":{"duration":0.033215,"end_time":"2021-01-20T22:57:36.199741","exception":false,"start_time":"2021-01-20T22:57:36.166526","status":"completed"},"tags":[]},"source":["## Auxiliary functions"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:36.295009Z","iopub.status.busy":"2021-01-20T22:57:36.289488Z","iopub.status.idle":"2021-01-20T22:57:36.318353Z","shell.execute_reply":"2021-01-20T22:57:36.317633Z"},"id":"-DueNRgfCaO1","papermill":{"duration":0.08607,"end_time":"2021-01-20T22:57:36.318490","exception":false,"start_time":"2021-01-20T22:57:36.232420","status":"completed"},"tags":[]},"source":["# data augmentation @cdeotte kernel: https://www.kaggle.com/cdeotte/rotation-augmentation-gpu-tpu-0-96\n","def transform_rotation(image, height, rotation):\n","    # input image - is one image of size [dim,dim,3] not a batch of [b,dim,dim,3]\n","    # output - image randomly rotated\n","    DIM = height\n","    XDIM = DIM%2 #fix for size 331\n","    \n","    rotation = rotation * tf.random.uniform([1],dtype='float32')\n","    # CONVERT DEGREES TO RADIANS\n","    rotation = math.pi * rotation / 180.\n","    \n","    # ROTATION MATRIX\n","    c1 = tf.math.cos(rotation)\n","    s1 = tf.math.sin(rotation)\n","    one = tf.constant([1],dtype='float32')\n","    zero = tf.constant([0],dtype='float32')\n","    rotation_matrix = tf.reshape(tf.concat([c1,s1,zero, -s1,c1,zero, zero,zero,one],axis=0),[3,3])\n","\n","    # LIST DESTINATION PIXEL INDICES\n","    x = tf.repeat( tf.range(DIM//2,-DIM//2,-1), DIM )\n","    y = tf.tile( tf.range(-DIM//2,DIM//2),[DIM] )\n","    z = tf.ones([DIM*DIM],dtype='int32')\n","    idx = tf.stack( [x,y,z] )\n","    \n","    # ROTATE DESTINATION PIXELS ONTO ORIGIN PIXELS\n","    idx2 = K.dot(rotation_matrix,tf.cast(idx,dtype='float32'))\n","    idx2 = K.cast(idx2,dtype='int32')\n","    idx2 = K.clip(idx2,-DIM//2+XDIM+1,DIM//2)\n","    \n","    # FIND ORIGIN PIXEL VALUES \n","    idx3 = tf.stack( [DIM//2-idx2[0,], DIM//2-1+idx2[1,]] )\n","    d = tf.gather_nd(image, tf.transpose(idx3))\n","        \n","    return tf.reshape(d,[DIM,DIM,3])\n","\n","def transform_shear(image, height, shear):\n","    # input image - is one image of size [dim,dim,3] not a batch of [b,dim,dim,3]\n","    # output - image randomly sheared\n","    DIM = height\n","    XDIM = DIM%2 #fix for size 331\n","    \n","    shear = shear * tf.random.uniform([1],dtype='float32')\n","    shear = math.pi * shear / 180.\n","        \n","    # SHEAR MATRIX\n","    one = tf.constant([1],dtype='float32')\n","    zero = tf.constant([0],dtype='float32')\n","    c2 = tf.math.cos(shear)\n","    s2 = tf.math.sin(shear)\n","    shear_matrix = tf.reshape(tf.concat([one,s2,zero, zero,c2,zero, zero,zero,one],axis=0),[3,3])    \n","\n","    # LIST DESTINATION PIXEL INDICES\n","    x = tf.repeat( tf.range(DIM//2,-DIM//2,-1), DIM )\n","    y = tf.tile( tf.range(-DIM//2,DIM//2),[DIM] )\n","    z = tf.ones([DIM*DIM],dtype='int32')\n","    idx = tf.stack( [x,y,z] )\n","    \n","    # ROTATE DESTINATION PIXELS ONTO ORIGIN PIXELS\n","    idx2 = K.dot(shear_matrix,tf.cast(idx,dtype='float32'))\n","    idx2 = K.cast(idx2,dtype='int32')\n","    idx2 = K.clip(idx2,-DIM//2+XDIM+1,DIM//2)\n","    \n","    # FIND ORIGIN PIXEL VALUES \n","    idx3 = tf.stack( [DIM//2-idx2[0,], DIM//2-1+idx2[1,]] )\n","    d = tf.gather_nd(image, tf.transpose(idx3))\n","        \n","    return tf.reshape(d,[DIM,DIM,3])\n","\n","# CutOut\n","def data_augment_cutout(image, min_mask_size=(int(HEIGHT * .1), int(HEIGHT * .1)), \n","                        max_mask_size=(int(HEIGHT * .125), int(HEIGHT * .125))):\n","    p_cutout = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n","    \n","    if p_cutout > .85: # 10~15 cut outs\n","        n_cutout = tf.random.uniform([], 10, 15, dtype=tf.int32)\n","        image = random_cutout(image, HEIGHT, WIDTH, \n","                              min_mask_size=min_mask_size, max_mask_size=max_mask_size, k=n_cutout)\n","    elif p_cutout > .6: # 5~10 cut outs\n","        n_cutout = tf.random.uniform([], 5, 10, dtype=tf.int32)\n","        image = random_cutout(image, HEIGHT, WIDTH, \n","                              min_mask_size=min_mask_size, max_mask_size=max_mask_size, k=n_cutout)\n","    elif p_cutout > .25: # 2~5 cut outs\n","        n_cutout = tf.random.uniform([], 2, 5, dtype=tf.int32)\n","        image = random_cutout(image, HEIGHT, WIDTH, \n","                              min_mask_size=min_mask_size, max_mask_size=max_mask_size, k=n_cutout)\n","    else: # 1 cut out\n","        image = random_cutout(image, HEIGHT, WIDTH, \n","                              min_mask_size=min_mask_size, max_mask_size=max_mask_size, k=1)\n","\n","    return image\n","\n","def random_cutout(image, height, width, channels=3, min_mask_size=(10, 10), max_mask_size=(80, 80), k=1):\n","    assert height > min_mask_size[0]\n","    assert width > min_mask_size[1]\n","    assert height > max_mask_size[0]\n","    assert width > max_mask_size[1]\n","\n","    for i in range(k):\n","      mask_height = tf.random.uniform(shape=[], minval=min_mask_size[0], maxval=max_mask_size[0], dtype=tf.int32)\n","      mask_width = tf.random.uniform(shape=[], minval=min_mask_size[1], maxval=max_mask_size[1], dtype=tf.int32)\n","\n","      pad_h = height - mask_height\n","      pad_top = tf.random.uniform(shape=[], minval=0, maxval=pad_h, dtype=tf.int32)\n","      pad_bottom = pad_h - pad_top\n","\n","      pad_w = width - mask_width\n","      pad_left = tf.random.uniform(shape=[], minval=0, maxval=pad_w, dtype=tf.int32)\n","      pad_right = pad_w - pad_left\n","\n","      cutout_area = tf.zeros(shape=[mask_height, mask_width, channels], dtype=tf.uint8)\n","\n","      cutout_mask = tf.pad([cutout_area], [[0,0],[pad_top, pad_bottom], [pad_left, pad_right], [0,0]], constant_values=1)\n","      cutout_mask = tf.squeeze(cutout_mask, axis=0)\n","      image = tf.multiply(tf.cast(image, tf.float32), tf.cast(cutout_mask, tf.float32))\n","\n","    return image"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:36.388974Z","iopub.status.busy":"2021-01-20T22:57:36.388107Z","iopub.status.idle":"2021-01-20T22:57:36.415254Z","shell.execute_reply":"2021-01-20T22:57:36.415771Z"},"id":"CPcg0bWECaO1","papermill":{"duration":0.064439,"end_time":"2021-01-20T22:57:36.415960","exception":false,"start_time":"2021-01-20T22:57:36.351521","status":"completed"},"tags":[]},"source":["# Datasets utility functions\n","def decode_image(image_data):\n","    \"\"\"\n","        Decode a JPEG-encoded image to a uint8 tensor.\n","    \"\"\"\n","    image = tf.image.decode_jpeg(image_data, channels=3)\n","    return image\n","\n","def scale_image(image, label):\n","    \"\"\"\n","        Cast tensor to float and normalizes (range between 0 and 1).\n","    \"\"\"\n","    image = tf.cast(image, tf.float32)\n","    image /= 255.0\n","    return image, label\n","\n","def prepare_image(image, label):\n","    \"\"\"\n","        Resize and reshape images to the expected size.\n","    \"\"\"\n","    image = tf.image.resize(image, [HEIGHT_RS, WIDTH_RS])\n","    image = tf.reshape(image, [HEIGHT_RS, WIDTH_RS, 3])\n","    return image, label\n","\n","def read_tfrecord(example, labeled=True):\n","    \"\"\"\n","        1. Parse data based on the 'TFREC_FORMAT' map.\n","        2. Decode image.\n","        3. If 'labeled' returns (image, label) if not (image, name).\n","    \"\"\"\n","    if labeled:\n","        TFREC_FORMAT = {\n","            'image': tf.io.FixedLenFeature([], tf.string), \n","            'target': tf.io.FixedLenFeature([], tf.int64), \n","        }\n","    else:\n","        TFREC_FORMAT = {\n","            'image': tf.io.FixedLenFeature([], tf.string), \n","            'image_name': tf.io.FixedLenFeature([], tf.string), \n","        }\n","    example = tf.io.parse_single_example(example, TFREC_FORMAT)\n","    image = decode_image(example['image'])\n","    if labeled:\n","        label_or_name = tf.cast(example['target'], tf.int32)\n","        # One-Hot Encoding needed to use \"categorical_crossentropy\" loss\n","        label_or_name = tf.one_hot(tf.cast(label_or_name, tf.int32), N_CLASSES)\n","    else:\n","        label_or_name = example['image_name']\n","    return image, label_or_name\n","\n","def get_dataset(FILENAMES, labeled=True, ordered=False, repeated=False, \n","                cached=False, augment=False):\n","    \"\"\"\n","        Return a Tensorflow dataset ready for training or inference.\n","    \"\"\"\n","    ignore_order = tf.data.Options()\n","    if not ordered:\n","        ignore_order.experimental_deterministic = False\n","        dataset = tf.data.Dataset.list_files(FILENAMES)\n","        dataset = dataset.interleave(tf.data.TFRecordDataset, num_parallel_calls=AUTO)\n","    else:\n","        dataset = tf.data.TFRecordDataset(FILENAMES, num_parallel_reads=AUTO)\n","        \n","    dataset = dataset.with_options(ignore_order)\n","    \n","    dataset = dataset.map(lambda x: read_tfrecord(x, labeled=labeled), num_parallel_calls=AUTO)\n","    \n","    if augment:\n","        dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n","        \n","    dataset = dataset.map(scale_image, num_parallel_calls=AUTO)\n","    dataset = dataset.map(prepare_image, num_parallel_calls=AUTO)\n","    \n","    if not ordered:\n","        dataset = dataset.shuffle(2048)\n","    if repeated:\n","        dataset = dataset.repeat()\n","        \n","    dataset = dataset.batch(BATCH_SIZE)\n","    \n","    if cached:\n","        dataset = dataset.cache()\n","    dataset = dataset.prefetch(AUTO)\n","    return dataset\n","\n","def unfreeze_model(model):\n","    # Unfreeze layers while leaving BatchNorm layers frozen\n","    for layer in model.layers:\n","        if not isinstance(layer, L.BatchNormalization):\n","            layer.trainable = True\n","        else:\n","            layer.trainable = False\n","                \n","def unfreeze_block(model, block_name=None, n_top=3):\n","    # Unfreeze layers while leaving BatchNorm layers frozen\n","    for layer in model.layers[:-n_top]:\n","        if isinstance(layer, L.BatchNormalization):\n","            layer.trainable = False\n","        else:\n","            if block_name and (block_name in layer.name):\n","                layer.trainable = True"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:36.487403Z","iopub.status.busy":"2021-01-20T22:57:36.486600Z","iopub.status.idle":"2021-01-20T22:57:36.530480Z","shell.execute_reply":"2021-01-20T22:57:36.531039Z"},"id":"gHAxNOInCaO2","papermill":{"duration":0.081913,"end_time":"2021-01-20T22:57:36.531213","exception":false,"start_time":"2021-01-20T22:57:36.449300","status":"completed"},"tags":[]},"source":["# Visualization utility functions\n","np.set_printoptions(threshold=15, linewidth=80)\n","\n","def batch_to_numpy_images_and_labels(data):\n","    images, labels = data\n","    numpy_images = images.numpy()\n","    numpy_labels = labels.numpy()\n","    if numpy_labels.dtype == object: # binary string in this case, these are image ID strings\n","        numpy_labels = [None for _ in enumerate(numpy_images)]\n","    # If no labels, only image IDs, return None for labels (this is the case for test data)\n","    return numpy_images, numpy_labels\n","\n","def title_from_label_and_target(label, correct_label):\n","    if correct_label is None:\n","        return CLASSES[label], True\n","    correct = (label == correct_label)\n","    return \"{} [{}{}{}]\".format(CLASSES[label], 'OK' if correct else 'NO', u\"\\u2192\" if not correct else '',\n","                                CLASSES[correct_label] if not correct else ''), correct\n","\n","def display_one_flower(image, title, subplot, red=False, titlesize=16):\n","    plt.subplot(*subplot)\n","    plt.axis('off')\n","    plt.imshow(image)\n","    if len(title) > 0:\n","        plt.title(title, fontsize=int(titlesize) if not red else int(titlesize/1.2), color='red' if red else 'black', \n","                  fontdict={'verticalalignment':'center'}, pad=int(titlesize/1.5))\n","    return (subplot[0], subplot[1], subplot[2]+1)\n","\n","def display_batch_of_images(databatch, predictions=None):\n","    \"\"\"This will work with:\n","    display_batch_of_images(images)\n","    display_batch_of_images(images, predictions)\n","    display_batch_of_images((images, labels))\n","    display_batch_of_images((images, labels), predictions)\n","    \"\"\"\n","    # data\n","    images, labels = batch_to_numpy_images_and_labels(databatch)\n","    labels = np.argmax(labels, axis=-1)\n","    if labels is None:\n","        labels = [None for _ in enumerate(images)]\n","        \n","    # auto-squaring: this will drop data that does not fit into square or square-ish rectangle\n","    rows = int(math.sqrt(len(images)))\n","    cols = len(images)//rows\n","        \n","    # size and spacing\n","    FIGSIZE = 13.0\n","    SPACING = 0.1\n","    subplot=(rows,cols,1)\n","    if rows < cols:\n","        plt.figure(figsize=(FIGSIZE,FIGSIZE/cols*rows))\n","    else:\n","        plt.figure(figsize=(FIGSIZE/rows*cols,FIGSIZE))\n","    \n","    # display\n","    for i, (image, label) in enumerate(zip(images[:rows*cols], labels[:rows*cols])):\n","        title = '' if label is None else CLASSES[label]\n","        correct = True\n","        if predictions is not None:\n","            title, correct = title_from_label_and_target(predictions[i], label)\n","        dynamic_titlesize = FIGSIZE*SPACING/max(rows,cols)*40+3 # magic formula tested to work from 1x1 to 10x10 images\n","        subplot = display_one_flower(image, title, subplot, not correct, titlesize=dynamic_titlesize)\n","    \n","    #layout\n","    plt.tight_layout()\n","    if label is None and predictions is None:\n","        plt.subplots_adjust(wspace=0, hspace=0)\n","    else:\n","        plt.subplots_adjust(wspace=SPACING, hspace=SPACING)\n","    plt.show()\n","    \n","# Visualize model predictions\n","def dataset_to_numpy_util(dataset, N):\n","    dataset = dataset.unbatch().batch(N)\n","    for images, labels in dataset:\n","        numpy_images = images.numpy()\n","        numpy_labels = labels.numpy()\n","        break;  \n","    return numpy_images, numpy_labels\n","\n","def title_from_label_and_target(label, correct_label):\n","    label = np.argmax(label, axis=-1)\n","    correct = (label == correct_label)\n","    return \"{} [{}{}{}]\".format(label, str(correct), ', shoud be ' if not correct else '',\n","                                correct_label if not correct else ''), correct\n","\n","def display_one_flower_eval(image, title, subplot, red=False):\n","    plt.subplot(subplot)\n","    plt.axis('off')\n","    plt.imshow(image)\n","    plt.title(title, fontsize=14, color='red' if red else 'black')\n","    return subplot+1\n","\n","def display_9_images_with_predictions(images, predictions, labels):\n","    subplot=331\n","    plt.figure(figsize=(13,13))\n","    for i, image in enumerate(images):\n","        title, correct = title_from_label_and_target(predictions[i], labels[i])\n","        subplot = display_one_flower_eval(image, title, subplot, not correct)\n","        if i >= 8:\n","            break;\n","              \n","    plt.tight_layout()\n","    plt.subplots_adjust(wspace=0.1, hspace=0.1)\n","    plt.show()\n","\n","\n","# Model evaluation\n","def plot_metrics(history):\n","    fig, axes = plt.subplots(2, 1, sharex='col', figsize=(20, 8))\n","    axes = axes.flatten()\n","    \n","    axes[0].plot(history['loss'], label='Train loss')\n","    axes[0].plot(history['val_loss'], label='Validation loss')\n","    axes[0].legend(loc='best', fontsize=16)\n","    axes[0].set_title('Loss')\n","    axes[0].axvline(np.argmin(history['loss']), linestyle='dashed')\n","    axes[0].axvline(np.argmin(history['val_loss']), linestyle='dashed', color='orange')\n","    \n","    axes[1].plot(history['accuracy'], label='Train accuracy')\n","    axes[1].plot(history['val_accuracy'], label='Validation accuracy')\n","    axes[1].legend(loc='best', fontsize=16)\n","    axes[1].set_title('Accuracy')\n","    axes[1].axvline(np.argmax(history['accuracy']), linestyle='dashed')\n","    axes[1].axvline(np.argmax(history['val_accuracy']), linestyle='dashed', color='orange')\n","\n","    plt.xlabel('Epochs', fontsize=16)\n","    sns.despine()\n","    plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oCtCB3WdCaO2","papermill":{"duration":0.033127,"end_time":"2021-01-20T22:57:36.597612","exception":false,"start_time":"2021-01-20T22:57:36.564485","status":"completed"},"tags":[]},"source":["# Training data samples (with augmentation)"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:36.667226Z","iopub.status.busy":"2021-01-20T22:57:36.666549Z","iopub.status.idle":"2021-01-20T22:57:52.204000Z","shell.execute_reply":"2021-01-20T22:57:52.204539Z"},"id":"p8IMzXLRCaO2","papermill":{"duration":15.574028,"end_time":"2021-01-20T22:57:52.204708","exception":false,"start_time":"2021-01-20T22:57:36.630680","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"11gTtGBtjwkBjg4JJMLkjtmNYLb7N_rhr"},"executionInfo":{"status":"ok","timestamp":1611700228761,"user_tz":-540,"elapsed":38498,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"33b4f93d-f56d-46c7-86cf-821b68a3faf5"},"source":["train_dataset = get_dataset(FILENAMES_COMP, ordered=True, augment=True)\n","train_iter = iter(train_dataset.unbatch().batch(20))\n","\n","display_batch_of_images(next(train_iter))\n","display_batch_of_images(next(train_iter))"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"gfrU-uCiCaO3","papermill":{"duration":0.115332,"end_time":"2021-01-20T22:57:52.436099","exception":false,"start_time":"2021-01-20T22:57:52.320767","status":"completed"},"tags":[]},"source":["## Datasets distribution\n","\n","### Competition data"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:57:52.660179Z","iopub.status.busy":"2021-01-20T22:57:52.659360Z","iopub.status.idle":"2021-01-20T22:59:14.164307Z","shell.execute_reply":"2021-01-20T22:59:14.165290Z"},"id":"WJywiXKHCaO4","papermill":{"duration":81.617644,"end_time":"2021-01-20T22:59:14.165495","exception":false,"start_time":"2021-01-20T22:57:52.547851","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":502},"executionInfo":{"status":"ok","timestamp":1611700316123,"user_tz":-540,"elapsed":125857,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"4dea6f4b-54b8-46e1-c626-3380c80b6612"},"source":["ds_comp = get_dataset(FILENAMES_COMP)\n","labels_comp = [target.numpy() for img, target in iter(ds_comp.unbatch())]\n","labels_comp = np.argmax(labels_comp, axis=-1)\n","\n","fig, ax = plt.subplots(1, 1, figsize=(18, 8))\n","ax = sns.countplot(y=labels_comp, palette='viridis')\n","ax.tick_params(labelsize=16)\n","\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1296x576 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"H03votk7CaO4","papermill":{"duration":0.11035,"end_time":"2021-01-20T22:59:14.384953","exception":false,"start_time":"2021-01-20T22:59:14.274603","status":"completed"},"tags":[]},"source":["### 2019 competition data"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:59:14.619739Z","iopub.status.busy":"2021-01-20T22:59:14.618979Z","iopub.status.idle":"2021-01-20T22:59:36.253576Z","shell.execute_reply":"2021-01-20T22:59:36.252814Z"},"id":"SfD2fI73CaO4","papermill":{"duration":21.757163,"end_time":"2021-01-20T22:59:36.253707","exception":false,"start_time":"2021-01-20T22:59:14.496544","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":502},"executionInfo":{"status":"ok","timestamp":1611700338799,"user_tz":-540,"elapsed":148528,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"b815df83-990c-4d3b-e75c-d0967a1178c3"},"source":["ds_2019 = get_dataset(FILENAMES_2019)\n","labels_2019 = [target.numpy() for img, target in iter(ds_2019.unbatch())]\n","labels_2019 = np.argmax(labels_2019, axis=-1)\n","\n","fig, ax = plt.subplots(1, 1, figsize=(18, 8))\n","ax = sns.countplot(y=labels_2019, palette='viridis')\n","ax.tick_params(labelsize=16)\n","\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1296x576 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"ZXY3rsY4CaO4","papermill":{"duration":0.112402,"end_time":"2021-01-20T22:59:36.476696","exception":false,"start_time":"2021-01-20T22:59:36.364294","status":"completed"},"tags":[]},"source":["### Dataset oversampled"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T22:59:36.715120Z","iopub.status.busy":"2021-01-20T22:59:36.714385Z","iopub.status.idle":"2021-01-20T23:02:43.355083Z","shell.execute_reply":"2021-01-20T23:02:43.355614Z"},"id":"PRXTNO7RCaO5","papermill":{"duration":186.766033,"end_time":"2021-01-20T23:02:43.355778","exception":false,"start_time":"2021-01-20T22:59:36.589745","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":502},"executionInfo":{"status":"ok","timestamp":1611700559618,"user_tz":-540,"elapsed":369343,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"3993ed0b-46d2-49ae-ee47-5af82159eae4"},"source":["FILENAMES_COMP_OVER = (FILENAMES_COMP + \n","                       FILENAMES_2019 + \n","                       (2 * FILENAMES_COMP_CBB) + \n","                       (2 * FILENAMES_2019_CBB) + \n","                       (2 * FILENAMES_COMP_CBSD) + \n","                       (2 * FILENAMES_2019_CBSD) + \n","                       (2 * FILENAMES_COMP_CGM) + \n","                       (2 * FILENAMES_2019_CGM) + \n","                       (2 * FILENAMES_COMP_Healthy) + \n","                       (2 * FILENAMES_2019_Healthy))\n","\n","ds_comp = get_dataset(FILENAMES_COMP_OVER)\n","labels_comp = [target.numpy() for img, target in iter(ds_comp.unbatch())]\n","labels_comp = np.argmax(labels_comp, axis=-1)\n","\n","fig, ax = plt.subplots(1, 1, figsize=(18, 8))\n","ax = sns.countplot(y=labels_comp, palette='viridis')\n","ax.tick_params(labelsize=16)\n","\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1296x576 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"HvXRzhofCaO5","papermill":{"duration":0.112509,"end_time":"2021-01-20T23:02:43.580615","exception":false,"start_time":"2021-01-20T23:02:43.468106","status":"completed"},"tags":[]},"source":["### Learning rate schedule\n","\n","We are going to use a `cosine learning rate schedule with a warm-up phase`, this may be a good idea since we are using a pre-trained model, the warm-up phase will be useful to avoid the pre-trained weights degradation resulting in catastrophic forgetting, during the schedule the learning rate will slowly decrease to very low values, this helps the model to land on more stable weights."]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:02:43.808753Z","iopub.status.busy":"2021-01-20T23:02:43.807680Z","iopub.status.idle":"2021-01-20T23:02:47.940826Z","shell.execute_reply":"2021-01-20T23:02:47.939748Z"},"id":"I9cuJCl1CaO5","papermill":{"duration":4.248898,"end_time":"2021-01-20T23:02:47.940988","exception":false,"start_time":"2021-01-20T23:02:43.692090","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":422},"executionInfo":{"status":"ok","timestamp":1611700598553,"user_tz":-540,"elapsed":408274,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"ccbad97e-580c-4450-a14e-fd6f028bcbba"},"source":["lr_start = 1e-8\n","lr_min = 1e-8\n","lr_max = LEARNING_RATE\n","num_cycles = 1.\n","warmup_epochs = 1\n","hold_max_epochs = 0\n","total_epochs = EPOCHS\n","warmup_steps = warmup_epochs * (NUM_TRAINING_IMAGES//BATCH_SIZE)\n","total_steps = total_epochs * (NUM_TRAINING_IMAGES//BATCH_SIZE)\n","\n","@tf.function\n","def lrfn(step):\n","    if step < warmup_steps:\n","        lr = (lr_max - lr_start) / warmup_steps * step + lr_start\n","    else:\n","        progress = (step - warmup_steps) / (total_steps - warmup_steps)\n","        lr = lr_max * (0.5 * (1.0 + tf.math.cos(np.pi * ((num_cycles * progress) % 1.0))))\n","        if lr_min is not None:\n","            lr = tf.math.maximum(lr_min, float(lr))\n","\n","    return lr\n","\n","\n","# rng = [i for i in range(total_epochs)]\n","rng = [i for i in range(total_steps)]\n","y = [lrfn(tf.cast(x, tf.float32)) for x in rng]\n","\n","sns.set(style='whitegrid')\n","fig, ax = plt.subplots(figsize=(20, 6))\n","plt.plot(rng, y)\n","\n","print(f'{total_steps} total steps and {NUM_TRAINING_IMAGES//BATCH_SIZE} steps per epoch')\n","print(f'Learning rate schedule: {y[0]:.3g} to {max(y):.3g} to {y[-1]:.3g}')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["7510 total steps and 751 steps per epoch\n","Learning rate schedule: 1e-08 to 8e-05 to 1e-08\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x432 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"OMIrA5jxCaO5","papermill":{"duration":0.112158,"end_time":"2021-01-20T23:02:48.166235","exception":false,"start_time":"2021-01-20T23:02:48.054077","status":"completed"},"tags":[]},"source":["# Model"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:02:48.402810Z","iopub.status.busy":"2021-01-20T23:02:48.402111Z","iopub.status.idle":"2021-01-20T23:02:48.406439Z","shell.execute_reply":"2021-01-20T23:02:48.405740Z"},"id":"pRksD6K6CaO5","papermill":{"duration":0.126526,"end_time":"2021-01-20T23:02:48.406566","exception":false,"start_time":"2021-01-20T23:02:48.280040","status":"completed"},"tags":[]},"source":["from tensorflow.keras.applications import DenseNet201\n","def model_fn(input_shape, N_CLASSES):\n","    inputs = L.Input(shape=input_shape, name='input_image')\n","    base_model = DenseNet201(input_tensor=inputs, \n","                                    include_top=False, \n","                                    weights='imagenet', \n","                                    pooling='avg')\n","    base_model.trainable = False\n","    x = L.Dropout(.5)(base_model.output)\n","    output = L.Dense(N_CLASSES, activation='softmax', name='output')(x)\n","    model = Model(inputs=inputs, outputs=output)\n","\n","    return model"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:02:48.640007Z","iopub.status.busy":"2021-01-20T23:02:48.638735Z","iopub.status.idle":"2021-01-20T23:02:48.642985Z","shell.execute_reply":"2021-01-20T23:02:48.643690Z"},"id":"4zl0qy-pcR-A","papermill":{"duration":0.122772,"end_time":"2021-01-20T23:02:48.643846","exception":false,"start_time":"2021-01-20T23:02:48.521074","status":"completed"},"tags":[]},"source":["#help(strategy)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hMc0tk0VCaO5","papermill":{"duration":0.114465,"end_time":"2021-01-20T23:02:48.871581","exception":false,"start_time":"2021-01-20T23:02:48.757116","status":"completed"},"tags":[]},"source":["# Training"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:02:49.104256Z","iopub.status.busy":"2021-01-20T23:02:49.103030Z","iopub.status.idle":"2021-01-20T23:41:32.330134Z","shell.execute_reply":"2021-01-20T23:41:32.329366Z"},"id":"8HrFGFRNCaO5","papermill":{"duration":2323.344808,"end_time":"2021-01-20T23:41:32.330270","exception":false,"start_time":"2021-01-20T23:02:48.985462","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611710256557,"user_tz":-540,"elapsed":10066265,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"b41b0927-549f-4ad4-cf8b-00d349e05e77"},"source":["skf = KFold(n_splits=N_FOLDS, shuffle=True, random_state=seed)\n","oof_pred = []; oof_labels = []; history_list = []\n","\n","for fold,(idxT, idxV) in enumerate(skf.split(np.arange(50))):\n","    if fold >= FOLDS_USED:\n","        break\n","    if tpu: tf.tpu.experimental.initialize_tpu_system(tpu)\n","    K.clear_session()\n","    print(f'\\nFOLD: {fold+1}')\n","    print(f'TRAIN: {idxT} VALID: {idxV}')\n","\n","    # Create train and validation sets\n","    FILENAMES_COMP = tf.io.gfile.glob([GCS_PATH + '/Id_train%.2i*.tfrec' % x for x in idxT])\n","    FILENAMES_2019 = tf.io.gfile.glob([GCS_PATH_EXT + '/Id_train%.2i*.tfrec' % x for x in idxT])\n","\n","    FILENAMES_COMP_CBB = tf.io.gfile.glob([GCS_PATH_CLASSES + '/CBB%.2i*.tfrec' % x for x in idxT])\n","    FILENAMES_COMP_CBSD = tf.io.gfile.glob([GCS_PATH_CLASSES + '/CBSD%.2i*.tfrec' % x for x in idxT])\n","    FILENAMES_COMP_CGM = tf.io.gfile.glob([GCS_PATH_CLASSES + '/CGM%.2i*.tfrec' % x for x in idxT])\n","    FILENAMES_COMP_Healthy = tf.io.gfile.glob([GCS_PATH_CLASSES + '/Healthy%.2i*.tfrec' % x for x in idxT])\n","    \n","    FILENAMES_2019_CBB = tf.io.gfile.glob([GCS_PATH_EXT_CLASSES + '/CBB%.2i*.tfrec' % x for x in idxT])\n","    FILENAMES_2019_CBSD = tf.io.gfile.glob([GCS_PATH_EXT_CLASSES + '/CBSD%.2i*.tfrec' % x for x in idxT])\n","    FILENAMES_2019_CGM = tf.io.gfile.glob([GCS_PATH_EXT_CLASSES + '/CGM%.2i*.tfrec' % x for x in idxT])\n","    FILENAMES_2019_Healthy = tf.io.gfile.glob([GCS_PATH_EXT_CLASSES + '/Healthy%.2i*.tfrec' % x for x in idxT])\n","\n","    TRAIN_FILENAMES = (FILENAMES_COMP + \n","                       FILENAMES_2019 + \n","                       (2 * FILENAMES_COMP_CBB) + \n","                       (2 * FILENAMES_2019_CBB) + \n","                       (2 * FILENAMES_COMP_CBSD) + \n","                       (2 * FILENAMES_2019_CBSD) + \n","                       (2 * FILENAMES_COMP_CGM) + \n","                       (2 * FILENAMES_2019_CGM) + \n","                       (2 * FILENAMES_COMP_Healthy) + \n","                       (2 * FILENAMES_2019_Healthy))\n","    \n","    VALID_FILENAMES = tf.io.gfile.glob([GCS_PATH + '/Id_train%.2i*.tfrec' % x for x in idxV])\n","    np.random.shuffle(TRAIN_FILENAMES)\n","    \n","    ct_train = count_data_items(TRAIN_FILENAMES)\n","    ct_valid = count_data_items(VALID_FILENAMES)\n","    \n","    step_size = (ct_train // BATCH_SIZE)\n","    valid_step_size = (ct_valid // BATCH_SIZE)\n","    total_steps=(total_epochs * step_size)\n","    warmup_steps=(warmup_epochs * step_size)\n","    \n","    \n","    # Build TF datasets\n","    train_ds = strategy.experimental_distribute_dataset(get_dataset(TRAIN_FILENAMES, repeated=True, augment=True))\n","    valid_ds = strategy.experimental_distribute_dataset(get_dataset(VALID_FILENAMES, ordered=True, repeated=True, cached=True))\n","    train_data_iter = iter(train_ds)\n","    valid_data_iter = iter(valid_ds)\n","    \n","    \n","    # Step functions\n","    @tf.function\n","    def train_step(data_iter):\n","        def train_step_fn(x, y):\n","            with tf.GradientTape() as tape:\n","                probabilities = model(x, training=True)\n","                loss = loss_fn(y, probabilities, label_smoothing=.3)\n","            gradients = tape.gradient(loss, model.trainable_variables)\n","            optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n","            # update metrics\n","            train_accuracy.update_state(y, probabilities)\n","            train_loss.update_state(loss)\n","        for _ in tf.range(step_size):\n","            if COLAB:\n","                #print(COLAB)\n","                strategy.experimental_run_v2(train_step_fn, next(data_iter))\n","            else:\n","                strategy.experimental_run_v2(train_step_fn, next(data_iter))\n","\n","    @tf.function\n","    def valid_step(data_iter):\n","        def valid_step_fn(x, y):\n","            probabilities = model(x, training=False)\n","            loss = loss_fn(y, probabilities)\n","            # update metrics\n","            valid_accuracy.update_state(y, probabilities)\n","            valid_loss.update_state(loss)\n","        for _ in tf.range(valid_step_size):\n","            if COLAB:\n","                strategy.experimental_run_v2(valid_step_fn, next(data_iter))\n","            else:\n","                strategy.experimental_run_v2(valid_step_fn, next(data_iter))\n","    \n","    \n","    # Model\n","    model_path = models_path+f'model_{fold}.h5'\n","    with strategy.scope():\n","        model = model_fn((None, None, CHANNELS), N_CLASSES)\n","        unfreeze_model(model) # unfreeze all layers except \"batch normalization\"\n","        \n","        optimizer = optimizers.Adam(learning_rate=lambda: lrfn(tf.cast(optimizer.iterations, tf.float32)))\n","        loss_fn = losses.categorical_crossentropy\n","\n","        train_accuracy = metrics.CategoricalAccuracy()\n","        valid_accuracy = metrics.CategoricalAccuracy()\n","        train_loss = metrics.Sum()\n","        valid_loss = metrics.Sum()\n","    \n","    \n","    # Setup training loop\n","    step = 0\n","    epoch_steps = 0\n","    patience_cnt = 0\n","    best_val = 0\n","    history = {'loss': [], 'val_loss': [], 'accuracy': [], 'val_accuracy': []}\n","\n","    ### Train model\n","    for epoch in range(EPOCHS):\n","        epoch_start_time = time.time()\n","\n","        # Run training step\n","        train_step(train_data_iter)\n","        epoch_steps += step_size\n","        step += step_size\n","            \n","\n","        # Validation run at the end of each epoch\n","        if (step // step_size) > epoch:\n","            # Validation run\n","            valid_epoch_steps = 0\n","            valid_step(valid_data_iter)\n","            valid_epoch_steps += valid_step_size\n","\n","            # Compute metrics\n","            history['accuracy'].append(train_accuracy.result().numpy())\n","            history['loss'].append(train_loss.result().numpy() / (BATCH_SIZE * epoch_steps))\n","            history['val_accuracy'].append(valid_accuracy.result().numpy())\n","            history['val_loss'].append(valid_loss.result().numpy() / (BATCH_SIZE * valid_epoch_steps))\n","\n","            # Report metrics\n","            epoch_time = time.time() - epoch_start_time\n","            print(f'\\nEPOCH {epoch+1}/{EPOCHS}')\n","            print(f'time: {epoch_time:0.1f}s',\n","                  f\"loss: {history['loss'][-1]:0.4f}\",\n","                  f\"accuracy: {history['accuracy'][-1]:0.4f}\",\n","                  f\"val_loss: {history['val_loss'][-1]:0.4f}\",\n","                  f\"val_accuracy: {history['val_accuracy'][-1]:0.4f}\",\n","                  f'lr: {lrfn(tf.cast(optimizer.iterations, tf.int32).numpy()):0.4g}')\n","\n","            # Early stopping monitor\n","            if history['val_accuracy'][-1] >= best_val:\n","                best_val = history['val_accuracy'][-1]\n","                model.save_weights(model_path)\n","                print(f'Saved model weights at \"{model_path}\"')\n","                patience_cnt = 1\n","            else:\n","                patience_cnt += 1\n","            # if patience_cnt > ES_PATIENCE:\n","            #     print(f'Epoch {epoch:05d}: early stopping')\n","            #     break\n","\n","                \n","            # Set up next epoch\n","            epoch = step // step_size\n","            epoch_steps = 0\n","            train_accuracy.reset_states()\n","            train_loss.reset_states()\n","            valid_accuracy.reset_states()\n","            valid_loss.reset_states()\n","    \n","    \n","    ### RESULTS\n","    print(f\"#### FOLD {fold+1} OOF Accuracy = {np.max(history['val_accuracy']):.3f}\")\n","    \n","    history_list.append(history)\n","    # Load best model weights\n","    model.load_weights(model_path)\n","\n","    # OOF predictions\n","    ds_valid = get_dataset(VALID_FILENAMES, ordered=True)\n","    oof_labels.append([target.numpy() for img, target in iter(ds_valid.unbatch())])\n","    x_oof = ds_valid.map(lambda image, target: image)\n","    oof_pred.append(np.argmax(model.predict(x_oof), axis=-1))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.97.70.82:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.97.70.82:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.97.70.82:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.97.70.82:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","FOLD: 1\n","TRAIN: [ 0  1  3 ... 47 48 49] VALID: [ 2  4 10 11 22 27 28 31 38 41]\n","Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/densenet/densenet201_weights_tf_dim_ordering_tf_kernels_notop.h5\n","74842112/74836368 [==============================] - 1s 0us/step\n","WARNING:tensorflow:From <ipython-input-21-d506d5d257e7>:71: StrategyBase.experimental_run_v2 (from tensorflow.python.distribute.distribute_lib) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","renamed to `run`\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:From <ipython-input-21-d506d5d257e7>:71: StrategyBase.experimental_run_v2 (from tensorflow.python.distribute.distribute_lib) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","renamed to `run`\n"],"name":"stderr"},{"output_type":"stream","text":["\n","EPOCH 1/10\n","time: 305.4s loss: 1.2884 accuracy: 0.6603 val_loss: 0.6287 val_accuracy: 0.8336 lr: 8e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 2/10\n","time: 153.0s loss: 1.1626 accuracy: 0.7823 val_loss: 0.6406 val_accuracy: 0.8613 lr: 7.759e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 3/10\n","time: 152.9s loss: 1.1286 accuracy: 0.8110 val_loss: 0.5294 val_accuracy: 0.8786 lr: 7.064e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 4/10\n","WARNING:tensorflow:5 out of the last 206 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:5 out of the last 206 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 150.2s loss: 1.1066 accuracy: 0.8279 val_loss: 0.5767 val_accuracy: 0.8634 lr: 6e-05\n","\n","EPOCH 5/10\n","WARNING:tensorflow:6 out of the last 207 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:6 out of the last 207 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 149.4s loss: 1.0932 accuracy: 0.8385 val_loss: 0.5318 val_accuracy: 0.8802 lr: 4.695e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 6/10\n","WARNING:tensorflow:7 out of the last 208 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:7 out of the last 208 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 148.0s loss: 1.0791 accuracy: 0.8496 val_loss: 0.5538 val_accuracy: 0.8845 lr: 3.305e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 7/10\n","WARNING:tensorflow:8 out of the last 209 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:8 out of the last 209 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 143.6s loss: 1.0685 accuracy: 0.8551 val_loss: 0.5625 val_accuracy: 0.8797 lr: 2e-05\n","\n","EPOCH 8/10\n","WARNING:tensorflow:9 out of the last 210 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:9 out of the last 210 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 148.9s loss: 1.0549 accuracy: 0.8683 val_loss: 0.5100 val_accuracy: 0.8871 lr: 9.358e-06\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_0.h5\"\n","\n","EPOCH 9/10\n","WARNING:tensorflow:10 out of the last 211 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:10 out of the last 211 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 147.4s loss: 1.0454 accuracy: 0.8740 val_loss: 0.5288 val_accuracy: 0.8861 lr: 2.412e-06\n","\n","EPOCH 10/10\n","WARNING:tensorflow:11 out of the last 212 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 212 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 150.9s loss: 1.0413 accuracy: 0.8793 val_loss: 0.5369 val_accuracy: 0.8861 lr: 8e-05\n","#### FOLD 1 OOF Accuracy = 0.887\n","WARNING:tensorflow:TPU system grpc://10.97.70.82:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.97.70.82:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.97.70.82:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.97.70.82:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","FOLD: 2\n","TRAIN: [ 0  1  2 ... 46 47 49] VALID: [ 7 14 18 26 29 33 34 35 45 48]\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","EPOCH 1/10\n","time: 310.7s loss: 1.3159 accuracy: 0.6458 val_loss: 0.6128 val_accuracy: 0.8411 lr: 8e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 2/10\n","time: 153.0s loss: 1.1593 accuracy: 0.7894 val_loss: 0.6892 val_accuracy: 0.8520 lr: 7.759e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 3/10\n","time: 153.6s loss: 1.1267 accuracy: 0.8121 val_loss: 0.5947 val_accuracy: 0.8665 lr: 7.064e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 4/10\n","WARNING:tensorflow:5 out of the last 206 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:5 out of the last 206 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 148.2s loss: 1.1140 accuracy: 0.8235 val_loss: 0.5261 val_accuracy: 0.8764 lr: 6e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 5/10\n","WARNING:tensorflow:6 out of the last 207 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:6 out of the last 207 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 146.9s loss: 1.0979 accuracy: 0.8315 val_loss: 0.5544 val_accuracy: 0.8804 lr: 4.695e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 6/10\n","WARNING:tensorflow:7 out of the last 208 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:7 out of the last 208 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 149.5s loss: 1.0804 accuracy: 0.8474 val_loss: 0.5182 val_accuracy: 0.8819 lr: 3.305e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 7/10\n","WARNING:tensorflow:8 out of the last 209 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:8 out of the last 209 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 148.4s loss: 1.0691 accuracy: 0.8568 val_loss: 0.5450 val_accuracy: 0.8845 lr: 2e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 8/10\n","WARNING:tensorflow:9 out of the last 210 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:9 out of the last 210 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 153.4s loss: 1.0546 accuracy: 0.8684 val_loss: 0.5170 val_accuracy: 0.8887 lr: 9.358e-06\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_1.h5\"\n","\n","EPOCH 9/10\n","WARNING:tensorflow:10 out of the last 211 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:10 out of the last 211 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 149.0s loss: 1.0472 accuracy: 0.8750 val_loss: 0.5178 val_accuracy: 0.8883 lr: 2.412e-06\n","\n","EPOCH 10/10\n","WARNING:tensorflow:11 out of the last 212 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 212 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 148.0s loss: 1.0435 accuracy: 0.8772 val_loss: 0.5343 val_accuracy: 0.8797 lr: 8e-05\n","#### FOLD 2 OOF Accuracy = 0.889\n","WARNING:tensorflow:TPU system grpc://10.97.70.82:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.97.70.82:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.97.70.82:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.97.70.82:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","FOLD: 3\n","TRAIN: [ 0  1  2 ... 47 48 49] VALID: [ 8 13 15 16 20 25 30 32 42 43]\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","EPOCH 1/10\n","time: 311.7s loss: 1.2880 accuracy: 0.6596 val_loss: 0.5839 val_accuracy: 0.8584 lr: 8e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 2/10\n","time: 154.2s loss: 1.1587 accuracy: 0.7864 val_loss: 0.5752 val_accuracy: 0.8606 lr: 7.759e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 3/10\n","time: 153.8s loss: 1.1286 accuracy: 0.8088 val_loss: 0.5522 val_accuracy: 0.8681 lr: 7.064e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 4/10\n","time: 153.2s loss: 1.1078 accuracy: 0.8244 val_loss: 0.5676 val_accuracy: 0.8793 lr: 6e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 5/10\n","time: 149.7s loss: 1.0964 accuracy: 0.8333 val_loss: 0.5916 val_accuracy: 0.8752 lr: 4.695e-05\n","\n","EPOCH 6/10\n","time: 151.1s loss: 1.0833 accuracy: 0.8435 val_loss: 0.5179 val_accuracy: 0.8823 lr: 3.305e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 7/10\n","time: 149.1s loss: 1.0679 accuracy: 0.8571 val_loss: 0.5075 val_accuracy: 0.8854 lr: 2e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 8/10\n","time: 149.7s loss: 1.0563 accuracy: 0.8659 val_loss: 0.5338 val_accuracy: 0.8885 lr: 9.358e-06\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 9/10\n","time: 150.2s loss: 1.0470 accuracy: 0.8738 val_loss: 0.5130 val_accuracy: 0.8894 lr: 2.412e-06\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_2.h5\"\n","\n","EPOCH 10/10\n","time: 148.1s loss: 1.0416 accuracy: 0.8773 val_loss: 0.5289 val_accuracy: 0.8875 lr: 8e-05\n","#### FOLD 3 OOF Accuracy = 0.889\n","WARNING:tensorflow:TPU system grpc://10.97.70.82:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.97.70.82:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.97.70.82:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.97.70.82:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","FOLD: 4\n","TRAIN: [ 0  2  3 ... 46 47 48] VALID: [ 1  5  6 12 17 23 24 37 40 49]\n","\n","EPOCH 1/10\n","time: 314.3s loss: 1.3010 accuracy: 0.6464 val_loss: 0.6221 val_accuracy: 0.8452 lr: 8e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_3.h5\"\n","\n","EPOCH 2/10\n","time: 159.4s loss: 1.1627 accuracy: 0.7838 val_loss: 0.5414 val_accuracy: 0.8665 lr: 7.759e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_3.h5\"\n","\n","EPOCH 3/10\n","time: 159.9s loss: 1.1322 accuracy: 0.8050 val_loss: 0.5095 val_accuracy: 0.8828 lr: 7.064e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_3.h5\"\n","\n","EPOCH 4/10\n","WARNING:tensorflow:5 out of the last 206 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:5 out of the last 206 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 159.6s loss: 1.1137 accuracy: 0.8200 val_loss: 0.5075 val_accuracy: 0.8871 lr: 6e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_3.h5\"\n","\n","EPOCH 5/10\n","WARNING:tensorflow:6 out of the last 207 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:6 out of the last 207 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 153.9s loss: 1.0982 accuracy: 0.8312 val_loss: 0.5298 val_accuracy: 0.8864 lr: 4.695e-05\n","\n","EPOCH 6/10\n","WARNING:tensorflow:7 out of the last 208 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:7 out of the last 208 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 151.8s loss: 1.0855 accuracy: 0.8411 val_loss: 0.5244 val_accuracy: 0.8909 lr: 3.305e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_3.h5\"\n","\n","EPOCH 7/10\n","WARNING:tensorflow:8 out of the last 209 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:8 out of the last 209 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 153.5s loss: 1.0711 accuracy: 0.8532 val_loss: 0.5166 val_accuracy: 0.8890 lr: 2e-05\n","\n","EPOCH 8/10\n","WARNING:tensorflow:9 out of the last 210 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:9 out of the last 210 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 151.4s loss: 1.0561 accuracy: 0.8661 val_loss: 0.5213 val_accuracy: 0.8954 lr: 9.358e-06\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_3.h5\"\n","\n","EPOCH 9/10\n","WARNING:tensorflow:10 out of the last 211 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:10 out of the last 211 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 152.6s loss: 1.0484 accuracy: 0.8716 val_loss: 0.5052 val_accuracy: 0.8944 lr: 2.412e-06\n","\n","EPOCH 10/10\n","WARNING:tensorflow:11 out of the last 212 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 212 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["time: 155.0s loss: 1.0434 accuracy: 0.8773 val_loss: 0.5204 val_accuracy: 0.8928 lr: 8e-05\n","#### FOLD 4 OOF Accuracy = 0.895\n","WARNING:tensorflow:TPU system grpc://10.97.70.82:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:TPU system grpc://10.97.70.82:8470 has already been initialized. Reinitializing the TPU can cause previously created variables on TPU to be lost.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.97.70.82:8470\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.97.70.82:8470\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Clearing out eager caches\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Finished initializing TPU system.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","FOLD: 5\n","TRAIN: [ 1  2  4 ... 45 48 49] VALID: [ 0  3  9 19 21 36 39 44 46 47]\n","WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function lrfn at 0x7f0e957e9e18> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n"],"name":"stderr"},{"output_type":"stream","text":["\n","EPOCH 1/10\n","time: 311.5s loss: 1.3067 accuracy: 0.6431 val_loss: 0.6832 val_accuracy: 0.8580 lr: 8e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 2/10\n","time: 158.1s loss: 1.1603 accuracy: 0.7867 val_loss: 0.5457 val_accuracy: 0.8771 lr: 7.759e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 3/10\n","time: 158.8s loss: 1.1309 accuracy: 0.8085 val_loss: 0.5138 val_accuracy: 0.8800 lr: 7.064e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 4/10\n","time: 157.9s loss: 1.1116 accuracy: 0.8225 val_loss: 0.5402 val_accuracy: 0.8788 lr: 6e-05\n","\n","EPOCH 5/10\n","time: 151.9s loss: 1.0979 accuracy: 0.8311 val_loss: 0.5537 val_accuracy: 0.8790 lr: 4.695e-05\n","\n","EPOCH 6/10\n","time: 155.1s loss: 1.0836 accuracy: 0.8443 val_loss: 0.5113 val_accuracy: 0.8864 lr: 3.305e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 7/10\n","time: 153.9s loss: 1.0691 accuracy: 0.8563 val_loss: 0.5605 val_accuracy: 0.8906 lr: 2e-05\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 8/10\n","time: 150.9s loss: 1.0581 accuracy: 0.8649 val_loss: 0.5199 val_accuracy: 0.8913 lr: 9.358e-06\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 9/10\n","time: 153.3s loss: 1.0471 accuracy: 0.8737 val_loss: 0.5097 val_accuracy: 0.8937 lr: 2.412e-06\n","Saved model weights at \"/content/drive/MyDrive/Colab Notebooks/Cassava/model/model_4.h5\"\n","\n","EPOCH 10/10\n","time: 154.5s loss: 1.0432 accuracy: 0.8787 val_loss: 0.5214 val_accuracy: 0.8866 lr: 8e-05\n","#### FOLD 5 OOF Accuracy = 0.894\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"NQyHtXnRCaO5","papermill":{"duration":0.130935,"end_time":"2021-01-20T23:41:32.592224","exception":false,"start_time":"2021-01-20T23:41:32.461289","status":"completed"},"tags":[]},"source":["## Model loss graph"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:41:32.862698Z","iopub.status.busy":"2021-01-20T23:41:32.861475Z","iopub.status.idle":"2021-01-20T23:41:35.936240Z","shell.execute_reply":"2021-01-20T23:41:35.935506Z"},"id":"_7pUdch3CaO6","papermill":{"duration":3.212527,"end_time":"2021-01-20T23:41:35.936368","exception":false,"start_time":"2021-01-20T23:41:32.723841","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1611710259694,"user_tz":-540,"elapsed":10069397,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"b876e834-4ce5-4952-db0e-74ea1fd31bc3"},"source":["for fold, history in enumerate(history_list):\n","    print(f'\\nFOLD: {fold+1}')\n","    plot_metrics(history)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\n","FOLD: 1\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 2 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","FOLD: 2\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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R1lZmV544YV9ruHRRx/VokWL9Pzzz++XoYF33HGH7rzzTn300Ue9PleqcLvdOvTQQ+0uIyVVVVV1+UMRQN/jPgTsxT04wL12fnh55EP21oFe4T4cuG79Szjo+8l5g//71+eB0bBhw7RlyxZNnDhRUvseR0i0bNmyhPUf/vCHKi8v12WXXRbb5na7e3WN4447TsuWLVNRUVGvzgMAAAAgyZq+srsCIKXtqGu2u4Sk6fPA6OSTT9by5cv19a9/Xbt379Zzzz2nv/zlL3192QFr0qTESezcbrfy8vLabY8XDAZlWZaczu59O/Pz85Wfn9+rOgEAAAAAwOBl9ubgX/3qVzrmmGNUXV2t73znOzr11FMlSfPnz9e6deskSaeffrqGDx+ur3/96zr77LN16aWXasSIEb2vPIWVl5fr9ttv1z333KOZM2eqoqJCH3/8sbxer379619r9uzZmjx5so466ih9//vf12effZZw/KOPPqry8nJ99VXr/07MnDlTV155pZ588kmdcsopmjRpks4880y98847+1RjQ0ODbrjhBs2YMUMVFRU66aSTdP/998uyrFibxsZG3XjjjTruuONUUVGhI444QvPmzUuo94EHHtApp5yiiRMn6rDDDtOZZ56pf/7zn/tUEwAAAAAA6J5e9TC6+uqrdfXVV7fbfu+998beOxwOXX/99b25DDrw6KOPasSIEfr5z3+u9PR0FRUVyefzqbGxUT/4wQ80dOhQ1dXV6a9//avOOeccrVq1SkOHDu3ynFVVVdq0aZN+9KMfyePx6Pe//72+//3v64UXXtCQIUO6XVsoFNLFF1+sDz74QJdffrnGjh2rl156SYsXL1Ztba2uuOIKSdLixYv1wgsvaOHChRo1apR2796tf//736qvr5ckPf7447rlllu0YMECTZ06VV6vVx999JF279697184AAAAAACwVwNm0uueeuGdL/XPt760tYYTpx2gmVMP6JNzW5al++67T2lpaQnbb7rpptj7YDCoGTNm6Mgjj9STTz6pefPmdXnOhoYGrVixQjk5OZKkwsJCffOb39Tq1at12mmndbu21atXq6qqSosXL9aZZ54pSZoxY4aam5t13333ad68ecrPz9eaNWt02mmn6ayzzoode+KJJ8ber1mzRuXl5frhD38Y23bsscd2uw4AAABg0Ck8wu4KgJQ2bmTq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j8cVCoX01a9+VT/96U9lGIZuuukm3XbbbVq5cqUk6YYbbpDf79f69evl9/v15z//WZI0f/58PfvsszrzzDMlSX/84x9VXl6u448/vh8+IQAAgAQCIwAAkBPeeecd7dy5U+edd55KSko0evRorVu3TlOmTNGePXt0ww03pMOg6dOnS5KefPJJXXnllZo8ebIk6Ygjjuj169ntdi1ZskRut1uS5PV69U//9E/p49dcc42+9a1vSZL27NmjV155RW+++aYKCwslSSeddJIk6ctf/rJWrlyp5uZm5eXl6dlnn9WXv/zlw/w0AAAAukdgBAAAcsLatWs1e/ZslZSUSEoM9Xr66adVXl6uqqqqTnsO1dbWasyYMYf0esXFxfJ4POntUCiku+++W6+++qoaGhokScFgUIZhaNeuXSosLEyHRZkqKio0depU/f73v9fZZ5+tV155Rd///vcPqSYAAIDeIjACAADDXmtrq373u98pHo9r9uzZkqRIJKLGxkaNGDFCtbW1isViHUKjyspKffbZZ5226fP5FAqF0tt79+5VRUVFettms2Wd//DDD2vr1q164oknVFZWpi1btujCCy+UaZoaOXKkGhoa1NjYqIKCgg6v9ZWvfEVr1qyRYRg64YQTsl4HAACgPzDpNQAAGPY2btwoh8Oh9evXa+3atVq7dq02bNig6dOna+PGjSorK9OPf/xjtbS0KBwOq6amRpJ00UUX6eGHH9b7778v0zS1bds27dixQ5J03HHHad26dTIMQ6+88orefvvtbmsIBoPyeDwqKChQfX297r///vSx8vJynXbaabr11lvV0NCgaDSa1d7cuXO1efNmrV69WhdeeGE/fEIAAADZCIwAAMCw9/TTT+urX/2qqqqqVFZWlv657LLLtH79ej3wwAPatm2bzjjjDJ122mn63e9+J0k677zztGjRIn3nO9/R1KlTde2116aHk33/+9/Xyy+/rOnTp+u5557T3Llzu63h8ssvVzgc1sknn6yvf/3rOvXUU7OO33PPPXI6nTrvvPN0yimn6Je//GX6mNfr1TnnnKPt27fr7LPP7uNPBwAAoCObaZqm1UUAAACge/fff7/+8Y9/6Ec/+pHVpQAAgBxADyMAAIBBrr6+Xk899ZS+/vWvW10KAADIEQRGAAAAg9gTTzyh008/XaeeeqpmzJhhdTkAACBH9GpI2tatW7V06VLV19erqKhIK1as0NixY7PO2bt3r5YtW6bt27crFotp0aJFmj9/viTJMAzdcccdevXVV2Wz2XTVVVfp4osv7pc3BAAAAAAAgMPTqx5Gy5cv14IFC/T73/9eCxYs0LJlyzqc88Mf/lATJ07Uc889p8cee0w/+clPVFtbK0l67rnn9Nlnn+mFF17Q448/rvvuu0/bt2/v23cCAAAAAACAPtFjYFRXV6fNmzdr3rx5kqR58+Zp8+bN2r9/f9Z5H374YfppHyUlJTruuOPSTxjZsGGDLr74YtntdpWUlGju3Ll6/vnne1WgaZoKh8Nibm4AAAAAAICB4ezphNraWlVUVMjhcEiSHA6HysvLVVtbq5KSkvR5X/jCF7RhwwZNmjRJ27dv15///GeNGjUq3UZVVVX63MrKSu3atatXBUYiEb3//vsH9aYAAAAAYDjKD74pSWoKzLS4EiA3/X1XqyRp3EivxZX0jWnTpnV5rMfAqLeWLl2qu+66S/Pnz1dVVZVmzZqVDpn6wsSJE+XxePqsPavU1NR0+wsB0L+4BwHrcR8C1uIeHOI2fiexPG2xtXXgsHAfDl1PrnxNknTJl4b/76/HwKiyslK7d++WYRhyOBwyDEN79uxRZWVl1nklJSX60Y9+lN5euHChjj766HQbO3fu1OTJkyV17HEEAAAAAACAwaPHOYxKS0s1YcIErVu3TpK0bt06TZgwIWs4miQdOHBAsVhMkrRp0yZ9/PHH6XmPzj33XK1Zs0bxeFz79+/Xxo0b9U//9E99/V4AAAAAAADQB3o1JO2WW27R0qVLtXLlShUUFGjFihWSEr2IlixZokmTJukvf/mL7rzzTtntdhUXF+uBBx6Qz+eTJM2fP1/vvfeezjnnHEnStddeq9GjR/fTWwIAAAAAAMDh6FVgNG7cOK1Zs6bD/lWrVqXXv/jFL+qLX/xip9c7HA7deuuth1giAAAAAAAABlKfTXoNAAAAAOhnJz1odQVATrv2oilWlzBgCIwAAAAAYBAyTVOKGzKNqMxYLLGMF0mmKR3YlTjJZpNkk2zJTdna9qW0O0eyyWazZRxTxnFbep8t89q2HRnXJI7bMq/NbDPjWlvmNcAQNqo83+oSBgyBEQAAAAAkmXFDphGTGYsmAhojmliPRWUaMSm13WEZa3duNDvo6XAs8Rrq5DUy25QZz6rP76uVJLWEKjsrfwjoOlRK5E4dAyl1EkjZMtvoJOxKHO4uODvEtjJCN3USutky2+7yHJvywlHt+vR/ZPf4Ez9uX9u6xy+bJ3Pblz7H5uArvNXe+iAR1p70hZEWV9L/+F8bAAAAAMuYZjwRjMSiimcFKN0HLR0Dm66P6SDCnPYBzSGz2WVzOGVzumRzuJLrbtmcTtkcLsnhShzz+BLHna6Mc13p82xOd1Y7/s9ukGxS6MjrJZmJ3kbpz9JM7kvvaTuePs9MrmZf26dttbvWTB9P7+j09c1O2m9/rpnZfldtmWbyNZVxXubSzNjV27a6en+ptnquPX2eaUqtexWr36N4OKR4uEXxcEuv/rdnc7qzgiRbZqjkbhcwtVu3pc/xyWZ39Pha6NzTf/ybJAIjAAAAAMONafayZ0zPvWZkJEOeHsOcrttRPNZnb83mcEnOjHAmK7BJhDB2X35GGNMuzMk8P9mOHC7ZnW4pdU03YU76mNPdf1/I998lScqffHr/tI8BsbOmRuOnTUtvm6YpMxZRvLVF8UhLMkgKykwFSpFQu2MtyZ+QosFamalzwqHeBU8ub6fBks3ddeCUte72JcJOm70/PyZYjMAIAAAAUMZ8MXEjY5no/WKahmRk7IvHZMbjyfNi6fMSx9q3YSSHORmSmdzXoa1OXjMeT5yf0W66rczzU22Zidfo0FZmrYah4nhMW3/fRx+a3ZnRM6ZdCJNc2r3+jDClYzijrBDG3XWY09lrZPTakd3JPDkYsmw2m2wuj+wuj6TiQ27HNE2Z0dYOoVJq3ewQPAWTy5BizQeSx0IywyFldC/rum63r2Oo5O6iB1TGkLvMIXg2t4fgaZAiMAIAAEAHphlPDJsw48ngIjGMwjTbgodU+GEaHcORrGCjyxCjLRyRmRGSZIYwme2lXicjvOnsNbMCl6y2Mvd1Frj00VCkg2WzJ3qj2B2y2e2Sw5n48mR3yOZwZBzruLS7PJI7cV7qepvd2daW3dnWpj3xOrW796hq9BEZgUvXYU6HXjPJa9K9ePiSBwwqNpstEeK4fVJ+ySG3Y5pxmZH2wVPnPZ3MzFCqtUWxxrr0OWaktTdVZ4RLqfmaehhal3VOIHG9y0No3McIjAAAwIBJhw2xaDKQSAQRbYFEPCOoMBPBgGkmvuwnjx/qNWZyX2I+injbehdtpq8xM87LuqZ9mBLP3p+6trNrMuuNG51ek/namdd0XqOZCG8y32OvPqt4uxozPuPBIBV2ZAYntsxwpG3ZPnCxu9zJ4MTeadBiszukLsKY9Loj+Xr2xFw0bW05M4IZe3Zbtp5Dnuz67QMeumytqVFxxlAYAGjPZrOnewdJpYfcjhk3ksFTMlSKtKR7MWUFUe17QYWaFGvY3RZKRcO9KNqeES75ksPrOund1EkolRlW2ZxugqckAiMAAIYh0zSzJ3lNrbd/8o8RkzInfU0f7+z8WKLNdtdnThrb9poZrx1vO0dxQ8WStr5g9SfUx2z2xBNwbLbEl3+bPRkEJJ+QY7O37bclH2dttyf329r22+2SMtY7ucbmdGVfk3mO3d7u9ZKvI3vGa/bimnbXt71e6prOA5cO4Ui3wUkyhLFl9KrJCGHSnw2AbLP+y+oKgF6z2R2yeQOyewOH1Y4ZN3oYWtfSeSjV0qDYgdq24CkW6fnF7I4uezrZPD798xEBuUuqZJrmsP93isAIAIDD0BbMZIYzqcClLVzpEKR0Ec4oK+Dpuk0ZGdfFMsKdfphEVlLiy7wjc/6Q9tvJSWE9gY5PBcrYlsOp2l27VFU9ui1MsbcPKtqHE6mQw5EOZWS3y6bOA43sYKTtmq6CnEO5JjuMsQ37PxgBDCKB0VZXAAw4m90hhy9PDl/eYbVjGlHFw60ZoVIXQ+vaDb+LNR9QvG6H4uEWucIh2fwF0sln9NG7G7wIjAAAQ4YZN2RGIxkBS3a4oi5702SeH2sLb7oJZ9Qu8OkqnJHRx8GM3dlJGNO2nf0Y5k4mf82aRDajnczJYjPaVFYbzk7bTMyn0neBCMNhAOAwbHs8sTzi69bWAfSDeNyUETcVN00ZRrxtu93SiMc77M881rZuyjAS7cWN5DEzsc+I2xQ3/TIMn4x4seKZbdpMxV2mDIcpw5dqO3F8x55mFfhd+l4O/MciAiMAwIAyY1EZrUHFW5sVTy9bZKS3E/uMjGOpbTPc0neF2B1twYk9c9JXp2RvC1TsPm8ycMkIWzInfM0KWzoPZxKPYs4Mazqer1RYwwSyAIDufPLzxJLAaEgzzcwAJN4u8GgLOYx4vC3wyNxvdB6atG/TyPjp6rXS60Y8HdYkwpXs14rH1cVr9nSss9dKvad4sv3Ettnzg9kGjN0m2e122e02OZI/drtNLa1RuZ0OhqQBANBe+nGtrUEZoebE41hDyXAn3JLY1xpM7u8Y/PQ0dtzm8iSeduELyOHNkzO/RPbyMbJ7A4n9bm+7HjWpQMbVeWDTLpzhyT4AAKA3YkZcreGYWiOGWiOJZThjPXUsnNpOHQt3PDcciSkUTizDUUMxw5T+e4fVbzHNbrfJbrPJ4cgORxLLjqGJI/2TOGa32+R02OV2Ze6XHHZ74hpHsn27TQ6HXXab5HAkjyVf1263yWFLnJu+rpPXbV9P27G2a+z2ZJsZr5ndRvZ1nbXXVRh048rXJGnYh0USgREA5KT0xIHJXj1GRqCT6uVjtOsB1NbrJyjFjW7bt3v8snvzEiGPNyBXabUc3kDGvrzkdkB2X176fIc3kOhtAwAA0AsxI54d2nQIeFL7M4KeSKxdmGMoFI5lBT/hSCwR6hwEt8shrzvx43E75fM45HU7VVroktftTO5P7Nu7Z5eqq6s7DWHsyVDEkRl6JIOcxLq9XbjSeWiSFZ6kjmWFKIn17sIR5DYCIwAYokwjKiOjZ088lAp/sod7GelhXm3DveLhkKRu/giy2WX35WWEPH45i8pl9yZ6/aSCoNQxR0YQZPf4Ek9BAgAAkGQkQ52OPXOyQ5zWcGZvnS569rQ756BDHaddXo8zHep4kwFOSYFXPk92qJN1jseZDoO8bmfbOclQyONyyG7vfehSUxPStGnjD/ajBAYUgREAWCQxtCucEexk9/LJCn5CyeFerc2J4V/hoMxouNv2bU53OtCxZw7t8iTCHkdGzx67LzHcy+FLBD82l5f/0gQAQA7JDHXCmcOruhh6lRhi1f3Qq9S5MSN+ULW4nfZEUONpC2i8bqeK873yljqyeuv4PM6M4Kct4Enszz7X43bKcRChDpDrCIwA4DCYZjwj5Glp16Onud3QrmC74V4tPT763ObxZ/XycZVUtRvalerx4+8w3IuhXQAADC+maSp80m8UisQU2tecNcyqY5jTsbdOV0OvWiOGorGDC3VcTntGD5u2oKYo36uR7UKdzB49vnY9e7yeZPCT7LVDqIPBbum3ZlhdwoAhMAKQ80wj2vlTupI9eeLJXj1Gu6FfiWMt6s3QLrsnOWzLF0gM7fIE5PClhnD5E+e0H+7l8TO0CwCAYco0TYXCMTUGI2oMRtTUklwmtxvbbaeOH0ywkwh1Og6rKsr3JnvftAU7HYdppQKetlAnc5gWoQ5yVWGex+oSBgyBEYBhJx4Ny2g+IKO5XrFgYpnaDuz8TDs/eDpruFfvhna1zdnjzC+RvWx01nCvDr1+fHmyewKyuRnaBQDAcBePm2ppjWaFPKmAp6tAqKkl0uX8O3ablOd3K9/vVkHArYoSv44ZXaR8v1sTbevkcdlVN+LSDvPwZA3TcjnkcPBEUKCvbXzrM0nS3JPGWFxJ/yMwAjAkmHFDRktjIvwJJgKgWHO9jFQglLHPjIQ6NmCzyxEolN3mkvxlcpVUdtrLp33wY/cGZHe6B/4NAwAASxhxU8FQVI3BsJqCyWVX4U96GVU83kX4Y7epINAW/lSV5em4sYnt1L7UT35yGfC6up5AeeO1ieW07/bTJwCgOy++Q2AEAAMiHg7JCCbDn+YDyeCnvt32ARktjZLZsQu2zeOXM1AkR16R3COPki9QJGdekRyBIjnyihM/gSI5/Pmy2R2qqanRsdOmWfBOAQDAQDOMuJpaUqFPYtkYjHba2yd1rDkUkdnFaHOnw66CgEsFAY/y/W6NqShIhzwdwp/ktt/rpLcxgCGJwAhAnzPjhoxgQ3ooWKyTXkCpYMiMtnZswO6QI1AoZ16xnPkl8lSOSwdAzrxEOJTatrtyZwwxAAC5LBqLq6ml5zl+Mo8HQ9Eu23M77clwx6P8gEtHVRcp3+9KB0AF/rZjiYDIJZ+H8AdA7iAwAtArpmnKDLcoFmybD8gI1iuWXk/OGdR8QPGWJnU2EbTdm5cOezxVR8uZ6v2TVyRHoDixnVckuy9PNhtj7gEAGK4iUaMt5GnOCH8yQ592AVAo3PWTRb1uR9uQLr9bFaX+jNDH3a4XUCIE8rr5KgQA3eH/JYEcZxpRGcGGjkPAmuuT4VDbfjMW6diAw5kcElYsZ2G5PNXj5cgrSu9zZPQIYi4gAACGF9M0FY4Yvertk7k/HDG6bNPvdabDncKAW6PK87oIftrW3S6eKgoAfY3ACBiGTNNMPBY+Y+hXrPlA2wTRzQfSYVA81NRpG3ZffiL4ySuWa/RxHXoBpXoG2b15dM0GAGAYOJTHvDcFI4p085j3PF/bEK+SAq/GVhZ0mOMncwhYnt8tl5Next06fYPVFQA5bfmVJ1tdwoAhMAKGkHgskg6AuuoFlAqDZHTstm1zutPBj6ukSr7Rx7f1AkrPEVQsR6BANofLgncIAAAOVzQWVzAUVUtrVM2hqIKhqIKtUQVDMQVDUf1ta4M2ffruQT3m3WaT8nxtvXoqSvw6elRRl71+CgJu5flcPNa9Pzj9VlcA5LRcGs6aO+8UGKRMM654qLnbXkCpICjeGuykBZscgYJ0jx/XiGo5AkUZ8wMVp4eI2Tx+egMBADCImaapcNRIhDyhqFpaY+1Cn9R6rMO+REAUUyTa9XAvKRH+FAYi6aCnqixP44/o4klfvXnMOwbWxysTy2MXW1sHkKPWv75VkvSl2UdaXEn/IzAC+kk8Gu7+MfGpCaODDVK84x92Npcn3ePHPWK0HGMnZT8pLJDqGVQom51x+wAADAbxeGJYV1a400XAk15PHUv+GPEunume5HTYlOdzK+Bzyu91KeBzaUSRT4HkesDnVJ7XJb8vue11Kc/nSp7r1Ob339P06dMH6BNBn/vsicSSwAiwxGvv7ZBEYJS2detWLV26VPX19SoqKtKKFSs0duzYrHPq6up04403qra2VrFYTDNnztTNN98sp9Op++67T7/+9a9VXl4uSZo6daqWL1/e528G6G9m3JDR0pQxMXQq+KnvMFm0GW7p2IDNLkegMN0byFd2RPIx8W3DwtJPCnP7Bv5HeqsGAAAgAElEQVQNAgCQ4wwjnh3g9NCrp/3xltaozO7zHnncjnS4k+dzqTDgVtWIQHo7FQIlQh9ndujjc8nttB9Wj2F6GwMAeqNXgdHy5cu1YMECzZ8/X88884yWLVum1atXZ53zwAMPaNy4cXrooYcUjUa1YMECvfDCCzr//PMlSRdeeKG+973v9f07AA6BacYVD4cUDzXJCDUrHmpKDAsLNSUmi07uM0LNirdmrgcls+PEjjaPP/lUsCK5Rx4pX6Ao2QsoFQYlh4f58+kNBABAP4pEjXa9e2JdBDwZ+zOOt3bz9K6UgDcR4qSCnfJiv/yVyWCnk9An4EsGP8l1J/P6AACGgB4Do7q6Om3evFmPPPKIJGnevHm6/fbbtX//fpWUlKTPs9lsCgaDisfjikQiikajqqio6L/KAfV98JNi9/hl9+XJ4cuX3ZcnZ2FZej2zF1AqELK7PAP4rgEAGJ5M01RrxOi+d08Pw7qi3TyxS5Lsdlu6t05qSFd1WV5yu23YVlbok+zh4/e55PM45WAuHwBADugxMKqtrVVFRYUcjkSvCIfDofLyctXW1mYFRosXL9b111+vOXPmKBQK6bLLLtO0adPSx9evX6/XXntNZWVluv7663XiiSceVKHvv//+QZ0/mNXU1FhdwuBjmrLFwrJFQ4mfSKts0ZDsqe1oxnbyWHq/uu73HXd6ZLp8Ml3exNJdrHheZXKfL30snlp3e2U6fZK9h//yF5QUDCZXdvTlJ4EBwD0IWI/7cHiKx02FY6ZaI3G1RuNqjcQVjia3I3G1Rrs4Fo2rNWKqNRrvcTiX0yF5XHZ53XZ5XXZ53TYV+ewaWeiU1+WS123POG7LOC9xrsth62JIVlxSOPmTFJYiYWl/vbS/Dz+nwYB7cOg6tqlJkvQxv8Mhj/twaGpK3oPD5feXmdu012eTXj///PMaP368fvnLXyoYDGrhwoV6/vnnde655+rSSy/VokWL5HK59Prrr2vx4sXasGGDiouLe93+xIkT5fEM/V4cNTU13f5ChrpOe/y0Nstoyejxk7Hd1huodz1+7N58OUpGtPX+8ebJ4U8sM3sEOZLbDP9Ce8P9HgSGAu7DocE0TbW0xrS/sVV1DSHVNbRqf2Pip6shXS2tsR7b9Xna5u/x+1wqLUkN4XK29eZp37snddzrktvFv+2Hi3twiJuW+JLKb3Bo4z4cunLp19ZjYFRZWandu3fLMAw5HA4ZhqE9e/aosrIy67xf/epXuuuuu2S325Wfn68zzzxTb775ps4991yVlZWlz5s9e7YqKyv1ySef6KSTTur7d4Q+0WXw026I18EGPzaPX45U8JM51Kt94OPLk92Xnwh+vAHZHDzQDwCAvhKNxXUgGf7UNSQCobb1Vu1vTAREnc3n4/c6led3p+fmqSjxd5y3x+fsPPTxOOVg/h4AAIaEHr+Fl5aWasKECVq3bp3mz5+vdevWacKECVnD0SRp1KhReuWVVzR58mRFIhFt2rRJZ599tiRp9+7d6fmMtmzZoh07dujII4f/I+gGg0MKfpLLHoMfbzLU6Sn48aZ6AxH8AADQn0zTVGMw0i78addDqKFV9c3hDtc6HXaVFHpVWuDV2KpCTZtQodICX2Jf8qekwCuvm3/LAUtt+VFiOeH/WlsHkKN++/LfJElfPeNoiyvpf736F/+WW27R0qVLtXLlShUUFGjFihWSpIULF2rJkiWaNGmSbrrpJi1fvlwXXHCBDMPQzJkzdckll0iS7r33Xn3wwQey2+1yuVy65557snodoWeZwU/3kzonjx1O8JPczurpQ/ADAIClwlFD+xuyw5+6ho7DxTqb9Lkwz50Of44ZXaTSAq9KCn1ZQVBBwM3j1oGhYMe6xJLACLDE21t2SSIwShs3bpzWrFnTYf+qVavS62PGjEk/Sa29VMAESaYpozXYRfDTtn3owU8i1Ok0+MmY74fgBwCAwcGIm2psDnc6NCxzuzkU7XCtx+1Ihj9eHXdESVsAVOhVaUEiECou8MjlZN4fAABwcEgLBtCuJ+9R0cdvadvvu378R3bwk9njp11PH4IfAAAGvZbWaKL3T0Or6pLzAiXWW9O9hfY3hRWPZ/9tYLdJRfmJ8GdkaUBfOKpUpYU+lRRkDA8r9CngddIrCAAA9AtShgEUOO5k1UUdqj7qmLYnfKV7ABH8AAAwVMSMuA40hrNDoIZQRhCUmDg6FO44aXTA60wMByvwavIxZYkAqN0QsaI8D5NDAwAAS5FODKD8iaepNRxQUS49hw8AgCHENE01h6Jtw8GSvYHa9xJqaA7LbNdh2OmwqaQgMR/Q2MoCTTuuPD0/UGkyDCop8Mrr4c8vAIfB4bO6AiCnuV25M8ybv1gAAEBOiESN9HxAnQ0RSwVEkU4mjS4IuNPDwcZVF2UEQd70ULGCgFt2O8PDAPSzM35ndQVATrt14SyrSxgwBEYAAGBIi8dNNQTDHZ4c1n6uoKaWjpNGu12OdPhz7JjijvMEJdeZNBoAAOQaAiMAADBohcKxbp8cVtfQqgONrTLaTRpts0nF+R6VFHhVUeLXhCNLVFrQNll0at6ggM/FpNEAhpa/3p5YTvqBtXUAOeo3//ORJOnSs8dbXEn/IzACAAADzjDiOtAU7hD+7E8ODUutt7TGOlzr9zrTPX8mHz2i0+FhxflMGg1gmNr9YmJJYARY4r1P9koiMAIAAOggZsQVCscUao0pFI6pJbUMRxVqjaklnL0/sS+a2BeKac/+JgX/e3uHSaMddptKkuHPmJH5OnF8eSfDw3zyMWk0AABAv+MvLgAAckAq5EmHO62JACd7X9fHQhnHOpsUujNup11+r0s+j1M+r1M+j1MlhV4V+qI69qhRWU8OKy30qjDgYdJoAACAQYLACACAQSoai2cEN9HsAKezgCejd0+oXa+fXoc8Lof8yXDH53HK73WqtNArf7lLPq9T/ozwJ7Xu97jS56aWXo9Tzi6GhNXU1GjatAl9+VEBAACgjxEYAQDQh1IhT4eAJx3mRDsEOy1dhELRXoY8HrejQ4AzosjXIcRpW2YHPOkgyONk3h8AGOw8pVZXAOS0fL/b6hIGDIERACDnRWNGpz13sube6aZnT+aQrpjR+5DH78kOccqL/R0CnLZePe1CHo8zMdzL7SDkAYBccupTVlcA5LSbrjjJ6hIGDIERAGBIygx5ssOcjiFOT3P29Dbk8brbD9dKhjxdDNHKHMKVCIBc6eFaDubqAQAAwCBGYAQAsFQ4aqgpGFFTS0SNzRE1tiTWm4IRNQaT28HUvqiaQ1GFwlHFDLPnxiX5PI5kwNM2B09FiT+rF4/f23EOHl+7Y4Q8AIBB4d0bE8sT7ra2DiBH/XL9ZknS5V863uJK+h+BEQCgT5imqZbWWCL4SYY96eAnuS8z+Enti0SNLtv0eZzKD7hV4HepIOBRZWmeAr6uA570E7lSEy+7nTx1CwAwvOzbZHUFQE77cNt+q0sYMARGAIAOjLip5pa20Ccz7Ensi6oxGE4u24IhI955rx+bTcrzuVUQcCnf79aIIp+OrC5Qvt+tgkDiJ9/vToZDiWW+3y2Xk7l5AAAAACsQGAHAMBeJGhlBT7J3TzCcHOoVzQqEUsO/mkPRLttzOuzp4Cc/4Nboirx08JPvT/wU5GUHPwGfi+FcAAAAwBBCYAQAQ4RpmgqFY9nBT0sk0dMnGfxkzfuT3G6NdD3ky+t2JIKeZLBTUeLP2s5P9v5pC38SQ75sNsIfAAAAYDgjMAIACxhxU8FQNCvsyZr3p5N5gJpaIl1O9GyzSQGvKx32lBR4NbayoJOhXom5gPL9iXNdTscAv3MAAHBY/KOsrgDIaSMKfVaXMGAIjADgMEVj8U6HdWXN/9NuX3MoKrOLh3w57LZ0D5+CgFvVZXnKP8KdDHk8WcPBUoFQnt/NkC8AAHLBKb+yugIgp33nsmlWlzBgCIwAIMk0TbVGjC4e595xXyr8CYW7HvLlcTsSwU8y/Ckr9ivf7+pkqFfb5M8M+QIAAABgNQIjAMNeOGpo176gduxtVs2WJn2we3PWPEBNyXmAGoNRxYx4l+0EfK70sK6ifK9GV+RnPdWrICP4SfUA8rgY8gUAAPpQzb8lltN+am0dQI5atfavkqSFF06yuJL+R2AEYFgw4qb2HmjRzr1Bbd/bpJ17EwHRzr3N2lsfyhr+Zbc3poOf1ETPx4wuyp7vp33443fJ4eAR7wAAwGIH3rW6AiCnfbqzweoSBgyBEYAhwzRN1TeHs8KgHXubtWNvULX7glm9g/xep6rK8jRhbKnmlgVUVZan6vI87fr8E80+eTpDvgAAAACgGwRGAAadltaodu4LJgOhoHbsadaOfYmAqKU1lj7P6bCrckRA1WUBnXR8RSIUKstTVVlARXmeTkOhht12wiIAAAAA6AGBEQBLRGNx7aprC4V27mtO9xra3xhOn2ezSWVFPlWV5emMaaNVVRZQdTIYKiv282QwAAAAAOgHBEYA+k08bqquoTURCqUDoUSPod0HWhSPt00sVJjnVtWIPE0dX5EVCo0cEWDiaAAAgJT8Y62uAMhp1WV5VpcwYAiMABy2xmAkYz6h5rY5hvYFFYm2PXLe43aoekSexo0q1GknVieHkCXmF8r3uy18BwAAAEPEzIesrgDIadddfILVJQyYXgVGW7du1dKlS1VfX6+ioiKtWLFCY8eOzTqnrq5ON954o2praxWLxTRz5kzdfPPNcjqdMgxDd9xxh1599VXZbDZdddVVuvjii/vj/QDoJ62RmGr3BdNhUNuk00E1tUTS59ntNo0s8auqLE8nHFuWDoWqy/JUUuBl/iAAAAAAGAJ6FRgtX75cCxYs0Pz58/XMM89o2bJlWr16ddY5DzzwgMaNG6eHHnpI0WhUCxYs0AsvvKDzzz9fzz33nD777DO98MILqq+v14UXXqhZs2Zp1KhR/fKmABwaw4hrz4FQOhDKDIX21Yeyzi0t9Kq6LE+zp1SlewlVl+WposQvJ4+fBwAA6B9vXpVY0tMIsMT9a96VlBs9jXoMjOrq6rR582Y98sgjkqR58+bp9ttv1/79+1VSUpI+z2azKRgMKh6PKxKJKBqNqqKiQpK0YcMGXXzxxbLb7SopKdHcuXP1/PPP68orr+yntwWgK6Zp6kBTOCsMSg0n21UXVMxom1co4HWqujxPE8eValRZXjoUqhwRkM/DiFYAAIAB1/Sx1RUAOW3H3marSxgwPX7jq62tVUVFhRyOxKSzDodD5eXlqq2tzQqMFi9erOuvv15z5sxRKBTSZZddpmnTpqXbqKqqSp9bWVmpXbt2HVSh77///kGdP5jV1NRYXQJyQGskrrqmmOoaY6primasxxSJtYVCDrtUmu9UaYFLY8fnJdedKs13yu/JfAR9s2Q068Au6cDB3b6DDvcgYD3uQ8Ba3IND17FNTZKkj/kdDnnch0NTU/IeHC6/v1Ru05k+6yLw/PPPa/z48frlL3+pYDCohQsX6vnnn9e5557bJ+1PnDhRHo+nT9qyUk1NTbe/EOBgRGOGavcFs3oJ7dyXmGOovin70fTlxX5Vlxdr2hfankBWXZan0iJfTj2annsQsB73IWAt7sEh7kC+pO6/5GHw4z4cup588zVJuXEP9hgYVVZWavfu3TIMQw6HQ4ZhaM+ePaqsrMw671e/+pXuuusu2e125efn68wzz9Sbb76pc889V5WVldq5c6cmT54sqWOPIwBdi8dN7asPtQ0h25d4LP2Ovc3ae6BFGU+mV1G+R9VleZoxoULV6SFkAY0sDcjNo+kBAAAAAL3UY2BUWlqqCRMmaN26dZo/f77WrVunCRMmZA1Hk6RRo0bplVde0eTJkxWJRLRp0yadffbZkqRzzz1Xa9as0TnnnKP6+npt3LhRjz32WP+8I2AIMk1TjcFI1rxCqfXafUFFYvH0uT6PQ1VleRo/plhnTBudeAJZeZ6qRuQp4HNZ+C4AAADQ74qH/0S7wGB2VFWh1SUMmF4NSbvlllu0dOlSrVy5UgUFBVqxYoUkaeHChVqyZIkmTZqkm266ScuXL9cFF1wgwzA0c+ZMXXLJJZKk+fPn67333tM555wjSbr22ms1evTofnpLwODVGo6lh4ylh5DtDWr73mYFQ9H0eU6HTSNLE0PHph5XkfUUsuJ8D4+mBwAAyFXTfmp1BUBOW3jhJKtLGDC9CozGjRunNWvWdNi/atWq9PqYMWPST1Jrz+Fw6NZbbz3EEoGhJWbEtXt/S6dPIatraM06d0SRT9VlAZ12YnV6TqGqsoAqiv1y8Gh6AAAAAIBFeC42cAhM09T+xlbtaBcI7dzbrF11LTIyJhbK97tUXZanKceUZYVClSMC8rq5BQEAAHAQ3vhGYnnKr6ytA8hRP34s8XS071zGpNcAkuoaQlq9YYv+sbNRO/c1qzVipI+5XQ5VjQhobGWhTplclREM5akg4LawagAAAAwrLdutrgDIafsaQlaXMGAIjIBe2FUX1M0PvKGG5rC+cFSpJh5dmgiFRiRCodJCr+w59Gh6AAAAAMDwRmAE9OCzXY36wYObFI0ZuvOa2Tp2TLHVJQEAAAAA0K8IjIBu/O3zei17aJOcDpvuXjxHR1QWWF0SAAAAAAD9jsAI6MIHn9bp1l/8r/IDbt1x9SmqHBGwuiQAAADkuhGzrK4AyGnHHVFidQkDhsAI6ETNh7t116Nvq7zYp9uvPkUjinxWlwQAAABIJ9xtdQVATrv8S8dbXcKAITAC2nn9vZ360WPvaMzIAt121SwV5nmsLgkAAAAAgAFFYARk2PjWNt33xLsaf0SJll15svJ8LqtLAgAAANq8+rXE8tSnrK0DyFF3PfqWJOmmK06yuJL+R2AEJD376t+1au37OvHYMt10xUnyerg9AAAAMMiE66yuAMhpTS0Rq0sYMHwjRs4zTVOPb/xYjz3/oWZNqtR3vzFNLqfD6rIAAAAAALAMgRFymmmaemTdZj39h7/pzOmjteSSE+Rw2K0uCwAAAAAASxEYIWcZcVM/f+o9/f5/t2ne7CO18MJJstttVpcFAAAAAIDlCIyQk2JGXD/59Z/0yrs7dPFZx+ib502QzUZYBAAAgEGu4iyrKwBy2pRjyqwuYcAQGCHnhKOGVqx+W29v3q0rvnS8vnbmMVaXBAAAAPTOpB9YXQGQ0y49e7zVJQwYAiPklJbWqO585C399e/7tPhrk3XeKUdaXRIAAAAAAIMOgRFyRlNLRLes2qS/bW/QtxdM0+lTR1ldEgAAAHBwXj4vsTzjd9bWAeSo5as2SZJuXTjL4kr6H4ERcsKBxlb94ME3tHNfUDddPkMzJ1ZaXRIAAABw8IyQ1RUAOS0SNawuYcAQGGHY27O/RTc/+IYONLZq+b+crCnH5s4kZQAAAAAAHAoCIwxr2/c06QcPvKFQxNDti07RcUeUWF0SAAAAAACDHoERhq1PdzRo2UNvyCab7l48W0dWFVpdEgAAAAAAQwKBEYalLVv369ZfbJLP69Idi05RdVme1SUBAAAAh696ntUVADltxoSRVpcwYAiMMOy8+/Ee3fHIWyot8Or2RaeovNhvdUkAAABA35jwf62uAMhpXz3jaKtLGDAERhhWNv21Vvf81zsaVZ6n266epeJ8r9UlAQAAAAAw5BAYYdh4ueZz/fQ3f9Yxo4t0y5UnK8/vtrokAAAAoG9tPD2xnPsHK6sActaNK1+TJN29eI7FlfQ/AiMMC+tf36oHfvsXTT56hG7+PzPl8/A/bQAAAAAADhXfqjHkrXnxY63esEUnHT9S3/vWdLldDqtLAgAAAABgSCMwwpBlmqZWb9iiJ1/6RF88cZT+7f87UU6H3eqyAAAAAAAY8noVGG3dulVLly5VfX29ioqKtGLFCo0dOzbrnBtuuEEfffRRevujjz7Sz372M5111lm677779Otf/1rl5eWSpKlTp2r58uV99y6Qc+JxUw8+/RdteOMfOm/WWC366mTZ7TarywIAAAAAYFjoVWC0fPlyLViwQPPnz9czzzyjZcuWafXq1Vnn3HPPPen1Dz/8UJdffrlOPfXU9L4LL7xQ3/ve9/qobOQyw4jrp4//WX+o2a6vnXG0Lv/S8bLZCIsAAACQA8ZcYnUFQE6bM6Xa6hIGTI/jd+rq6rR582bNmzdPkjRv3jxt3rxZ+/fv7/KaJ598UhdccIHcbp5Shb4VjRn64eq39Yea7frmeRMIiwAAAJBbjl2c+AFgiS/NPlJfmn2k1WUMiB57GNXW1qqiokIOR2IiYYfDofLyctXW1qqkpKTD+ZFIRM8995weffTRrP3r16/Xa6+9prKyMl1//fU68cQTD6rQ999//6DOH8xqamqsLmFIisTi+s0rdfp0V1jnTSvSuOIm/elPf7K6LAxB3IOA9bgPAWtxDw5dtnirJMm0ey2uBIeL+3BoisTikiS3c3jMnztt2rQuj/X5pNcbN25UVVWVJkyYkN536aWXatGiRXK5XHr99de1ePFibdiwQcXFxb1ud+LEifJ4PH1d7oCrqanp9heCzjWHorp11Sb9Y3dY/3bpiTprxhirS8IQxT0IWI/7ELAW9+AQt/H0xHLuH6ysAoeJ+3DounHla5KkuxfPsbiS/tdjJFZZWandu3fLMAxJkmEY2rNnjyorKzs9/6mnntLXvva1rH1lZWVyuVySpNmzZ6uyslKffPLJ4daOHFHfFNZNK1/T37bX63vfmkFYBAAAAABAP+sxMCotLdWECRO0bt06SdK6des0YcKEToej7dq1SzU1Nbrggguy9u/evTu9vmXLFu3YsUNHHpkbY/5wePYeCGnpz17Tjr1B/eBfTtYpk6usLgkAAAAAgGGvV0PSbrnlFi1dulQrV65UQUGBVqxYIUlauHChlixZokmTJkmSnn76aZ1xxhkqLCzMuv7ee+/VBx98ILvdLpfLpXvuuUdlZWV9/FYw3Ozc26ybH3xDwVBUt101S184qtTqkgAAAAAAyAm9CozGjRunNWvWdNi/atWqrO1rrrmm0+tTARPQW/+obdQPHnxD8bipO6+ZraNHFVldEgAAAAAAOaPPJ70GDtdH2/brllX/K4/bobuuma3RFflWlwQAAAAMDkddYXUFQE47a3ruzKlLYIRB5S9/26s7Hn5ThXke3bFotipK/FaXBAAAAAweBEaApeaeRGAEDLi3PtilH65+W5UjArrtqlkqLfRZXRIAAAAwuLTuSyy9I6ytA8hRDc1hSVJhnsfiSvofgREGhVf+vF33/vpPOrK6ULcunKWCgNvqkgAAAIDB57WLEsu5f7C0DCBX/XD125KkuxfPsbiS/kdgBMs9v+kfWvnUezr+yFIt+5eZ8ntdVpcEAAAAAEBOIzCCpX778t/0yLoPNH1ChZZePkMel8PqkgAAAAAAyHkERrCEaZp67Pcf6vH/+VhzplTp2wumyeW0W10WAAAAAAAQgREsEI+b+sWz7+u5Vz/VOTOP0OKLpshht1ldFgAAAAAASCIwwoAyjLjuW/OuXnz7c80/bZz+5ctfkM1GWAQAAAD0yjHXWF0BkNPOn3Wk1SUMGAIjDJhoLK4fP1aj1/+yUwvOGa9LzxlPWAQAAAAcjCO+bnUFQE479cRqq0sYMARGGBCtkZju/uXb+tOHe3Tl/Imaf9o4q0sCAAAAhp7g54llYLS1dQA5au+BkCSprNhncSX9j8AI/S4Yiur2h9/U5q11uv6SE3TOzCOsLgkAAAAYmjZ9M7Gc+wdLywBy1b3/XSNJunvxHIsr6X8ERuhXDc1hLV+1Sf/Y2ajvfmO6Tj0hd7rvAQAAAAAwVBEYod/UNYT0gwc3aXddUDf/n5maPqHC6pIAAAAAAEAvEBihX+yqC+rmB95QYzCiW66apUnjRlhdEgAAAAAA6CUCI/S5z3Y16gcPvqFoLK47Fp2iY8cUW10SAAAAAAA4CARG6FN/+7xeyx7aJJfTprsXz9ERlQVWlwQAAAAMH8d9x+oKgJz2lS8ebXUJA4bACH3m/b/v023//5vKD7h1x9WnqHJEwOqSAAAAgOFl1AVWVwDktJO+MNLqEgYMgRH6xDtbduvuR99SeYlft199ikYU+awuCQAAABh+Gj9KLAvGW1sHkKO272mSJI0qz7e4kv5HYITD9tp7O/Tjx2o0ZmSBbrtqlgrzPFaXBAAAAAxPb12dWM79g6VlALnqZ0++J0m6e/EciyvpfwRGOCwb39qm+554V8eNLdGyfzlZAZ/L6pIAAAAAAMBhIjDCIXv2lb9r1TPv68Rjy3TTP58kr5v/OQEAAAAAMBzwDR8HzTRNPb7xYz32/IeaNalS3/3GNLmcDqvLAoBhr7GxUXv27FE0GrW6lMPidDq1ZcsWq8tADnO5XCovL1dBAU9zBQCgKwRGOCimaerh5z7Q2j/+XWdOH60ll5wgh8NudVkAMOw1NjZq9+7dqq6uls/nk81ms7qkQxYMBhUI8CRNWMM0TYVCIe3YsUOSCI0AAOgCgRF6zYib+vlT7+n3/7tN8+YcqYXzJ8luH7pfWABgKNmzZ4+qq6vl9/utLgUY0mw2m/x+v6qrq7Vz504CIww9E2+2ugIgp3197rFWlzBgCIzQKzEjrnt//Se9+u4OXTL3WH3j3OOG9H/dBoChJhqNyufzWV0GMGz4fL4hP7wTOWrkXKsrAHLaCceWW13CgCEwQo/CUUM//OXbemfLbv3zvOP11TOOsbokAMhJBPVA3+F+wpB14N3EsvgEa+sActSnOxokSUdVF1pcSf8jMEK3WlqjuuPht/T+p/u0+KIpOm/WWKtLAgAAAHJXzb8llnP/YGkZQK5a9cxfJUl3L55jcSX9r1eB0datW7V06VLV19erqKhIK1as0NixY7POueGGG/TRRx+ltz/66CP97Gc/01lnnSXDMHTHHXfo1Vdflc1m01VXXaWLL764T98I+l5TS0S3rKmsf5MAACAASURBVNqkv21v0LcXTNPpU0dZXRIAAAAAABgAvQqMli9frgULFmj+/Pl65plntGzZMq1evTrrnHvuuSe9/uGHH+ryyy/XqaeeKkl67rnn9Nlnn+mFF15QfX29LrzwQs2aNUujRhFADFb7G1u17ME3tHNfUN+/4iSd9IWRVpcEABgmpk6d2uM51dXVeumllw75NX7729/qxhtv1IsvvsjfGwAAAIegx8Corq5Omzdv1iOPPCJJmjdvnm6//Xbt379fJSUlnV7z5JNP6oILLpDb7ZYkbdiwQRdffLHsdrtKSko0d+5cPf/887ryyiv78K2gr+ze36IfPPCGDjS1avmVJ2vKMWVWlwQAGEYeffTRrAm8r7vuOo0fP17XX399el/qb4hDdfrpp+vxxx9XeXnuTEwJAADQl3oMjGpra1VRUSGHwyFJcjgcKi8vV21tbaeBUSQS0XPPPadHH300q42qqqr0dmVlpXbt2nVQhb7//vsHdf5gVlNTY3UJXdrXGNXql/YpEo3rsjNGKNb4mWpqPrO6LKBPDeZ7EOiK0+lUMBi0uow+MXny5Kxtp9Op/Px8HXNM9kMVMt+vYRgyTVNOZ++mX/R4PDrmmGMUjUZz6klYpmkqFovJ5XJZXcqQEIlEcvbfhFx938PBsU1NkqSP+R0OedyHQ1NT8h4cLr+/adOmdXmszye93rhxo6qqqjRhwoQ+bXfixInyeDx92qYVampquv2FWOnTHQ36ybNvyO5w6p5rZunIquE/6ztyz2C+B4HubNmyRYFAwOoy+kQwGMx6L3a7XU6nM2vf+PHjtWjRIgUCAf3mN79RbW2tnnrqKY0bN04//vGP9cYbb2jHjh3y+/2aNGmSvvvd72rcuHHp6zsbknbmmWdq6tSpOuOMM3T//fertrZWRx11lG666SZNnz6925q3bdum+++/XzU1Ndq3b5/Kyso0Z84cffvb31ZhYfa/l2+99ZZ+/vOf6y9/+YsMw9CYMWP0zW9+M2v+xieeeEL//d//rb///e/yeDwaP368vv3tb2vq1Kl688039a1vfUurV6/WzJkze/WeTj75ZP3iF7/Q559/rp/+9Kc6++yz9Z//+Z96+eWXtW3bNrlcrvRrnHBC9pOV9u/fnz63rq5OpaWlOumkk3TnnXfq5Zdf1pIlS/TMM8/ouOOOy7rum9/8psLhsJ544oluP7vBzO12a8qUKVaXMeD4t3CIG3OfJGlaGb/DoYz7cOjyl+yXJE04svMRV8NJj4FRZWWldu/eLcMw5HA4ZBiG9uzZo8rKyk7Pf+qpp/S1r32tQxs7d+5M/xfF9j2OYL0tW/fr1l9sks/r0h2LTlF1WZ7VJQEAevDSO5/pf96ythfo2SeN0ZnTx/RL27/97W81evRofe9735PP51N5ebkikYiCwaCuueYalZWVqaGhQb/+9a916aWXasOGDSor634YdU1NjbZu3ap//dd/lcfj0X/8x39o0aJFeumll1RQUNDldam/fW666SYVFhbq888/14MPPqirrrpKjz/+ePq8jRs3asmSJZo6dapuu+02FRcX65NPPtHOnTvT56xYsUIPP/ywLrroIl1//fWy2+169913VVtbe0if05tvvqkPP/xQ1113nUpLS1VdXS1J2r17ty6//HKNHDlSoVBIzz77rL7xjW/oqaee0vjx4yVJDQ0NuvTSS9XQ0KBrrrlG48ePV11dnV588UVFIhGdddZZKi8v129+8xvdcsst6df8+9//rrfeekt33333IdUM4DCUnWJ1BUBOy4WgKKXHwKi0tFQTJkzQunXrNH/+fK1bt04TJkzodDjarl27VFNTo3vvvTdr/7nnnqs1a9bonHPOUX19vTZu3KjHHnus794FDsufP9qjOx99S6UFXt2+6BSVF/utLgkAAJmmqYcfflherzdr/5133pleNwxDc+bM0SmnnKL169friiuu6LbN5uZmrV27Nt0raMSIEbrooov0xz/+URdccEGX182YMUMzZsxIb5944okaM2aMLrvsMm3evFnHH3+8TNPUXXfdpeOOO06rV6+W3W6XJJ1yStuXu23btunRRx/VFVdcoRtvvDG9//TTT+/x8+hKY2Ojfvvb33YIy9p/Tqeeeqq+9KUvac2aNbr55pslJeaT+vzzz/XUU0/p+OOPT58/b9689Poll1yiRx99VDfccIP8/sTfCE888YQKCgp0/vnnH3LdAA7R3jcSS4IjwBJbttLDKMstt9yipUuXauXKlSooKNCKFSskSQsXLtSSJUs0adIkSdLTTz+tM844o0PX7Pnz5+u9997TOeecI0m69tprNXr06L58HzhEm/5aq3v+6x2NKs/TbVfPUnG+t+eLAACDwpnT+693z2Bw6qmndgiLpMTDNB555BFt3bo1PY+AJH366ac9tnnCCSdk/Z2S6mnTU++eSCSihx9+WGvXrtXOnTsVDofTx7Zu3arjjz9en376qXbs2KGFCxemw6L23njjDcXjcV1yySU91tpbU6ZM6bRn1RtvvKGf//zn+vjjj1VfX5/en/nUuNdff12TJk3KCovau+SSS/TAAw9o/fr1uvjiixUOh7V27VrNnz+/098PgH723k2J5dw/WFoGkKtW/26zJOnuxXMsrqT/9SowGjdunNasWdNh/6pVq7K2r7nmmk6vdzgcuvXWWw+hPPSnl975XP/x+J91zOgi3XLlycrzH94TaQAA6EudPeHspZde0r//+7/rK1/5iq677joVFxfLZrPpqquuUiQS6bHN9v9RK/U0tswAqDP33nuvfvWrX2nx4sU68cQTFQgEtHv3bl133XXpa1OhzMiRI7tspzfnHKzOwqIPPvhAV111lebM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\n","text/plain":["<Figure size 1440x576 with 2 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","FOLD: 3\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 2 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","FOLD: 4\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 2 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","FOLD: 5\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 2 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"ImheYrtKCaO7","papermill":{"duration":0.140565,"end_time":"2021-01-20T23:41:36.235070","exception":false,"start_time":"2021-01-20T23:41:36.094505","status":"completed"},"tags":[]},"source":["# Model evaluation\n","\n","Now we can evaluate the performance of the model, first, we can evaluate the usual metrics like, `accuracy`, `precision`, `recall`, and `f1-score`, `scikit-learn` provides the perfect function for this `classification_report`.\n","\n","We are evaluating the model on the `OOF` predictions, it stands for `Out Of Fold`, since we are training using `K-Fold` our model will see all the data, and the correct way to evaluate each fold is by looking at the predictions that are not from that fold.\n","\n","## OOF metrics"]},{"cell_type":"markdown","metadata":{"id":"I_QvO8rPCaO7","papermill":{"duration":0.142773,"end_time":"2021-01-20T23:41:36.524904","exception":false,"start_time":"2021-01-20T23:41:36.382131","status":"completed"},"tags":[]},"source":["#### I am still having some problems to get the real model `OOF` scores while using `TPU Pods`, so the results here and the confusion matrix are just placeholders."]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:41:36.817847Z","iopub.status.busy":"2021-01-20T23:41:36.816550Z","iopub.status.idle":"2021-01-20T23:41:36.871365Z","shell.execute_reply":"2021-01-20T23:41:36.870279Z"},"id":"q7TfhkICCaO7","papermill":{"duration":0.205034,"end_time":"2021-01-20T23:41:36.871548","exception":false,"start_time":"2021-01-20T23:41:36.666514","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611710260330,"user_tz":-540,"elapsed":10070028,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"96fd447d-fe83-4bea-93eb-b742dc6d0bbe"},"source":["y_true = np.concatenate(oof_labels)\n","y_true = np.argmax(y_true, axis=-1)\n","y_pred = np.concatenate(oof_pred)\n","\n","print(classification_report(y_true, y_pred, target_names=CLASSES))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["                              precision    recall  f1-score   support\n","\n","    Cassava Bacterial Blight       0.66      0.66      0.66      1086\n","Cassava Brown Streak Disease       0.86      0.80      0.83      2189\n","        Cassava Green Mottle       0.83      0.80      0.81      2386\n","      Cassava Mosaic Disease       0.95      0.97      0.96     13158\n","                     Healthy       0.74      0.76      0.75      2576\n","\n","                    accuracy                           0.89     21395\n","                   macro avg       0.81      0.80      0.80     21395\n","                weighted avg       0.89      0.89      0.89     21395\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"pIAJafCnCaO7","papermill":{"duration":0.1407,"end_time":"2021-01-20T23:41:37.153525","exception":false,"start_time":"2021-01-20T23:41:37.012825","status":"completed"},"tags":[]},"source":["# Confusion matrix\n","\n","Let's also take a look at the confusion matrix, this will give us an idea about what classes the model is mixing or having a hard time."]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:41:37.451948Z","iopub.status.busy":"2021-01-20T23:41:37.451220Z","iopub.status.idle":"2021-01-20T23:41:37.902193Z","shell.execute_reply":"2021-01-20T23:41:37.902770Z"},"id":"dw2F8Wk2CaO7","papermill":{"duration":0.608362,"end_time":"2021-01-20T23:41:37.902957","exception":false,"start_time":"2021-01-20T23:41:37.294595","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611710260332,"user_tz":-540,"elapsed":10070026,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"0e38e99d-a43e-40ec-eea8-98106e51c89e"},"source":["fig, ax = plt.subplots(1, 1, figsize=(20, 12))\n","cfn_matrix = confusion_matrix(y_true, y_pred, labels=range(len(CLASSES)))\n","cfn_matrix = (cfn_matrix.T / cfn_matrix.sum(axis=1)).T\n","df_cm = pd.DataFrame(cfn_matrix, index=CLASSES, columns=CLASSES)\n","ax = sns.heatmap(df_cm, cmap='Blues', annot=True, fmt='.2f', linewidths=.5).set_title('Train', fontsize=30)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x864 with 2 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"AaZVX_ZhCaO7","papermill":{"duration":0.14275,"end_time":"2021-01-20T23:41:38.189478","exception":false,"start_time":"2021-01-20T23:41:38.046728","status":"completed"},"tags":[]},"source":["# Visualize predictions\n","\n","Finally, it is a good practice to always inspect some of the model's prediction by looking at the data, this can give an idea if the model is getting some predictions wrong because the data is really hard, of if it is because the model is actually bad.\n","\n","\n","### Class map\n","```\n","0: Cassava Bacterial Blight (CBB)\n","1: Cassava Brown Streak Disease (CBSD)\n","2: Cassava Green Mottle (CGM)\n","3: Cassava Mosaic Disease (CMD)\n","4: Healthy\n","```\n","\n","\n","## Train set"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:41:38.486711Z","iopub.status.busy":"2021-01-20T23:41:38.478610Z","iopub.status.idle":"2021-01-20T23:42:07.973278Z","shell.execute_reply":"2021-01-20T23:42:07.973946Z"},"id":"ExEWWtxyCaO8","papermill":{"duration":29.642469,"end_time":"2021-01-20T23:42:07.974121","exception":false,"start_time":"2021-01-20T23:41:38.331652","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1IT08Ea1qw3CctGvzyYz0li6zuIYcJCvu"},"executionInfo":{"status":"ok","timestamp":1611710299229,"user_tz":-540,"elapsed":10108919,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"058e358e-7bd2-4e08-d2fb-a3ddfec74279"},"source":["train_dataset = get_dataset(TRAINING_FILENAMES, ordered=True)\n","x_samp, y_samp = dataset_to_numpy_util(train_dataset, 18)\n","y_samp = np.argmax(y_samp, axis=-1)\n","\n","x_samp_1, y_samp_1 = x_samp[:9,:,:,:], y_samp[:9]\n","samp_preds_1 = model.predict(x_samp_1, batch_size=9)\n","display_9_images_with_predictions(x_samp_1, samp_preds_1, y_samp_1)\n","\n","x_samp_2, y_samp_2 = x_samp[9:,:,:,:], y_samp[9:]\n","samp_preds_2 = model.predict(x_samp_2, batch_size=9)\n","display_9_images_with_predictions(x_samp_2, samp_preds_2, y_samp_2)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-01-20T23:42:08.485006Z","iopub.status.busy":"2021-01-20T23:42:08.479584Z","iopub.status.idle":"2021-01-20T23:42:08.490084Z","shell.execute_reply":"2021-01-20T23:42:08.489432Z"},"id":"h9CeTJAYKYQd","papermill":{"duration":0.271568,"end_time":"2021-01-20T23:42:08.490212","exception":false,"start_time":"2021-01-20T23:42:08.218644","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611710299585,"user_tz":-540,"elapsed":10109271,"user":{"displayName":"鎌田康太郎","photoUrl":"https://lh3.googleusercontent.com/-kcpEta3hFnI/AAAAAAAAAAI/AAAAAAAAAMU/efKY0LsQQVA/s64/photo.jpg","userId":"14776559597549076807"}},"outputId":"ef3526a8-fb22-4e1b-aaee-2f4f9c396a0a"},"source":["\n","save_data=True# You can immediately create a kaggle dataset from your models\n","if COLAB and save_data:\n","  \n","    import json\n","\n","\n","    \n","    data = {\"title\": \"Cassava Leaf Disease\", \n","        \"id\": \"aikhmelnytskyy/CassavaLeafDisease\", \n","        \"licenses\": [\n","                     {\n","                         \"name\": \"CC0-1.0\"\n","                      }\n","                     ]}\n","    \n","\n","    # for kaggle api Connection\n","    \n","    !kaggle datasets init -p /content/drive/MyDrive/Colab Notebooks/Cassava/\n","    \n","    with open(\"/content/drive/MyDrive/Colab Notebooks/Cassava/dataset-metadata.json\", \"w\", encoding=\"utf-8\") as file:\n","        json.dump(data, file)\n","    \n","    #if new dataset\n","    !kaggle datasets create -p /content/drive/MyDrive/Models/Cassava/\n","    #If you’d like to upload a new version of an existing dataset\n","    #!kaggle datasets version -p /content/drive/MyDrive/Models/Cassava/ -m \"Your message here\""],"execution_count":null,"outputs":[{"output_type":"stream","text":["Traceback (most recent call last):\n","  File \"/usr/local/bin/kaggle\", line 5, in <module>\n","    from kaggle.cli import main\n","  File \"/usr/local/lib/python3.6/dist-packages/kaggle/__init__.py\", line 23, in <module>\n","    api.authenticate()\n","  File \"/usr/local/lib/python3.6/dist-packages/kaggle/api/kaggle_api_extended.py\", line 166, in authenticate\n","    self.config_file, self.config_dir))\n","OSError: Could not find kaggle.json. Make sure it's located in /root/.kaggle. Or use the environment method.\n","Traceback (most recent call last):\n","  File \"/usr/local/bin/kaggle\", line 5, in <module>\n","    from kaggle.cli import main\n","  File \"/usr/local/lib/python3.6/dist-packages/kaggle/__init__.py\", line 23, in <module>\n","    api.authenticate()\n","  File \"/usr/local/lib/python3.6/dist-packages/kaggle/api/kaggle_api_extended.py\", line 166, in authenticate\n","    self.config_file, self.config_dir))\n","OSError: Could not find kaggle.json. Make sure it's located in /root/.kaggle. Or use the environment method.\n"],"name":"stdout"}]}]}